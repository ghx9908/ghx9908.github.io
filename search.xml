<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git配置个人信息</title>
      <link href="/2025/07/25/git-pei-zhi-ge-ren-xin-xi/"/>
      <url>/2025/07/25/git-pei-zhi-ge-ren-xin-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="🌟-配置全局用户名和邮箱（适用于所有仓库）"><a href="#🌟-配置全局用户名和邮箱（适用于所有仓库）" class="headerlink" title="🌟 配置全局用户名和邮箱（适用于所有仓库）"></a>🌟 配置全局用户名和邮箱（适用于所有仓库）</h2><h3 id="步骤-1：配置用户名"><a href="#步骤-1：配置用户名" class="headerlink" title="步骤 1：配置用户名"></a>步骤 1：配置用户名</h3><p>打开终端并运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"Your Name"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="步骤-2：配置邮箱"><a href="#步骤-2：配置邮箱" class="headerlink" title="步骤 2：配置邮箱"></a>步骤 2：配置邮箱</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"your-email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>🔍 <strong>注意</strong>：<code>--global</code> 表示此配置对所有仓库有效。如果你希望为某个特定仓库设置不同的用户名和邮箱，可以跳过 <code>--global</code>。</p></blockquote><hr><h2 id="🔧-配置局部用户名和邮箱（只针对当前仓库）"><a href="#🔧-配置局部用户名和邮箱（只针对当前仓库）" class="headerlink" title="🔧 配置局部用户名和邮箱（只针对当前仓库）"></a>🔧 配置局部用户名和邮箱（只针对当前仓库）</h2><p>如果你需要为某个特定仓库设置不同的用户名或邮箱：</p><ol><li>进入该仓库目录：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /path/to/your/repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>设置仓库的用户名和邮箱：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name <span class="token string">"Your Name"</span><span class="token function">git</span> config user.email <span class="token string">"your-email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="✅-验证配置"><a href="#✅-验证配置" class="headerlink" title="✅ 验证配置"></a>✅ 验证配置</h2><p>你可以使用以下命令检查当前的用户名和邮箱配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果想查看当前仓库的配置信息（局部配置），可以执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name<span class="token function">git</span> config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="🧩-其他配置"><a href="#🧩-其他配置" class="headerlink" title="🧩 其他配置"></a>🧩 其他配置</h2><p>如果需要查看所有 Git 配置（包括全局和局部配置）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--list</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将显示所有配置项（包括用户名、邮箱等信息）。</p><hr><p>通过这些配置，你可以确保在提交代码时，Git 会使用正确的身份信息。如果需要更改邮箱或者用户名，只需要执行相应的 <code>git config</code> 命令即可。</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac配置</title>
      <link href="/2025/07/23/mac-pei-zhi/"/>
      <url>/2025/07/23/mac-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="✅-一、系统级基础配置"><a href="#✅-一、系统级基础配置" class="headerlink" title="✅ 一、系统级基础配置"></a>✅ 一、系统级基础配置</h2><h3 id="1-macOS-设置（建议手动设置）"><a href="#1-macOS-设置（建议手动设置）" class="headerlink" title="1. macOS 设置（建议手动设置）"></a>1. macOS 设置（建议手动设置）</h3><ul><li><p>打开开发者模式（如终端执行命令无警告）</p></li><li><p>快捷键、触控板、Dock、访达偏好设置优化</p></li><li><p>安装 Xcode Command Line Tools：</p><pre class="line-numbers language-none"><code class="language-none">bash复制编辑xcode-select --install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-安装包管理器-Homebrew"><a href="#2-安装包管理器-Homebrew" class="headerlink" title="2. 安装包管理器 Homebrew"></a>2. 安装包管理器 Homebrew</h3><pre class="line-numbers language-none"><code class="language-none">bash复制编辑&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;HEAD&#x2F;install.sh)&quot;brew doctor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="✅-二、终端环境配置"><a href="#✅-二、终端环境配置" class="headerlink" title="✅ 二、终端环境配置"></a>✅ 二、终端环境配置</h2><h3 id="1-安装并配置终端工具"><a href="#1-安装并配置终端工具" class="headerlink" title="1. 安装并配置终端工具"></a>1. 安装并配置终端工具</h3><pre class="line-numbers language-none"><code class="language-none">bash复制编辑brew install zsh zsh-completionsbrew install starship<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建议使用 <a href="https://iterm2.com/">iTerm2</a> 替代默认终端，配合 Starship 提升体验：</p><pre class="line-numbers language-none"><code class="language-none">bash复制编辑brew install --cask iterm2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Zsh-插件和主题"><a href="#2-Zsh-插件和主题" class="headerlink" title="2. Zsh 插件和主题"></a>2. Zsh 插件和主题</h3><ul><li><p>使用 oh-my-zsh：</p><pre class="line-numbers language-none"><code class="language-none">bash复制编辑sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>推荐插件：</p><ul><li><code>zsh-autosuggestions</code></li><li><code>zsh-syntax-highlighting</code></li><li><code>z</code></li></ul></li><li><p>使用 Starship 美化终端提示符（<code>.zshrc</code> 添加）</p><pre class="line-numbers language-none"><code class="language-none">bash复制编辑eval &quot;$(starship init zsh)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="✅-三、开发通用工具安装"><a href="#✅-三、开发通用工具安装" class="headerlink" title="✅ 三、开发通用工具安装"></a>✅ 三、开发通用工具安装</h2><h3 id="1-Git-与-SSH-配置"><a href="#1-Git-与-SSH-配置" class="headerlink" title="1. Git 与 SSH 配置"></a>1. Git 与 SSH 配置</h3><pre class="line-numbers language-none"><code class="language-none">bash复制编辑brew install gitgit config --global user.name &quot;你的名字&quot;git config --global user.email &quot;邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>生成 SSH key：</p><pre class="line-numbers language-none"><code class="language-none">bash复制编辑ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加到 GitHub / Gitee</p><pre class="line-numbers language-none"><code class="language-none">bash复制编辑pbcopy &lt; ~&#x2F;.ssh&#x2F;id_ed25519.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-Node-js-管理器（nvm-推荐）"><a href="#2-Node-js-管理器（nvm-推荐）" class="headerlink" title="2. Node.js 管理器（nvm 推荐）"></a>2. Node.js 管理器（nvm 推荐）</h3><pre class="line-numbers language-none"><code class="language-none">bash复制编辑brew install nvmmkdir ~&#x2F;.nvm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>~/.zshrc</code> 添加：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.nvm"</span><span class="token builtin class-name">source</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--prefix</span> nvm<span class="token variable">)</span></span>/nvm.sh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装 LTS Node.js：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm <span class="token function">install</span> <span class="token parameter variable">--lts</span>nvm use <span class="token parameter variable">--lts</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="✅-四、前端开发环境"><a href="#✅-四、前端开发环境" class="headerlink" title="✅ 四、前端开发环境"></a>✅ 四、前端开发环境</h2><h3 id="1-包管理器"><a href="#1-包管理器" class="headerlink" title="1. 包管理器"></a>1. 包管理器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">pnpm</span> <span class="token function">yarn</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-常用-CLI-工具"><a href="#2-常用-CLI-工具" class="headerlink" title="2. 常用 CLI 工具"></a>2. 常用 CLI 工具</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> eslint prettier vite create-react-app @vue/cli typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-浏览器与扩展"><a href="#3-浏览器与扩展" class="headerlink" title="3. 浏览器与扩展"></a>3. 浏览器与扩展</h3><ul><li>Chrome / Edge（调试工具丰富）</li><li>插件推荐：<ul><li>Vue.js Devtools</li><li>React Developer Tools</li><li>Redux DevTools</li><li>JSON Viewer</li></ul></li></ul><hr><h2 id="✅-五、IDE-与编辑器"><a href="#✅-五、IDE-与编辑器" class="headerlink" title="✅ 五、IDE 与编辑器"></a>✅ 五、IDE 与编辑器</h2><h3 id="推荐安装-VS-Code："><a href="#推荐安装-VS-Code：" class="headerlink" title="推荐安装 VS Code："></a>推荐安装 VS Code：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token parameter variable">--cask</span> visual-studio-code<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推荐插件：</p><ul><li>ESLint / Prettier / Vetur / VueDX / Volar</li><li>GitLens / Git Graph</li><li>Path Intellisense / Auto Import / IntelliCode</li><li>Bracket Pair Colorizer / TabNine（AI）</li><li>REST Client</li></ul><hr><h2 id="✅-六、其他推荐工具（视个人喜好）"><a href="#✅-六、其他推荐工具（视个人喜好）" class="headerlink" title="✅ 六、其他推荐工具（视个人喜好）"></a>✅ 六、其他推荐工具（视个人喜好）</h2><h3 id="1-数据库-接口调试"><a href="#1-数据库-接口调试" class="headerlink" title="1. 数据库/接口调试"></a>1. 数据库/接口调试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token parameter variable">--cask</span> postmanbrew <span class="token function">install</span> <span class="token parameter variable">--cask</span> insomnia<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-API-Mock-服务代理"><a href="#2-API-Mock-服务代理" class="headerlink" title="2. API Mock / 服务代理"></a>2. API Mock / 服务代理</h3><ul><li>mockoon、apifox、proxyman、whistle 等</li></ul><h3 id="3-Docker"><a href="#3-Docker" class="headerlink" title="3. Docker"></a>3. Docker</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token parameter variable">--cask</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="✅-七、前端项目模板或脚手架配置"><a href="#✅-七、前端项目模板或脚手架配置" class="headerlink" title="✅ 七、前端项目模板或脚手架配置"></a>✅ 七、前端项目模板或脚手架配置</h2><p>可提前准备如下内容：</p><ul><li>公司或个人常用项目模板（React、Vue3 + Vite、Nuxt、Next.js）</li><li>ESLint + Prettier + husky + lint-staged 等规范统一方案</li><li>Tailwind / Naive UI / Element Plus / Ant Design 配置</li><li>常用 hooks、组件封装库</li><li>vite.config.js / tsconfig.json 模板</li></ul><hr><h2 id="✅-八、效率与脚本工具"><a href="#✅-八、效率与脚本工具" class="headerlink" title="✅ 八、效率与脚本工具"></a>✅ 八、效率与脚本工具</h2><ul><li>Alfred（效率神器）</li><li>Raycast（现代替代品）</li><li>Rectangle（窗口管理）</li><li>Typora / Obsidian（笔记）</li><li>Hammerspoon（脚本自动化）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3中实现可重置的状态管理：useRestableRef与useRestableActive</title>
      <link href="/2025/06/24/vue3-zhong-shi-xian-ke-chong-zhi-de-zhuang-tai-guan-li-userestableref-yu-userestableactive/"/>
      <url>/2025/06/24/vue3-zhong-shi-xian-ke-chong-zhi-de-zhuang-tai-guan-li-userestableref-yu-userestableactive/</url>
      
        <content type="html"><![CDATA[<p>在 Vue 3 的 Composition API 开发中，我们经常会遇到一种需求：<strong>在某些操作后，能够将组件状态「重置」为初始值</strong>，比如表单还原、筛选项回退等。</p><p>本文将介绍三个实用的可重置状态封装函数，分别适用于不同场景：</p><ul><li><code>useRestableRefFn</code>：适合每次初始化都需要新计算初始值的情况；</li><li><code>useRestableRef</code>：适合处理基本类型或非响应式对象；</li><li><code>useRestableActive</code>：适合处理复杂的响应式对象（如 reactive 表单对象）。</li></ul><h2 id="一、useRestableRefFn：每次初始化都执行函数"><a href="#一、useRestableRefFn：每次初始化都执行函数" class="headerlink" title="一、useRestableRefFn：每次初始化都执行函数"></a>一、useRestableRefFn：每次初始化都执行函数</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useRestableRefFn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> reset <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><p>如果你的初始值是通过函数计算出来的（如当前时间、生成默认配置等），而不是一个固定值，那么每次 reset 都应该重新执行这个函数。</p><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> reset <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRestableRefFn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每次调用 <code>reset()</code>，<code>state.value</code> 都会变成新的时间对象。</p><hr><h2 id="二、useRestableRef：可重置的-ref-状态"><a href="#二、useRestableRef：可重置的-ref-状态" class="headerlink" title="二、useRestableRef：可重置的 ref 状态"></a>二、useRestableRef：可重置的 ref 状态</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useRestableRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> inintValue <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>inintValue<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> reset <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li>初始值只会存储一份深拷贝；</li><li>每次重置都会重新 clone 一份新的，避免引用问题；</li><li>适合 ref 管理的基本数据或简单对象。</li></ul><h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> reset <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRestableRef</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用 <code>reset()</code> 后，<code>state.value</code> 会恢复为最初的 <code>&#123; name: &#39;Tom&#39;, age: 18 &#125;</code>。</p><p>⚠️ 注意：如果你传的是引用类型，最好保证该值在初始化时是全新的对象，否则后续 reset 会出现数据共享问题。</p><hr><h2 id="三、useRestableActive：适用于-reactive-的响应式对象"><a href="#三、useRestableActive：适用于-reactive-的响应式对象" class="headerlink" title="三、useRestableActive：适用于 reactive 的响应式对象"></a>三、useRestableActive：适用于 reactive 的响应式对象</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useRestableActive</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">></span></span></span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> clone <span class="token operator">=</span> cloneDeep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> inintValue <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token constant">T</span>  <span class="token keyword">const</span> <span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">delete</span> state<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token function">clone</span><span class="token punctuation">(</span>inintValue<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> reset <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ul><li>使用 <code>reactive</code> 包装整个对象，使得响应式深层可用；</li><li><code>reset()</code> 方法通过先清空对象，再用初始副本赋值，确保所有新字段也能被移除；</li><li>接受一个可选的 <code>clone</code> 方法，以支持更灵活的数据复制策略。</li></ul><h3 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> reset <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRestableActive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> tags<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"vue"</span><span class="token punctuation">,</span> <span class="token string">"ts"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 后续新增字段：</span>state<span class="token punctuation">.</span>newField <span class="token operator">=</span> <span class="token string">"dynamic"</span><span class="token comment">// reset 后 newField 会被删除</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="使用建议和注意事项"><a href="#使用建议和注意事项" class="headerlink" title="使用建议和注意事项"></a>使用建议和注意事项</h2><ol><li>对于 ref 和 reactive 管理的对象，不要直接将外部引用传进去，避免共享问题；</li><li>推荐使用 <code>cloneDeep</code>，避免引用类型间的副作用；</li><li>如果你希望 reset 的初始值是动态计算的，使用 <code>useRestableRefFn</code> 更合适；</li><li><code>useRestableActive</code> 的性能比 <code>useRestableRef</code> 稍低一些，适合结构复杂的场景；</li><li>多用于<strong>表单数据管理、筛选条件恢复、数据编辑撤销</strong>等场景。</li></ol><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过 <code>useRestableRefFn</code>、<code>useRestableRef</code> 和 <code>useRestableActive</code>，你可以更优雅地管理组件内部的状态重置逻辑。这不仅提高了代码的复用性，也让组件行为更加可预测、易维护。</p><p>如果你在项目中经常处理「还原状态」的需求，不妨尝试将这些工具函数加入到你的工具库中。</p><h2 id="useRestable-ts"><a href="#useRestable-ts" class="headerlink" title="useRestable.ts"></a>useRestable.ts</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> cloneDeep <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"lodash-es"</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useRestableRefFn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function-variable function">cb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> reset <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useRestableRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> inintValue <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里也需要clone下，要不然reset后，第二次rest会有问题</span>    state<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>inintValue<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> reset <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useRestableActive</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">></span></span></span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> clone <span class="token operator">=</span> cloneDeep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> inintValue <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token constant">T</span>  <span class="token keyword">const</span> <span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 先删除旧的key,因为可能会新加字段</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">delete</span> state<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 恢复成默认值，不能直接重新赋值，要不然就是新的reactive了</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token function">clone</span><span class="token punctuation">(</span>inintValue<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> reset <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eslint配置案例</title>
      <link href="/2024/10/18/eslint-pei-zhi-an-li/"/>
      <url>/2024/10/18/eslint-pei-zhi-an-li/</url>
      
        <content type="html"><![CDATA[<h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @ts-check</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"eslint-define-config"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">es6</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/setup-compiler-macros"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">"vue-eslint-parser"</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"simple-import-sort"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">"@typescript-eslint/parser"</span><span class="token punctuation">,</span>    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">2020</span><span class="token punctuation">,</span>    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>    <span class="token literal-property property">jsxPragma</span><span class="token operator">:</span> <span class="token string">"React"</span><span class="token punctuation">,</span>    <span class="token literal-property property">ecmaFeatures</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"plugin:vue/vue3-recommended"</span><span class="token punctuation">,</span>    <span class="token string">"plugin:@typescript-eslint/recommended"</span><span class="token punctuation">,</span>    <span class="token string">"prettier"</span><span class="token punctuation">,</span>    <span class="token string">"plugin:prettier/recommended"</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"vue/script-setup-uses-vars"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/multi-word-component-names"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/comment-directive"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/ban-ts-ignore"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/explicit-function-return-type"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/no-explicit-any"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/no-var-requires"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/no-empty-function"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/custom-event-name-casing"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-use-before-define"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/no-use-before-define"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/ban-ts-comment"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/ban-types"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/no-non-null-assertion"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/explicit-module-boundary-types"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/no-unused-vars"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">varsIgnorePattern</span><span class="token operator">:</span> <span class="token string">".*"</span><span class="token punctuation">,</span> <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token string">"none"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-unused-vars"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token comment">// we are only using this rule to check for unused arguments since TS</span>      <span class="token comment">// catches unused variables but not args.</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">varsIgnorePattern</span><span class="token operator">:</span> <span class="token string">".*"</span><span class="token punctuation">,</span> <span class="token literal-property property">args</span><span class="token operator">:</span> <span class="token string">"none"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"space-before-function-paren"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/attributes-order"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">order</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token string">"LIST_RENDERING"</span><span class="token punctuation">,</span>          <span class="token string">"CONDITIONALS"</span><span class="token punctuation">,</span>          <span class="token string">"RENDER_MODIFIERS"</span><span class="token punctuation">,</span>          <span class="token string">"GLOBAL"</span><span class="token punctuation">,</span>          <span class="token string">"UNIQUE"</span><span class="token punctuation">,</span>          <span class="token string">"TWO_WAY_BINDING"</span><span class="token punctuation">,</span>          <span class="token string">"OTHER_ATTR"</span><span class="token punctuation">,</span>          <span class="token string">"EVENTS"</span><span class="token punctuation">,</span>          <span class="token string">"CONTENT"</span><span class="token punctuation">,</span>          <span class="token string">"DEFINITION"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/one-component-per-file"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/html-closing-bracket-newline"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/max-attributes-per-line"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/multiline-html-element-content-newline"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/singleline-html-element-content-newline"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/attribute-hyphenation"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/require-default-prop"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/html-self-closing"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">html</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">void</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>          <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token string">"never"</span><span class="token punctuation">,</span>          <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">svg</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>        <span class="token literal-property property">math</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"simple-import-sort/imports"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">groups</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"^vue"</span><span class="token punctuation">,</span> <span class="token string">"^@?\\w"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"^"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"^\\."</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"^/#"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"simple-import-sort/exports"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/no-this-alias"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个代码是一个用于配置 ESLint 的文件，使用了 <code>eslint-define-config</code> 以及多个 ESLint 插件和规则集来检查和格式化 TypeScript 和 Vue 3 代码中的代码风格。该配置文件主要目的是保证代码一致性、提高可读性，并自动排序导入（<code>import</code>）语句等。</p><h3 id="主要内容解析"><a href="#主要内容解析" class="headerlink" title="主要内容解析"></a>主要内容解析</h3><h4 id="1-根级别配置-root-true"><a href="#1-根级别配置-root-true" class="headerlink" title="1. 根级别配置 (root: true)"></a>1. <strong>根级别配置 (<code>root: true</code>)</strong></h4><p>通过设置 <code>root: true</code>，确保当前目录为 ESLint 的根目录，防止 ESLint 查找更高层的配置文件。</p><h4 id="2-环境设置-env"><a href="#2-环境设置-env" class="headerlink" title="2. 环境设置 (env)"></a>2. <strong>环境设置 (<code>env</code>)</strong></h4><p>配置了代码运行环境，包括浏览器、Node.js 和 ES6 环境，还启用了 Vue 3 的 <code>setup-compiler-macros</code> 语法支持。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token literal-property property">es6</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token string-property property">'vue/setup-compiler-macros'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-解析器-parser"><a href="#3-解析器-parser" class="headerlink" title="3. 解析器 (parser)"></a>3. <strong>解析器 (<code>parser</code>)</strong></h4><p>使用 <code>vue-eslint-parser</code> 作为解析器来支持 Vue 文件，同时指定 <code>@typescript-eslint/parser</code> 作为内嵌 TypeScript 解析器：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">'vue-eslint-parser'</span><span class="token punctuation">,</span><span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">'@typescript-eslint/parser'</span><span class="token punctuation">,</span>   <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">2020</span><span class="token punctuation">,</span>   <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">'module'</span><span class="token punctuation">,</span>   <span class="token literal-property property">jsxPragma</span><span class="token operator">:</span> <span class="token string">'React'</span><span class="token punctuation">,</span>   <span class="token literal-property property">ecmaFeatures</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这部分配置用于解析现代 JavaScript 和 TypeScript 语法，包括 JSX 支持。</p><h4 id="4-扩展-extends"><a href="#4-扩展-extends" class="headerlink" title="4. 扩展 (extends)"></a>4. <strong>扩展 (<code>extends</code>)</strong></h4><p>使用了多个 ESLint 扩展规则集，这些扩展预设了很多常用的代码检查规则：</p><ul><li><code>plugin:vue/vue3-recommended</code>：推荐的 Vue 3 风格规则。</li><li><code>plugin:@typescript-eslint/recommended</code>：TypeScript 推荐的规则。</li><li><code>prettier</code> 和 <code>plugin:prettier/recommended</code>：禁用与 Prettier 冲突的 ESLint 规则，并确保 Prettier 格式化规则优先。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>   <span class="token string">'plugin:vue/vue3-recommended'</span><span class="token punctuation">,</span>   <span class="token string">'plugin:@typescript-eslint/recommended'</span><span class="token punctuation">,</span>   <span class="token string">'prettier'</span><span class="token punctuation">,</span>   <span class="token string">'plugin:prettier/recommended'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-规则-rules"><a href="#5-规则-rules" class="headerlink" title="5. 规则 (rules)"></a>5. <strong>规则 (<code>rules</code>)</strong></h4><p>定义了具体的 ESLint 规则来微调代码检查和格式化的行为。部分规则关闭了严格检查，减少了对代码的一些干扰：</p><ul><li><p><strong>Vue 相关规则</strong>：</p><ul><li><code>vue/script-setup-uses-vars</code>: 避免 <code>setup</code> 中的变量被错误地标记为未使用。</li><li><code>vue/multi-word-component-names</code>: 允许单词组件名称，不强制多单词组件名称。</li><li><code>vue/html-self-closing</code>: 强制 HTML 标签的自闭合（例如 <code>&lt;br /&gt;</code>）。</li></ul></li><li><p><strong>TypeScript 相关规则</strong>：</p><ul><li><code>@typescript-eslint/no-explicit-any</code>: 允许使用 <code>any</code> 类型。</li><li><code>@typescript-eslint/no-unused-vars</code>: 处理未使用的变量警告，忽略参数。</li></ul></li><li><p><strong>导入排序规则</strong>（<code>simple-import-sort</code> 插件）：</p><ul><li>通过 <code>simple-import-sort</code> 插件，自动排序 <code>import</code> 和 <code>export</code> 语句，按模块类别和路径进行分组：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">'simple-import-sort/imports'</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token string">'error'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">groups</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'^vue'</span><span class="token punctuation">,</span> <span class="token string">'^@?\\w'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'^'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'^\\.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'^/#'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string-property property">'simple-import-sort/exports'</span><span class="token operator">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>Prettier 相关规则</strong>：禁用了 <code>space-before-function-paren</code> 等规则以避免和 Prettier 冲突。</p></li></ul><h4 id="6-所用到的包"><a href="#6-所用到的包" class="headerlink" title="6. 所用到的包"></a>6. <strong>所用到的包</strong></h4><ul><li>**<code>eslint-define-config</code>**：简化 ESLint 配置定义。</li><li>**<code>vue-eslint-parser</code>**：解析 <code>.vue</code> 文件的 ESLint 解析器。</li><li>**<code>@typescript-eslint/parser</code>**：TypeScript 代码的 ESLint 解析器。</li><li>**<code>@typescript-eslint/eslint-plugin</code>**：提供 TypeScript 相关的 ESLint 规则。</li><li>**<code>eslint-plugin-vue</code>**：针对 Vue.js 的 ESLint 插件，提供 Vue 特有的规则。</li><li>**<code>eslint-plugin-simple-import-sort</code>**：用于对 <code>import</code> 和 <code>export</code> 语句进行排序。</li><li>**<code>prettier</code>**：用于代码格式化，确保代码风格一致。</li><li>**<code>eslint-plugin-prettier</code>**：将 Prettier 与 ESLint 集成，在 ESLint 规则中运行 Prettier。</li><li>**<code>eslint-config-prettier</code>**：禁用可能与 Prettier 冲突的 ESLint 规则。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个配置文件结合了 TypeScript、Vue 3 和 Prettier 的规则，使用 <code>simple-import-sort</code> 来自动化 <code>import</code> 排序，并对 Vue 和 TypeScript 做了一些特定规则的调整。这种配置确保代码风格一致、可读性高，适用于 Vue 3 + TypeScript 项目。</p>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm包详解</title>
      <link href="/2024/10/17/npm-bao-xiang-jie/"/>
      <url>/2024/10/17/npm-bao-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="simple-import-sort"><a href="#simple-import-sort" class="headerlink" title="simple-import-sort"></a><code>simple-import-sort</code></h2><p><code>simple-import-sort</code> 是一个用于自动排序 JavaScript 和 TypeScript 文件中的 <code>import</code> 语句的 ESLint 插件或工具，旨在提高代码的一致性、可读性和维护性。它通过按字母顺序和模块类型（如第三方库、相对路径等）排序导入内容，使代码风格更加统一，减少代码审查中的无效讨论。</p><h3 id="作用和好处"><a href="#作用和好处" class="headerlink" title="作用和好处"></a>作用和好处</h3><ol><li><p><strong>提高代码可读性</strong>：当所有的 <code>import</code> 语句按照固定规则排列时，代码会显得更加整洁和一致，其他开发者在阅读代码时也能快速找到所需的依赖。</p></li><li><p><strong>减少人为错误</strong>：手动调整 <code>import</code> 顺序可能容易出错，尤其是在大型项目中。<code>simple-import-sort</code> 自动化这一过程，确保导入顺序始终符合预期。</p></li><li><p><strong>与 ESLint 集成</strong>：通过与 ESLint 的集成，你可以在代码检查或提交时自动排序 <code>import</code> 语句，保证团队代码风格的一致性。</p></li><li><p><strong>按模块类别排序</strong>：<code>simple-import-sort</code> 不仅按字母顺序排列，还可以智能地将第三方模块、本地模块、相对路径等分组，使导入顺序更加清晰。</p></li></ol><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><p>你可以通过 npm 或 yarn 安装 <code>simple-import-sort</code> 和 ESLint 插件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev eslint-plugin-simple-import-sort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> eslint-plugin-simple-import-sort <span class="token parameter variable">--dev</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-配置-ESLint"><a href="#2-配置-ESLint" class="headerlink" title="2. 配置 ESLint"></a>2. 配置 ESLint</h4><p>安装完成后，你需要在 ESLint 的配置文件中启用 <code>simple-import-sort</code> 插件。</p><p>在 <code>.eslintrc.js</code> 文件中进行如下配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"simple-import-sort"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 启用自动排序的规则</span>    <span class="token string-property property">"simple-import-sort/imports"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token string-property property">"simple-import-sort/exports"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>simple-import-sort/imports</code>：自动对 <code>import</code> 语句进行排序。</li><li><code>simple-import-sort/exports</code>：自动对 <code>export</code> 语句进行排序（可选）。</li></ul><h4 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a>3. 使用示例</h4><p>假设你有如下未排序的 <code>import</code> 语句：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">"lodash"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./components/Button"</span><span class="token keyword">import</span> <span class="token string">"./styles.css"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Link <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启用 <code>simple-import-sort</code> 规则后，<code>import</code> 语句会自动按照规则重新排序，如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">"lodash"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Link <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./components/Button"</span><span class="token keyword">import</span> <span class="token string">"./styles.css"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>simple-import-sort</code> 默认会按照以下规则进行分组和排序：</p><ul><li>第三方库 <code>import</code>（如 <code>react</code>, <code>lodash</code>）</li><li>相对路径或本地模块 <code>import</code>（如 <code>./components/Button</code>）</li><li>样式或其他非 JS 资源的 <code>import</code>（如 <code>./styles.css</code>）</li></ul><h4 id="4-命令行排序（可选）"><a href="#4-命令行排序（可选）" class="headerlink" title="4. 命令行排序（可选）"></a>4. 命令行排序（可选）</h4><p>你也可以直接通过命令行使用 <code>simple-import-sort</code> 来对文件进行排序，而不依赖 ESLint：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx simple-import-sort ./src/**/*.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将在命令行中对指定目录中的文件执行 <code>import</code> 排序。</p><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><h4 id="分组排序"><a href="#分组排序" class="headerlink" title="分组排序"></a>分组排序</h4><p>你可以在 <code>eslint</code> 配置中自定义分组规则。例如，按照库类型或路径深度进行分组：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"simple-import-sort"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"simple-import-sort/imports"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">groups</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token comment">// Node.js built-in modules</span>          <span class="token punctuation">[</span><span class="token string">"^node:"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token comment">// External libraries</span>          <span class="token punctuation">[</span><span class="token string">"^@?\\w"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token comment">// Internal modules</span>          <span class="token punctuation">[</span><span class="token string">"^(@|components)(/.*|$)"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token comment">// Parent imports (starting with ..)</span>          <span class="token punctuation">[</span><span class="token string">"^\\.\\.(?!/?$)"</span><span class="token punctuation">,</span> <span class="token string">"^\\.\\./?$"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token comment">// Relative imports (starting with .)</span>          <span class="token punctuation">[</span><span class="token string">"^\\./(?=.*/)(?!/?$)"</span><span class="token punctuation">,</span> <span class="token string">"^\\.(?!/?$)"</span><span class="token punctuation">,</span> <span class="token string">"^\\./?$"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token comment">// Style imports</span>          <span class="token punctuation">[</span><span class="token string">"^.+\\.s?css$"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这段配置将导入语句分为多个组：Node.js 内置模块、外部库、内部模块、父级目录、相对路径和样式文件。</li></ul><h4 id="与-Prettier-集成"><a href="#与-Prettier-集成" class="headerlink" title="与 Prettier 集成"></a>与 Prettier 集成</h4><p><code>simple-import-sort</code> 可以与 Prettier 一起使用，通过 Prettier 格式化代码时确保导入顺序正确：</p><ol><li>安装 Prettier 和 <code>eslint-config-prettier</code>：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev prettier eslint-config-prettier<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>配置 <code>.eslintrc.js</code> 文件禁用 ESLint 中可能与 Prettier 冲突的规则：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span> <span class="token string">"plugin:prettier/recommended"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"simple-import-sort"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"simple-import-sort/imports"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token string-property property">"simple-import-sort/exports"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>simple-import-sort</code> 是一个非常方便的工具，用于自动化排序和规范 <code>import</code> 和 <code>export</code> 语句。在团队合作中，它有助于保持代码的一致性，减少无谓的代码审查纠纷。通过 ESLint 集成，可以轻松在开发流程中强制执行这一规则，提升代码质量和维护性。</p>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostCSS</title>
      <link href="/2024/10/17/posscss/"/>
      <url>/2024/10/17/posscss/</url>
      
        <content type="html"><![CDATA[<p><code>PostCSS</code> 是一个用于转换 CSS 的工具，它本质上是一个 JavaScript 插件系统，允许开发者通过编写或使用各种插件来对 CSS 进行处理和优化。它不像 Sass 或 LESS 那样是一个完整的 CSS 预处理器，而是通过一系列插件来实现不同的功能。这种插件化的架构使得 <code>PostCSS</code> 非常灵活和强大。</p><h3 id="核心特点"><a href="#核心特点" class="headerlink" title="核心特点"></a>核心特点</h3><ol><li><p><strong>插件化架构</strong>：</p><ul><li><code>PostCSS</code> 的核心几乎不做任何事情，它依赖插件来处理 CSS。这些插件可以执行诸如自动添加浏览器前缀、优化代码、支持未来的 CSS 语法、编译嵌套样式、变量替换等各种任务。</li></ul><p>例如，<code>autoprefixer</code> 插件用于自动添加浏览器前缀，<code>cssnano</code> 用于压缩 CSS。</p></li><li><p><strong>支持未来的 CSS 标准</strong>：</p><ul><li><code>PostCSS</code> 可以通过插件来支持还未在所有浏览器实现的未来 CSS 标准，如 CSS 变量、嵌套等。例如，<code>postcss-preset-env</code> 插件可以让开发者使用未来的 CSS 特性，类似于 Babel 让开发者使用最新的 JavaScript 特性。</li></ul></li><li><p><strong>易于集成</strong>：</p><ul><li><code>PostCSS</code> 可以轻松集成到构建工具中，如 Webpack、Gulp、Grunt 等。大多数现代前端工具链和框架（如 Tailwind CSS 和 Next.js）都内置了对 <code>PostCSS</code> 的支持。</li></ul></li><li><p><strong>性能优化</strong>：</p><ul><li>由于 <code>PostCSS</code> 插件链是灵活且可以自定义的，你可以根据项目需求选择只加载所需的插件，这让它在性能和功能之间保持良好的平衡。某些插件如 <code>cssnano</code> 专注于优化 CSS 体积以提高加载速度。</li></ul></li></ol><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p><code>PostCSS</code> 的工作流程分为三个主要步骤：</p><ol><li><strong>解析</strong>：<code>PostCSS</code> 将 CSS 源代码解析为一个抽象语法树（AST），这个过程使用了 <code>postcss-parser</code> 解析器。</li><li><strong>处理</strong>：通过加载插件，<code>PostCSS</code> 对这个 AST 进行遍历和修改，插件可以读取或修改 CSS 的规则、选择器、声明等。</li><li><strong>生成</strong>：修改完 AST 后，<code>PostCSS</code> 会将其转换回普通的 CSS 文件。</li></ol><p>这三个步骤允许开发者灵活地定制 CSS 的处理流程。</p><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><p><code>PostCSS</code> 的强大之处在于它有大量的插件可供使用，以下是一些常用的插件：</p><ol><li><p><strong>Autoprefixer</strong>：</p><ul><li><p>自动为 CSS 属性添加厂商前缀（如 <code>-webkit-</code>, <code>-moz-</code>），解决浏览器兼容性问题。</p><p>示例：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.example</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>会被处理为：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.example</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-flex<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> -ms-flexbox<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>cssnano</strong>：</p><ul><li>用于压缩 CSS 代码，减少文件体积，提高加载速度。</li></ul></li><li><p><strong>postcss-preset-env</strong>：</p><ul><li>允许开发者使用未来的 CSS 特性，并将其转译为当前浏览器兼容的 CSS。</li><li>例如，它支持 CSS 自定义属性、嵌套规则、自动计算 <code>calc()</code> 函数等。</li></ul></li><li><p><strong>postcss-import</strong>：</p><ul><li>允许在 CSS 中使用 <code>@import</code> 语法导入其他文件，类似于 Sass 的 <code>@import</code> 功能，方便模块化开发。</li></ul></li><li><p><strong>postcss-nested</strong>：</p><ul><li>允许在 CSS 中使用嵌套语法，类似于 Sass 的嵌套规则。</li></ul></li><li><p><strong>tailwindcss</strong>：</p><ul><li>与 Tailwind CSS 集成，生成实用类（utility classes）的 CSS 框架。</li></ul></li><li><p><strong>tailwindcss/nesting</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.button</span> <span class="token punctuation">&#123;</span>  <span class="token atrule"><span class="token rule">@apply</span> bg-blue-500 text-white<span class="token punctuation">;</span></span>  <span class="token selector">&amp;:hover</span> <span class="token punctuation">&#123;</span>    <span class="token atrule"><span class="token rule">@apply</span> bg-blue-700<span class="token punctuation">;</span></span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.icon</span> <span class="token punctuation">&#123;</span>    <span class="token atrule"><span class="token rule">@apply</span> w-6 h-6<span class="token punctuation">;</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>postcss-flexbugs-fixes</strong>：</p><ul><li>修复 Flexbox 在不同浏览器中的兼容性问题。</li></ul></li><li><p><strong>postcss-mixins</strong>：</p><ul><li>允许定义 CSS 混入（mixins），可以在多个地方重用相同的 CSS 代码块。</li></ul></li></ol><h3 id="示例配置"><a href="#示例配置" class="headerlink" title="示例配置"></a>示例配置</h3><h4 id="基本的-PostCSS-配置："><a href="#基本的-PostCSS-配置：" class="headerlink" title="基本的 PostCSS 配置："></a>基本的 PostCSS 配置：</h4><p>在 <code>postcss.config.js</code> 中配置 PostCSS 插件：</p><ol><li>tailwindcss 项目</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"postcss-import"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string-property property">"tailwindcss/nesting"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">tailwindcss</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">autoprefixer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>PostCSS</code> 是一个灵活且强大的 CSS 处理工具，依靠其插件系统，开发者可以实现从简单的样式转换到复杂的 CSS 预处理、优化等各种功能。由于它可以按需配置和加载插件，<code>PostCSS</code> 非常适合现代前端开发，尤其是需要高度定制化的项目。</p>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单点登录</title>
      <link href="/2024/10/09/dan-dian-deng-lu/"/>
      <url>/2024/10/09/dan-dian-deng-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="单点登录（SSO）"><a href="#单点登录（SSO）" class="headerlink" title="单点登录（SSO）"></a>单点登录（SSO）</h3><p>参考文档：<a href="https://juejin.cn/post/7044328327762411534?searchId=20240918172034A3B355DF0CFBF66410FA">https://juejin.cn/post/7044328327762411534?searchId=20240918172034A3B355DF0CFBF66410FA</a></p><h3 id="1-登录"><a href="#1-登录" class="headerlink" title="1 登录"></a>1 登录</h3><ol><li><p>用户访问系统 1 的受保护资源，系统 1 发现用户未登录，跳转至 sso 认证中心，并将自己的地址作为参数</p></li><li><p>sso 认证中心发现用户未登录，将用户引导至登录页面（带系统 1 地址）</p></li><li><p>用户输入用户名密码提交登录申请</p></li><li><p><code>sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话（这时该会话信息保存到cookie中），同时创建授权令牌</code> 设置 PToken</p></li><li><p>sso 认证中心带着令牌(sTokenBackendValidate)跳转到最初的请求地址（系统 1） 302 跳转</p></li><li><p>系统 1 拿到令牌，掉取后端服务，后端服务， 去 sso 认证中心校验令牌是否有效（置换 SToken）</p></li><li><p>sso 认证中心校验令牌，返回有效，注册系统 1，并给当前域名下写入 stoken</p></li><li><p><code>系统1使用该令牌创建与用户的会话，称为局部会话(seesion)，返回受保护资源</code></p></li><li><p>重新获取用户信息携带 token，返回用户信息</p></li><li><p>用户访问系统 2 的受保护资源</p></li><li><p>系统 2 发现用户未登录，跳转至 sso 认证中心，并将自己的<code>地址</code>和之前和<code>sso认证中心的会话cookie信</code>息作为参数</p></li><li><p>sso 认证中心发现用户已登录，跳转回系统 2 的地址，并附上令牌</p></li><li><p>系统 2 拿到令牌，去 sso 认证中心校验令牌是否有效，并给当前系统二域名下写入 stoken</p></li><li><p>系统 2 使用该令牌创建与用户的局部会话，返回受保护资源</p></li></ol><blockquote><p>用户登录成功之后，会与 sso 认证中心及访问的子系统建立会话，用户与 sso 认证中心建立的会话称为全局会话，用户与各个子系统建立的会话称为局部会话，局部会话建立之后，用户访问子系统受保护资源将不再通过 sso 认证中心，全局会话与局部会话有如下约束关系</p></blockquote><h3 id="2-注销"><a href="#2-注销" class="headerlink" title="2. 注销"></a>2. 注销</h3><ol><li><p>用户向系统 1 发起注销请求</p></li><li><p>系统 1 根据用户与系统 1 建立的会话 id 拿到令牌，向 sso 认证中心发起注销请求</p></li><li><p>sso 认证中心校验令牌有效，销毁全局会话，同时取出所有用此令牌注册的系统地址</p></li><li><p>sso 认证中心向所有注册系统发起注销请求</p></li><li><p>各注册系统接收 sso 认证中心的注销请求，销毁局部会话</p></li><li><p>sso 认证中心引导用户至登录页面</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express</title>
      <link href="/2024/10/08/express/"/>
      <url>/2024/10/08/express/</url>
      
        <content type="html"><![CDATA[<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">"express"</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"middlware 1"</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"middlware 2"</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"middlware 3"</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// console.log(1, req.a)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"222=>"</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="核心实现"><a href="#核心实现" class="headerlink" title="核心实现"></a>核心实现</h3><h4 id="application-js"><a href="#application-js" class="headerlink" title="application.js"></a>application.js</h4><blockquote><p>application.js 是框架的主入口，负责启动 HTTP 服务器并处理请求。</p></blockquote><ul><li><p><strong>懒加载路由系统</strong>：<code>lazy_route</code> 方法确保在需要时才加载路由系统。</p></li><li><p><strong>use 方法</strong>：用于注册全局中间件。</p></li><li><p><strong>listen 方法</strong>：创建 HTTP 服务器，通过调用 <code>this.router.handle</code> 处理每个请求。如果没有匹配的路由，则调用 <code>done</code> 方法结束请求，返回错误信息。</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">"http"</span><span class="token keyword">import</span> methods <span class="token keyword">from</span> <span class="token string">"methods"</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"./router/index.js"</span><span class="token keyword">function</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Application</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">lazy_route</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 将路由系统进行了懒加载处理（一般都是要加载的）</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Application</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">use</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lazy_route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token comment">//  交给路由系统来处理</span><span class="token punctuation">&#125;</span><span class="token class-name">Application</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果路由系统中的层不存在则调用此方法来结束响应</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Cannot </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 交给路由系统来做匹配，如果匹配不到就调用done</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> done<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>methods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Application</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> <span class="token operator">...</span>handlers</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 让路由系统处理逻辑</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lazy_route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> Application<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Router-js"><a href="#Router-js" class="headerlink" title="Router.js"></a>Router.js</h4><blockquote><p>router.js 是路由系统的核心，管理路由栈（stack）并实现路由匹配逻辑。</p></blockquote><ul><li><strong>路由注册</strong>：为每个 HTTP 方法创建相应的路由，使用 <code>Layer</code> 类管理路径，并通过 <code>dispatch</code> 方法执行相应的路由处理函数。</li><li><strong>中间件注册</strong>：<code>use</code> 方法用于注册全局或特定路径的中间件。</li><li><strong>请求处理</strong>：<code>handle</code> 方法用于匹配请求路径和方法，逐层执行中间件和路由处理函数。如果存在错误，则调用错误处理中间件。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> url <span class="token keyword">from</span> <span class="token string">"url"</span><span class="token keyword">import</span> methods <span class="token keyword">from</span> <span class="token string">"methods"</span><span class="token keyword">import</span> Layer <span class="token keyword">from</span> <span class="token string">"./Layer.js"</span><span class="token keyword">import</span> Route <span class="token keyword">from</span> <span class="token string">"./route.js"</span><span class="token keyword">function</span> <span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>methods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> handlers</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 调用类来管理路径</span>    <span class="token keyword">let</span> route <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    handlers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      route<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> layer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Layer</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> route<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 每个路由的层都有一个route属性，对应存放自己的真实路基的</span>    layer<span class="token punctuation">.</span>route <span class="token operator">=</span> route    <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>layer<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">use</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> <span class="token operator">...</span>handlers</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> path <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    handlers <span class="token operator">=</span> <span class="token punctuation">[</span>path<span class="token punctuation">,</span> <span class="token operator">...</span>handlers<span class="token punctuation">]</span> <span class="token comment">// path就是处理函数</span>    path <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token comment">// 如果没写路径就是 / 匹配所有的路径</span>  <span class="token punctuation">&#125;</span>  handlers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> layer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Layer</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>    layer<span class="token punctuation">.</span>route <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">// 中间件没有路由这个对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>layer<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">handle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> out</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> pathname<span class="token punctuation">,</span> query <span class="token punctuation">&#125;</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length <span class="token operator">==</span> idx<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> layer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token comment">// 拿出第一个层</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>layer<span class="token punctuation">.</span>route<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 有错误找中间件，而且 要找参数是4个的中间件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layer<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          layer<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// 普通中间件继续带着错误向下走</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 有错误但是是路由，要带着 错误继续往下走</span>        <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 因为错误处理中间件定义在了 router.stack中 ,如果有err就去这个stack中查找错误处理中间件</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>layer<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layer<span class="token punctuation">.</span>route<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 路由</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>layer<span class="token punctuation">.</span>route<span class="token punctuation">.</span>methods<span class="token punctuation">[</span>req<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 需要匹配方法</span>            layer<span class="token punctuation">.</span><span class="token function">handle_request</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token comment">//  route.dispatch</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 方法不一致直接向下走</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 中间件无需匹配方法, 没有错误不能执行错误处理中间件</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>layer<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            layer<span class="token punctuation">.</span><span class="token function">handle_request</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token comment">//  route.dispatch</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 默认在路由中筛查</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Layer-js"><a href="#Layer-js" class="headerlink" title="Layer.js"></a>Layer.js</h4><blockquote><p>layer.js 定义了路由和中间件的抽象层。每个路由或中间件对应一个 Layer 实例。</p></blockquote><ul><li><p><strong>匹配路径</strong>：<code>match</code> 方法用于检查当前 <code>Layer</code> 是否匹配请求路径。</p></li><li><p><strong>请求处理</strong>：<code>handle_request</code> 方法调用具体的处理函数。</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 路由中对应的层</span><span class="token keyword">function</span> <span class="token function">Layer</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> path  <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">&#125;</span><span class="token class-name">Layer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">match</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">===</span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>route<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 中间件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 中间件是/都能匹配</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token class-name">Layer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">handle_request</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Layer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Route-js"><a href="#Route-js" class="headerlink" title="Route.js"></a>Route.js</h4><blockquote><p>route.js 负责管理每个特定路由的处理函数，并调度（dispatch）处理。</p></blockquote><ul><li><p><strong>方法注册</strong>：为每个路由绑定特定 HTTP 方法（如 <code>get</code>、<code>post</code>），并将处理函数存储在 <code>stack</code> 中。</p></li><li><p><strong>调度处理</strong>：<code>dispatch</code> 方法根据请求方法依次执行对应的处理函数。</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> methods <span class="token keyword">from</span> <span class="token string">"methods"</span><span class="token keyword">import</span> Layer <span class="token keyword">from</span> <span class="token string">"./Layer.js"</span><span class="token keyword">function</span> <span class="token function">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>methods <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 用来描述这个route中有什么方法</span><span class="token punctuation">&#125;</span>methods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Route</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> layer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Layer</span><span class="token punctuation">(</span><span class="token string">"里层的用户的逻辑不需要这个path"</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>    layer<span class="token punctuation">.</span>method <span class="token operator">=</span> method    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// &#123;get:true&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>layer<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token class-name">Route</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> out</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">const</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">out</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> layer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> layer<span class="token punctuation">.</span>method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 用户绑定的方法</span>      layer<span class="token punctuation">.</span><span class="token function">handle_request</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Route<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jwt</title>
      <link href="/2024/10/08/jwt/"/>
      <url>/2024/10/08/jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JWT"><a href="#1-JWT" class="headerlink" title="1.JWT"></a>1.JWT</h2><ul><li>JWT(json web token)是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准。</li><li>JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。</li><li>因为数字签名的存在，这些信息是可信的，JWT 可以使用 HMAC 算法或者是 RSA 的公私秘钥对进行签名</li></ul><h2 id="2-主要应用场景"><a href="#2-主要应用场景" class="headerlink" title="2.主要应用场景"></a>2.主要应用场景</h2><ul><li>身份认证在这种场景下，一旦用户完成了登陆，在接下来的每个请求中包含 JWT，可以用来验证用户身份以及对路由，服务和资源的访问权限进行验证。</li><li>信息交换在通信的双方之间使用 JWT 对数据进行编码是一种非常安全的方式，由于它的信息是经过签名的，可以确保发送者发送的信息是没有经过伪造的</li></ul><h2 id="3-JWT-的结构"><a href="#3-JWT-的结构" class="headerlink" title="3.JWT 的结构"></a>3.JWT 的结构</h2><p>JWT 包含了使用<code>.</code>分隔的三部分</p><ul><li>Header 头部</li><li>Payload 负载</li><li>Signature 签名</li></ul><h3 id="3-1-Header"><a href="#3-1-Header" class="headerlink" title="3.1 Header"></a>3.1 Header</h3><p>在 header 中通常包含了两部分：token 类型和采用的加密算法。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span> <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来对这部分内容使用<code>Base64Url</code>编码组成了<code>JWT</code>结构的第一部分。</p><h3 id="3-2-Payload"><a href="#3-2-Payload" class="headerlink" title="3.2 Payload"></a>3.2 Payload</h3><p>负载就是存放有效信息的地方。这个名字像是指货车上承载的货物，这些有效信息包含三个部分</p><ul><li>标准中注册的声明</li><li>公共的声明</li><li>私有的声明</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span> <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述的负载需要经过<code>Base64Url</code>编码后作为 JWT 结构的第二部分</p><h3 id="3-3-Signature"><a href="#3-3-Signature" class="headerlink" title="3.3 Signature"></a>3.3 Signature</h3><ul><li><p>创建签名需要使用编码后的 header 和 payload 以及一个秘钥</p></li><li><p>使用 header 中指定签名算法进行签名</p></li><li><p>例如如果希望使用 HMAC SHA256 算法，那么签名应该使用下列方式创建</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">HMACSHA256</span><span class="token punctuation">(</span><span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>签名用于验证消息的发送者以及消息是没有经过篡改的</p></li><li><p>完整的 JWT 完整的 JWT 格式的输出是以. 分隔的三段 Base64 编码</p></li><li><p>密钥 secret 是保存在服务端的，服务端会根据这个密钥进行生成 token 和验证，所以需要保护好。</p></li></ul><h2 id="4-如何使用-JWT"><a href="#4-如何使用-JWT" class="headerlink" title="4.如何使用 JWT"></a>4.如何使用 JWT</h2><ol><li><p>当用户使用它的认证信息登陆系统之后，会返回给用户一个 JWT</p></li><li><p>用户只需要本地保存该 token（通常使用 local storage，也可以使用 cookie）即可</p></li><li><p>当用户希望访问一个受保护的路由或者资源的时候，通常应该在 Authorization 头部使用 Bearer 模式添加 JWT，其内容看起来是下面这样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">Authorization</span><span class="token operator">:</span> Bearer <span class="token operator">&lt;</span>token<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>因为用户的状态在服务端的内存中是不存储的，所以这是一种无状态的认证机制</p></li><li><p>服务端的保护路由将会检查请求头 Authorization 中的 JWT 信息，如果合法，则允许用户的行为。</p></li><li><p>由于 JWT 是自包含的，因此减少了需要查询数据库的需要</p></li><li><p>JWT 的这些特性使得我们可以完全依赖其无状态的特性提供数据 API 服务，甚至是创建一个下载流服务。</p></li><li><p>因为 JWT 并不使用 Cookie 的，所以你可以使用任何域名提供你的 API 服务而不需要担心跨域资源共享问题（CORS）</p></li></ol><p><img src="https://raw.githubusercontent.com/ghx9908/image-hosting/master/img202410081139879.png"></p><h2 id="5-JWT-实战"><a href="#5-JWT-实战" class="headerlink" title="5. JWT 实战"></a>5. JWT 实战</h2><h3 id="5-1-server-js"><a href="#5-1-server-js" class="headerlink" title="5.1 server.js"></a>5.1 server.js</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-bodyparser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./jwt-simple'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">'jwt-secret'</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    &lt;form action="/login" method="post">      &lt;input type="text" name="username" />      &lt;input type="submit" value="提交" />    &lt;/form>  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> expirationTime <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token comment">// 过期时间为1天（单位为秒）</span><span class="token keyword">const</span> expirationDate <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> expirationTime<span class="token punctuation">;</span> <span class="token comment">// 计算过期时间戳</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> username <span class="token punctuation">&#125;</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span>  <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> username<span class="token punctuation">,</span><span class="token literal-property property">exp</span><span class="token operator">:</span> expirationDate <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span> token <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> authorizationHeader <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>authorization<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>authorizationHeader <span class="token operator">&amp;&amp;</span> authorizationHeader<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'Bearer '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> authorizationHeader<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> decoded <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> decoded<span class="token punctuation">.</span>username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'Invalid token'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">401</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'Missing token'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at http://localhost:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>curl <span class="token operator">-</span><span class="token constant">H</span> <span class="token string">"Authorization: Bearer token"</span> <span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3000</span><span class="token operator">/</span>user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-jwt-simple-js"><a href="#5-2-jwt-simple-js" class="headerlink" title="5.2 jwt-simple.js"></a>5.2 jwt-simple.js</h3><p>jwt-simple.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"crypto"</span><span class="token punctuation">)</span><span class="token comment">/** * 编码JWT令牌 * @param &#123;Object&#125; payload 负载数据 * @param &#123;string&#125; key 密钥 * @returns &#123;string&#125; 编码后的JWT令牌 */</span><span class="token keyword">function</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token parameter">payload<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> header <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">,</span> <span class="token literal-property property">alg</span><span class="token operator">:</span> <span class="token string">"sha256"</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 声明类型和算法</span>  <span class="token keyword">var</span> segments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 声明一个数组</span>  segments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">base64urlEncode</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 对header进行base64编码</span>  segments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">base64urlEncode</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 对负载进行base64编码</span>  segments<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">sign</span><span class="token punctuation">(</span>segments<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 加入签名</span>  <span class="token keyword">return</span> segments<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 生成签名 * @param &#123;string&#125; input 输入数据 * @param &#123;string&#125; key 密钥 * @returns &#123;string&#125; 签名 */</span><span class="token keyword">function</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token parameter">input<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> crypto<span class="token punctuation">.</span><span class="token function">createHmac</span><span class="token punctuation">(</span><span class="token string">"sha256"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">"base64"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 解码JWT令牌 * @param &#123;string&#125; token JWT令牌 * @param &#123;string&#125; key 密钥 * @returns &#123;Object&#125; 解码后的负载数据 * @throws &#123;Error&#125; 如果验证失败或令牌过期，则抛出错误 */</span><span class="token keyword">function</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token parameter">token<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> segments <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> headerSeg <span class="token operator">=</span> segments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">var</span> payloadSeg <span class="token operator">=</span> segments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token keyword">var</span> signatureSeg <span class="token operator">=</span> segments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token keyword">var</span> payload <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">base64urlDecode</span><span class="token punctuation">(</span>payloadSeg<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>signatureSeg <span class="token operator">!=</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">[</span>headerSeg<span class="token punctuation">,</span> payloadSeg<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"verify failed"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>exp <span class="token operator">&amp;&amp;</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> payload<span class="token punctuation">.</span>exp <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Token expired"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> payload<span class="token punctuation">&#125;</span><span class="token comment">/** * Base64 URL编码 * @param &#123;string&#125; str 输入字符串 * @returns &#123;string&#125; 编码后的字符串 */</span><span class="token keyword">function</span> <span class="token function">base64urlEncode</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"base64"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Base64 URL解码 * @param &#123;string&#125; str 编码的字符串 * @returns &#123;string&#125; 解码后的字符串 */</span><span class="token keyword">function</span> <span class="token function">base64urlDecode</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"base64"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  encode<span class="token punctuation">,</span>  decode<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie和session原理</title>
      <link href="/2024/09/27/cookie-he-session-yuan-li/"/>
      <url>/2024/09/27/cookie-he-session-yuan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="Cookie-与-Session-的区别与理解"><a href="#Cookie-与-Session-的区别与理解" class="headerlink" title="Cookie 与 Session 的区别与理解"></a><strong>Cookie 与 Session 的区别与理解</strong></h3><h4 id="1-Cookie："><a href="#1-Cookie：" class="headerlink" title="1. Cookie："></a><strong>1. Cookie：</strong></h4><p><strong>Cookie</strong> 是存储在客户端（浏览器）上的小数据文件，用来保持用户的状态和信息。它由服务器生成，并通过 HTTP 响应头发送到客户端，客户端每次请求都会将该 Cookie 发送给服务器。</p><ul><li><strong>用途</strong>：主要用于识别用户、保存登录状态、记录用户偏好、跟踪用户行为等。</li><li><strong>存储位置</strong>：保存在用户的浏览器中。</li><li><strong>大小限制</strong>：每个 Cookie 的大小一般不超过 4KB。</li><li><strong>生命周期</strong>：可以设置 <code>expires</code> 或 <code>max-age</code> 来定义 Cookie 的有效期。短期的 Cookie 可能会在关闭浏览器时删除，长期的 Cookie 则会存储在客户端直到过期或被手动删除。</li><li><strong>安全性</strong>：由于保存在客户端，安全性较低，容易被篡改或拦截，因此敏感信息不应该直接存储在 Cookie 中。可以通过设置 <code>HttpOnly</code> 和 <code>Secure</code> 属性增强安全性。</li><li><strong>跨域问题</strong>：浏览器同源策略限制了 Cookie 的跨域使用，一般只有相同域名的服务器才能读取该域名下的 Cookie。</li></ul><h4 id="2-Session："><a href="#2-Session：" class="headerlink" title="2. Session："></a><strong>2. Session：</strong></h4><p><strong>Session</strong> 是存储在服务器端的用户会话数据，用于在多个请求中保持用户的状态。与 Cookie 配合使用，通常会将一个唯一的 Session ID 存储在 Cookie 中，服务器通过该 ID 识别客户端的 Session 数据。</p><ul><li><strong>用途</strong>：用于存储用户的登录信息、购物车状态等需要保留在服务器上的数据。</li><li><strong>存储位置</strong>：保存在服务器端，每个用户的 Session 都有一个独立的 ID。</li><li><strong>大小限制</strong>：Session 的大小没有严格限制，具体取决于服务器的存储能力。</li><li><strong>生命周期</strong>：Session 一般是短期的，当用户关闭浏览器或会话超时，Session 会自动失效。服务端也可以通过配置来设置 Session 的过期时间。</li><li><strong>安全性</strong>：由于数据保存在服务器端，安全性比 Cookie 更高，但如果 Session ID 泄露，也可能导致安全问题。</li><li><strong>跨域问题</strong>：Session 通常不涉及跨域问题，Session 数据保存在服务器端，客户端通过同一域下的 Cookie 中的 Session ID 来保持会话。</li></ul><h4 id="Cookie-与-Session-的对比："><a href="#Cookie-与-Session-的对比：" class="headerlink" title="Cookie 与 Session 的对比："></a><strong>Cookie 与 Session 的对比</strong>：</h4><table><thead><tr><th>特性</th><th>Cookie</th><th>Session</th></tr></thead><tbody><tr><td>存储位置</td><td>客户端浏览器</td><td>服务器端</td></tr><tr><td>数据大小</td><td>一般不超过 4KB</td><td>没有严格限制，依赖服务器存储</td></tr><tr><td>生命周期</td><td>可以手动设置，长期或短期</td><td>一般在关闭浏览器或超时后失效</td></tr><tr><td>安全性</td><td>较低，容易被篡改</td><td>较高，数据存储在服务器端</td></tr><tr><td>性能影响</td><td>占用客户端存储空间，影响较小</td><td>占用服务器资源，用户量大时需优化</td></tr><tr><td>跨域访问</td><td>受限于浏览器同源策略</td><td>与 Cookie 配合使用，不直接受限</td></tr></tbody></table><h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a><strong>应用场景</strong>：</h4><ul><li><strong>Cookie</strong> 更适合保存一些不太敏感的用户偏好、网站设置、非敏感的标识符等信息。</li><li><strong>Session</strong> 更适合保存用户登录状态、购物车信息等需要较高安全性的内容。</li></ul><h4 id="Cookie-与-Session-的结合："><a href="#Cookie-与-Session-的结合：" class="headerlink" title="Cookie 与 Session 的结合："></a><strong>Cookie 与 Session 的结合</strong>：</h4><p>通常会使用 <strong>Session + Cookie</strong> 的方式来实现登录等功能。服务器创建 Session 并将 Session ID 存放在客户端的 Cookie 中，客户端每次请求时都会携带该 Cookie，服务器通过 Session ID 识别用户身份。</p><h3 id="cookie-签名-核心代码"><a href="#cookie-签名-核心代码" class="headerlink" title="cookie 签名 核心代码"></a>cookie 签名 核心代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Cookies</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Cookies</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cookies</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>secure <span class="token operator">=</span> <span class="token keyword">undefined</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> request  <span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> response  <span class="token comment">// 创建Keygrip实例</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// array of key strings</span>      <span class="token function">deprecate</span><span class="token punctuation">(</span><span class="token string">'"keys" argument; provide using options &#123;"keys": [...]&#125;'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keygrip</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>constructor <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">"Keygrip"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// any keygrip constructor to allow different versions</span>      <span class="token function">deprecate</span><span class="token punctuation">(</span><span class="token string">'"keys" argument; provide using options &#123;"keys": keygrip&#125;'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>keys <span class="token operator">=</span> options    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>keys <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Keygrip</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token operator">:</span> options<span class="token punctuation">.</span>keys      <span class="token keyword">this</span><span class="token punctuation">.</span>secure <span class="token operator">=</span> options<span class="token punctuation">.</span>secure    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Cookies</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">set</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> opts</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">,</span>    req <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">,</span>    headers <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">,</span>    signed <span class="token operator">=</span> opts <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>signed <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> opts<span class="token punctuation">.</span>signed <span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>keys  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> headers <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> headers <span class="token operator">=</span> <span class="token punctuation">[</span>headers<span class="token punctuation">]</span>  <span class="token function">pushCookie</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> cookie<span class="token punctuation">)</span> <span class="token comment">// 保存当前 cookie</span>  <span class="token comment">//签名</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts <span class="token operator">&amp;&amp;</span> signed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">".keys required for signed cookies"</span><span class="token punctuation">)</span>    cookie<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 钓鱼 sign 方法签名</span>    cookie<span class="token punctuation">.</span>name <span class="token operator">+=</span> <span class="token string">".sig"</span>    <span class="token function">pushCookie</span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> cookie<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> setHeader <span class="token operator">=</span> res<span class="token punctuation">.</span>set <span class="token operator">?</span> http<span class="token punctuation">.</span><span class="token class-name">OutgoingMessage</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>setHeader <span class="token operator">:</span> res<span class="token punctuation">.</span>setHeader  <span class="token function">setHeader</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getPattern</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(?:^|;) *"</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-[\]&#123;&#125;()*+?.,\\^$|#\s]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"\\$&amp;"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=([^;]*)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Cookies</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> opts</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> sigName <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">".sig"</span><span class="token punctuation">,</span>    header<span class="token punctuation">,</span>    match<span class="token punctuation">,</span>    value<span class="token punctuation">,</span>    remote<span class="token punctuation">,</span>    data<span class="token punctuation">,</span>    index<span class="token punctuation">,</span>    signed <span class="token operator">=</span> opts <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>signed <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> opts<span class="token punctuation">.</span>signed <span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>keys  header <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"cookie"</span><span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>header<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token comment">//匹配对应的value</span>  match <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token function">getPattern</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token keyword">return</span>  value <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment">// 判断是否需要签名</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>opts <span class="token operator">||</span> <span class="token operator">!</span>signed<span class="token punctuation">)</span> <span class="token keyword">return</span> value  <span class="token comment">//获取签名后的 cookie</span>  remote <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sigName<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>remote<span class="token punctuation">)</span> <span class="token keyword">return</span>  data <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">".keys required for signed cookies"</span><span class="token punctuation">)</span>  <span class="token comment">// 对数据进行再次签名比较 返回索引</span>  index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> remote<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 签名不匹配的话就把签名coolie 置为 null</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sigName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token literal-property property">signed</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 成功的话再次签名</span>    index <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sigName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keys<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">signed</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> value  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Cookie</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token class-name">Cookie</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toHeader</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> header <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxAge<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expires <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxAge<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span> header <span class="token operator">+=</span> <span class="token string">"; path="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>path  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expires<span class="token punctuation">)</span> header <span class="token operator">+=</span> <span class="token string">"; expires="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expires<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>domain<span class="token punctuation">)</span> header <span class="token operator">+=</span> <span class="token string">"; domain="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>domain  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sameSite<span class="token punctuation">)</span> header <span class="token operator">+=</span> <span class="token string">"; samesite="</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sameSite <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token string">"strict"</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sameSite<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>secure<span class="token punctuation">)</span> header <span class="token operator">+=</span> <span class="token string">"; secure"</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>httpOnly<span class="token punctuation">)</span> header <span class="token operator">+=</span> <span class="token string">"; httponly"</span>  <span class="token keyword">return</span> header<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">pushCookie</span><span class="token punctuation">(</span><span class="token parameter">headers<span class="token punctuation">,</span> cookie</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie<span class="token punctuation">.</span>overwrite<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> headers<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>headers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"="</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        headers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  headers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">toHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Keygrip"><a href="#Keygrip" class="headerlink" title="Keygrip"></a>Keygrip</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*! * keygrip * Copyright(c) 2011-2014 Jed Schmidt * MIT Licensed */</span><span class="token string">"use strict"</span><span class="token comment">// 引入用于安全字符串比较的tsscmp库</span><span class="token keyword">var</span> compare <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"tsscmp"</span><span class="token punctuation">)</span><span class="token comment">// 引入Node.js的crypto模块，用于加密操作</span><span class="token keyword">var</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"crypto"</span><span class="token punctuation">)</span><span class="token comment">// Keygrip类用于创建基于HMAC的签名和验证工具</span><span class="token comment">// keys是用于签名的密钥数组，algorithm是加密算法，encoding是编码方式</span><span class="token keyword">function</span> <span class="token function">Keygrip</span><span class="token punctuation">(</span><span class="token parameter">keys<span class="token punctuation">,</span> algorithm<span class="token punctuation">,</span> encoding</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 如果没有指定算法，则默认为"sha1"</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>algorithm<span class="token punctuation">)</span> algorithm <span class="token operator">=</span> <span class="token string">"sha1"</span>  <span class="token comment">// 如果没有指定编码方式，则默认为"base64"</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>encoding<span class="token punctuation">)</span> encoding <span class="token operator">=</span> <span class="token string">"base64"</span>  <span class="token comment">// 如果调用时没有使用new关键字，自动返回新实例</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Keygrip</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Keygrip</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> algorithm<span class="token punctuation">,</span> encoding<span class="token punctuation">)</span>  <span class="token comment">// 确保传入的keys数组不为空，并且有至少一个密钥</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keys <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">in</span> keys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Keys must be provided."</span><span class="token punctuation">)</span> <span class="token comment">// 如果未提供keys则抛出错误</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 内部的sign函数，用于对数据进行HMAC签名</span>  <span class="token comment">// data是要签名的数据，key是用于签名的密钥</span>  <span class="token keyword">function</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> crypto      <span class="token punctuation">.</span><span class="token function">createHmac</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token comment">// 使用指定的算法和密钥创建HMAC对象</span>      <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// 用数据更新HMAC对象</span>      <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span> <span class="token comment">// 生成HMAC的摘要，按指定编码返回</span>      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/|\+|=</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将生成的签名中的特殊字符进行替换</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"/"</span><span class="token operator">:</span> <span class="token string">"_"</span><span class="token punctuation">,</span> <span class="token string-property property">"+"</span><span class="token operator">:</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string-property property">"="</span><span class="token operator">:</span> <span class="token string">""</span> <span class="token punctuation">&#125;</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token comment">// "/"替换为"_"，"+"替换为"-"，"="去掉</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 对外暴露的签名方法，默认使用keys数组的第一个密钥</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sign</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">sign</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 使用第一个密钥对数据签名</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// verify方法，用于验证数据和其签名是否匹配</span>  <span class="token comment">// data是原始数据，digest是待验证的签名</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">verify</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> digest</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> digest<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">// 如果数据的签名匹配keys数组中的任一密钥，则返回true</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// index方法，用于查找匹配的数据签名的密钥索引</span>  <span class="token comment">// 返回匹配密钥的索引，若找不到则返回-1</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">index</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> digest</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历所有keys，用每一个key进行签名，然后和传入的digest进行比较</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 使用tsscmp库进行安全比较，防止时间攻击</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>digest<span class="token punctuation">,</span> <span class="token function">sign</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> i <span class="token comment">// 如果找到匹配的签名，返回该密钥的索引</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果没有找到匹配的密钥，返回-1</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 防止用户直接调用Keygrip的类方法（sign、verify、index），提示正确用法</span>Keygrip<span class="token punctuation">.</span>sign <span class="token operator">=</span>  Keygrip<span class="token punctuation">.</span>verify <span class="token operator">=</span>  Keygrip<span class="token punctuation">.</span><span class="token function-variable function">index</span> <span class="token operator">=</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Usage: require('keygrip')(&lt;array-of-keys>)"</span><span class="token punctuation">)</span> <span class="token comment">// 抛出错误，提示正确用法</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 导出Keygrip模块，供其他模块使用</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Keygrip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Cookie-签名的核心过程总结"><a href="#Cookie-签名的核心过程总结" class="headerlink" title="Cookie 签名的核心过程总结"></a>Cookie 签名的核心过程总结</h4><ol><li><strong>初始化<code>Keygrip</code>实例</strong>：<ul><li><code>Cookies</code>类在初始化时，会根据传入的<code>options</code>创建一个<code>Keygrip</code>实例，用于对 cookie 进行签名和验证。如果<code>options</code>中包含<code>keys</code>数组，则使用该数组初始化<code>Keygrip</code>；如果<code>options</code>已经是<code>Keygrip</code>实例，直接使用该实例。</li></ul></li><li>**设置 Cookie 时的签名流程 (<code>set</code>方法)**：<ul><li>当通过<code>set</code>方法设置 Cookie 时，先将 Cookie 添加到<code>Set-Cookie</code>响应头中。</li><li>如果<code>signed</code>选项被启用，系统会对 Cookie 的值进行签名。签名过程通过调用<code>Keygrip</code>实例的<code>sign</code>方法实现，将生成的签名添加到新的 Cookie 项中（名称为<code>cookieName.sig</code>）。</li><li>签名的原理是使用 HMAC 加密算法（默认是<code>SHA1</code>）对 Cookie 数据进行加密处理，生成签名。此签名确保 Cookie 值没有被篡改。</li></ul></li><li>**获取 Cookie 时的签名验证 (<code>get</code>方法)**：<ul><li>通过<code>get</code>方法获取 Cookie 时，首先匹配请求头中的<code>cookie</code>字段，查找特定 Cookie 的值。</li><li>如果该 Cookie 是签名的，系统会查找对应的签名 Cookie（名称为<code>cookieName.sig</code>），并使用<code>Keygrip</code>实例的<code>index</code>方法验证该签名是否合法。</li><li>验证时，会重新对 Cookie 的数据进行签名，并与客户端传回的签名进行比较。若匹配成功，则表示该 Cookie 没有被篡改，返回 Cookie 值；否则将签名的 Cookie 值置为<code>null</code>。</li></ul></li><li>**签名与验证的具体实现 (<code>Keygrip</code> 类)**：<ul><li><code>Keygrip</code>使用 HMAC 算法对数据进行加密，并通过<code>compare</code>库来进行安全比较，防止时间攻击。</li><li><code>sign</code>方法用于对数据进行签名，并将生成的摘要进行编码处理。</li><li><code>verify</code>方法用于验证签名，通过遍历密钥数组对数据进行签名，检查是否有匹配的密钥。</li><li><code>index</code>方法用于返回匹配的密钥索引，若找到匹配的签名则返回密钥的位置，否则返回<code>-1</code>。</li></ul></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>整个过程的核心是通过 HMAC 签名和验证机制保证 Cookie 的完整性和安全性。在设置 Cookie 时会生成一个基于密钥的签名，并将其附加到 Cookie 响应中。在客户端返回 Cookie 时，通过验证签名，确保 Cookie 的值未被篡改。如果签名不匹配，系统会自动删除该签名的 Cookie</p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa底层实现</title>
      <link href="/2024/09/26/koa-di-ceng-shi-xian/"/>
      <url>/2024/09/26/koa-di-ceng-shi-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Koa"><a href="#1-Koa" class="headerlink" title="1.Koa"></a>1.Koa</h2><ul><li><a href="https://koajs.com/">Koa</a>是一个由 Express 原班人马打造的，尝试在 Web 应用开发中摆脱回调地狱，并增强错误处理的轻量化的 Node.js 框架。</li><li><a href="https://koa.bootcss.com/">Koa</a>的目标是成为一个更小、更富表现力、更健壮的 Web 框架。</li></ul><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p>Koa 需要 Node v12 或更高版本以支持 ES2015 和异步函数。 您可以使用您喜欢的版本管理器快速安装一个支持的 Node 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvm <span class="token function">install</span> <span class="token number">12</span><span class="token function">npm</span> <span class="token function">install</span> koa<span class="token function">node</span> my-koa-app.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="3.基本使用"></a>3.基本使用</h2><p>Koa 应用是一个包含中间件函数数组的对象，这些函数在请求时以类似堆栈的方式组合并执行</p><p>在 Koa 框架中，<code>ctx</code> 是上下文对象，它封装了原生的 Node.js 请求和响应对象，并且提供了许多方便的方法和属性来处理 HTTP 请求和响应</p><p><code>ctx.req</code> 和 <code>ctx.res</code> 是 Node.js 的原生请求和响应对象。这些对象提供了低级别的请求和响应处理方法</p><p><code>ctx.res.end(&#39;ok&#39;)</code> 是直接调用 Node.js 原生响应对象的 <code>end</code> 方法来结束响应并发送字符串 <code>ok</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Koa <span class="token keyword">from</span> <span class="token string">"koa"</span><span class="token comment">// 创建一个Koa应用实例</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 处理请求，返回'hello'</span>  ctx<span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 监听3000端口，并在控制台打印服务器运行信息</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"server is running at http://localhost:3000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-request-amp-response"><a href="#4-request-amp-response" class="headerlink" title="4.request&amp;response"></a>4.request&amp;response</h2><p>在 Koa 中，<code>ctx.request</code> 和 <code>ctx.response</code> 是封装了 Node.js 原生请求和响应对象（<code>ctx.req</code> 和 <code>ctx.res</code>）的对象。相比于 Node.js 的原生请求和响应对象，<code>ctx.request</code> 和 <code>ctx.response</code> 提供了更多的方法和属性，使得处理 HTTP 请求和响应更加方便和简单。</p><ul><li><p><code>ctx.request</code>:</p><ul><li><code>ctx.request.query</code>: 一个包含解析过的查询字符串的对象</li><li><code>ctx.request.method</code>: 请求方法，例如 ‘GET’, ‘POST’ 等</li><li><code>ctx.request.url</code>: 请求的 URL</li><li><code>ctx.request.header</code>: 请求头对象</li><li><code>ctx.request.body</code>: 请求体（需要额外的中间件如 koa-bodyparser 来解析请求体）</li></ul></li><li><p><code>ctx.response</code> :</p><ul><li><code>ctx.response.body</code>: 可以设置响应体的内容，它可以是一个字符串、对象或者流</li><li><code>ctx.response.status</code>: 可以设置响应的 HTTP 状态码</li><li><code>ctx.response.message</code>: HTTP 状态消息</li><li><code>ctx.response.header</code>: 响应头对象</li></ul></li></ul><p><strong>1.server</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Koa <span class="token keyword">from</span> <span class="token string">"koa"</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 打印请求方法</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>method<span class="token punctuation">)</span>  <span class="token comment">// 打印请求URL</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token comment">// 打印请求路径</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>path<span class="token punctuation">)</span>  <span class="token comment">// 打印查询字符串参数</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>query<span class="token punctuation">)</span>  <span class="token comment">// 打印请求头</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>header<span class="token punctuation">)</span>  <span class="token comment">// 设置响应状态码</span>  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">200</span>  <span class="token comment">// 设置响应消息</span>  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">"OK"</span>  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span>  <span class="token comment">// 设置响应体</span>  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"hello"</span>  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"world"</span>  ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"third"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"app runing http://localhost:3000"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.server.js</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa"</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 打印请求方法</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>method<span class="token punctuation">)</span>  <span class="token comment">// 打印请求URL</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>url<span class="token punctuation">)</span>  <span class="token comment">// 打印请求路径</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path<span class="token punctuation">)</span>  <span class="token comment">// 打印查询字符串参数</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">)</span>  <span class="token comment">// 打印请求头</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>header<span class="token punctuation">)</span>  <span class="token comment">// 设置响应状态码</span>  ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">200</span>  <span class="token comment">// 设置响应消息</span>  ctx<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">"OK"</span>  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span>  <span class="token comment">// 设置响应体</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"hello"</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"world"</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"third"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"app runing http://localhost:3001"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-中间件级联"><a href="#5-中间件级联" class="headerlink" title="5.中间件级联"></a>5.中间件级联</h2><h3 id="5-1-同步中间件"><a href="#5-1-同步中间件" class="headerlink" title="5.1 同步中间件"></a>5.1 同步中间件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa"</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">middleware1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">middleware2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">middleware3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middleware1<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middleware2<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middleware3<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"server is running at http://localhost:3000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-异步中间件"><a href="#5-2-异步中间件" class="headerlink" title="5.2 异步中间件"></a>5.2 异步中间件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa"</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">middleware1</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"cost"</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"cost"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">middleware2</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"middleware2 sleep 1s"</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">middleware3</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"middleware3 sleep 1s"</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"hello"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middleware1<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middleware2<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middleware3<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"server is running at http://localhost:3000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-核心实现"><a href="#6-核心实现" class="headerlink" title="6. 核心实现"></a>6. 核心实现</h2><h3 id="6-1application"><a href="#6-1application" class="headerlink" title="6.1application"></a>6.1application</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> EventEmitter <span class="token keyword">from</span> <span class="token string">"events"</span><span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">"http"</span><span class="token keyword">import</span> context <span class="token keyword">from</span> <span class="token string">"./context.js"</span><span class="token comment">// 导入自定义的request模块</span><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">"./request.js"</span><span class="token comment">// 导入自定义的response模块</span><span class="token keyword">import</span> response <span class="token keyword">from</span> <span class="token string">"./response.js"</span><span class="token keyword">import</span> compose <span class="token keyword">from</span> <span class="token string">"./koa-compose.js"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">extends</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>middleware <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//存储中间件</span>  <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>middleware<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 创建服务</span>  <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//请求到来时候的回调函数</span>  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//组合中间件</span>    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>middleware<span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">handleRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">//创建上下文对象</span>      <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> handleRequest  <span class="token punctuation">&#125;</span>  <span class="token comment">// 请求回调</span>  <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> fnMiddleware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">handleResponse</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">respond</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> ctx<span class="token punctuation">.</span><span class="token function">onerror</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token comment">// 执行中间件 包装为 Promise 执行完成后响应 body</span>    <span class="token keyword">return</span> <span class="token function">fnMiddleware</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>handleResponse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>onerror<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建上下文对象</span>    <span class="token keyword">const</span> context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span>    <span class="token comment">// 创建一个新的request对象，这个对象继承自this.request，并将这个对象赋值给context.request</span>    <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>request <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 创建一个新的response对象，这个对象继承自this.response，并将这个对象赋值给context.response</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>response <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>    context<span class="token punctuation">.</span>req <span class="token operator">=</span> request<span class="token punctuation">.</span>req <span class="token operator">=</span> req    context<span class="token punctuation">.</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>res <span class="token operator">=</span> res    <span class="token comment">//返回上下文对象</span>    <span class="token keyword">return</span> context  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 响应 body</span><span class="token keyword">function</span> <span class="token function">respond</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> res<span class="token punctuation">,</span> body <span class="token punctuation">&#125;</span> <span class="token operator">=</span> ctx  <span class="token keyword">if</span> <span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> body <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">Stream</span><span class="token punctuation">)</span> <span class="token keyword">return</span> body<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> EventEmitter <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-request"><a href="#6-2-request" class="headerlink" title="6.2 request"></a>6.2 request</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> parse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"parseurl"</span><span class="token punctuation">)</span><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"querystring"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">get</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>req<span class="token punctuation">.</span>url  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//把url路径转成对象，pathname是它的路径名 /a/b 参数req: IncomingMessage</span>    <span class="token keyword">return</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>pathname  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>req<span class="token punctuation">.</span>method  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//查询字符串，它的格式是一个字符串 ?a=1&amp;b=2</span>  <span class="token keyword">get</span> <span class="token function">querystring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>query  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//它会调用qs.parse方法把查询字符串从字符串转成对象</span>  <span class="token keyword">get</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>querystring<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>req<span class="token punctuation">.</span>headers  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>header  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3response"><a href="#6-3response" class="headerlink" title="6.3response"></a>6.3response</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//设置状态码   response.status = 200;</span>  <span class="token keyword">set</span> <span class="token function">status</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//把状态码code透传给原生的res响应对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> code  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//给响应状态码的原因短语赋值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span>statusMessage <span class="token operator">=</span> msg  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">body</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//当调用response.body = xxx的时候，会把xxx暂存到response._body上</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_body <span class="token operator">=</span> value    <span class="token comment">//一旦调用了res.end方法，则不能再次写入响应了</span>    <span class="token comment">//this.res.end(value);</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_body  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//set用来设置响应头</span>  <span class="token function">set</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//调用原生的响应对象的setHeader方法，设置字符和值</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-context"><a href="#6-4-context" class="headerlink" title="6.4 context"></a>6.4 context</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> delegate <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./delegates"</span><span class="token punctuation">)</span><span class="token comment">//创建一个空对象并将其导出</span><span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">onerror</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> res <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">500</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//使用代理模块将proto对象的一些属性代理到request对象上  proto.url=>proto.request.url</span><span class="token function">delegate</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> <span class="token string">"request"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span> <span class="token comment">//将request对象上method属性代理到proto对象上 access能读又能写</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">)</span> <span class="token comment">//只能读不能写</span><span class="token comment">//使用代理模块将proto对象的一些属性代理到response对象上  proto.body=>proto.response.body</span><span class="token function">delegate</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> <span class="token string">"response"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span> <span class="token comment">//将response对象上的set方法代理到proto对象上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5delegates"><a href="#6-5delegates" class="headerlink" title="6.5delegates"></a>6.5delegates</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Delegator</span><span class="token punctuation">(</span><span class="token parameter">proto<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Delegator</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Delegator</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> target<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>proto <span class="token operator">=</span> proto  <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">&#125;</span><span class="token class-name">Delegator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> proto<span class="token punctuation">,</span> target <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">&#125;</span><span class="token class-name">Delegator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> proto<span class="token punctuation">,</span> target <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">&#125;</span><span class="token class-name">Delegator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">access</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Delegator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">method</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> proto<span class="token punctuation">,</span> target <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span>  proto<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Delegator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-6-Koa-compose"><a href="#6-6-Koa-compose" class="headerlink" title="6.6 Koa-compose"></a>6.6 Koa-compose</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 组合中间件函数，返回一个可以处理上下文的函数 * * @param &#123;Array&#125; middleware - 中间件函数数组 * @returns &#123;Function&#125; 处理上下文的函数 */</span><span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter">middleware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 返回一个函数，该函数接收一个context参数</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token comment">// 定义一个dispatch函数，用于控制中间件的执行顺序</span>    <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果已经执行过dispatch(i)，则返回一个错误</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> index<span class="token punctuation">)</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"next() called multiple times"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 更新index的值</span>      index <span class="token operator">=</span> i      <span class="token comment">// 获取当前中间件函数</span>      <span class="token keyword">let</span> fn <span class="token operator">=</span> middleware<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token comment">// 如果中间件函数不存在，则返回一个已解决的Promise</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 执行中间件函数，并传入context和下一个中间件函数</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 开始执行中间件函数</span>    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-7-cookie-的设置和获取"><a href="#6-7-cookie-的设置和获取" class="headerlink" title="6.7 cookie 的设置和获取"></a>6.7 cookie 的设置和获取</h3><p>context.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Cookies <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cookies"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token constant">COOKIES</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"context#cookies"</span><span class="token punctuation">)</span><span class="token keyword">const</span> proto <span class="token operator">=</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ........</span>  <span class="token keyword">get</span> <span class="token function">cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">COOKIES</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">COOKIES</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookies</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>req<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">keys</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">.</span>keys<span class="token punctuation">,</span>        <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span>secure<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">COOKIES</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">cookies</span><span class="token punctuation">(</span><span class="token parameter">_cookies</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token constant">COOKIES</span><span class="token punctuation">]</span> <span class="token operator">=</span> _cookies  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//........</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cookies.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Cookies</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>req <span class="token operator">=</span> req  <span class="token keyword">this</span><span class="token punctuation">.</span>res <span class="token operator">=</span> res<span class="token punctuation">&#125;</span><span class="token comment">//用来写cookie,通过响应头的Set-Cookie</span><span class="token comment">//Set-Cookie:name=name_value; path=/; httponly 每个set-cookie只能写入一个cookie</span><span class="token class-name">Cookies</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">set</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> attrs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//获取响应头中的Set-Cookie的值</span>  <span class="token keyword">const</span> headers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">//根据name和value创建一个新的cookie</span>  <span class="token keyword">let</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span>  <span class="token comment">//把新的cookie加入到数组中</span>  headers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">toHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//写回响应头</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//用来读cookie,通过请求头中cookie</span><span class="token comment">//请求头 Cookie:name=zhufeng; age=18</span><span class="token class-name">Cookies</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//name=name_domain</span>  <span class="token comment">//获取客户端发送过来的cookie</span>  <span class="token keyword">let</span> cookie <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>cookie <span class="token operator">||</span> <span class="token string">""</span>  <span class="token keyword">return</span> <span class="token function">getValueFromHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cookie<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getValueFromHeader</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> cookie</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//如果客户端根本没有传cookie过来，不用找了，直接返回</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cookie<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token comment">//name=name_value; name_domain=; name_path=name_path_value</span>  <span class="token keyword">let</span> regexp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(?:^|;) *"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"=([^;]*)"</span><span class="token punctuation">)</span> <span class="token comment">//name_domain=([^;]*)</span>  <span class="token keyword">let</span> match <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Cookie</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> attrs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value  <span class="token comment">//把用户传过来的cookie选项存放到cookie类的实例上等待被使用 path httpOnly</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> name <span class="token keyword">in</span> attrs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> attrs<span class="token punctuation">[</span>name<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Cookie</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token class-name">Cookie</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toHeader</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> header <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span> header <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">; path=</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>path  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxAge<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expires <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxAge<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expires<span class="token punctuation">)</span> header <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">; expires=</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expires<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>domain<span class="token punctuation">)</span> header <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">; domain=</span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>domain  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>httpOnly<span class="token punctuation">)</span> header <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">; httpOnly</span><span class="token template-punctuation string">`</span></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span>  <span class="token keyword">return</span> header<span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Cookies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 ：</strong> 可以对 cookie 进行签名</p><p>源码请看：<a href="https://www.npmjs.com/package/cookies?activeTab=code">https://www.npmjs.com/package/cookies?activeTab=code</a></p><h2 id="7-常见中间件的使用"><a href="#7-常见中间件的使用" class="headerlink" title="7. 常见中间件的使用"></a>7. 常见中间件的使用</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fileURLToPath <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"url"</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token keyword">import</span> serve <span class="token keyword">from</span> <span class="token string">"koa-static"</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"koa-router"</span><span class="token keyword">import</span> bodyParser <span class="token keyword">from</span> <span class="token string">"koa-bodyparser"</span><span class="token keyword">import</span> views <span class="token keyword">from</span> <span class="token string">"koa-views"</span><span class="token keyword">import</span> Koa <span class="token keyword">from</span> <span class="token string">"koa"</span><span class="token keyword">import</span> multer <span class="token keyword">from</span> <span class="token string">"@koa/multer"</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 模拟 __dirname</span><span class="token keyword">const</span> __filename <span class="token operator">=</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token keyword">const</span> __dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token comment">// 配置 multer，用于处理 multipart/form-data（文件上传）</span><span class="token keyword">const</span> upload <span class="token operator">=</span> <span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">dest</span><span class="token operator">:</span> <span class="token string">"uploads/"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 1. 提供静态资源服务</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">serve</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">serve</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 2. 使用 bodyparser 解析请求体</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ctx.request.body = 请求体</span><span class="token comment">// 3. 记录访问的时间</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 4. 错误捕获</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> err<span class="token punctuation">.</span>status <span class="token operator">||</span> <span class="token number">500</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Internal Server Error"</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 5. 设置模板引擎</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token function">views</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"views"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">extension</span><span class="token operator">:</span> <span class="token string">"ejs"</span><span class="token punctuation">,</span> <span class="token comment">// 确保渲染引擎为 ejs</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 6. 使用路由系统</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 推荐：允许 HTTP 方法控制</span><span class="token comment">// 上传文件的路由，同时传递参数</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> upload<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> files <span class="token operator">=</span> ctx<span class="token punctuation">.</span>files <span class="token comment">// 获取上传的文件</span>  <span class="token keyword">const</span> params <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body <span class="token comment">// 获取表单参数</span>  <span class="token comment">// console.dir("file=>", file.filename)</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"File uploaded successfully"</span><span class="token punctuation">,</span>    <span class="token literal-property property">fileDetails</span><span class="token operator">:</span> files<span class="token punctuation">,</span>    <span class="token literal-property property">formData</span><span class="token operator">:</span> params<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"zs"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 启动服务器</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Server started on http://localhost:3000"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-koa-router"><a href="#1-koa-router" class="headerlink" title="1. koa-router"></a>1. <strong><code>koa-router</code></strong></h3><ul><li><strong>功能</strong>：用于处理路由。允许定义路径和处理请求的方法，如 GET、POST 等。</li><li><strong>使用场景</strong>：创建 API 时进行路由控制。</li></ul><h3 id="2-koa-bodyparser"><a href="#2-koa-bodyparser" class="headerlink" title="2. koa-bodyparser"></a>2. <strong><code>koa-bodyparser</code></strong></h3><ul><li><strong>功能</strong>：解析请求体，用于处理 POST 请求中的 JSON、表单等数据。</li><li><strong>使用场景</strong>：解析<code>POST</code>请求的请求体内容，尤其是 JSON 格式的数据。</li></ul><h3 id="3-koa-static"><a href="#3-koa-static" class="headerlink" title="3. koa-static"></a>3. <strong><code>koa-static</code></strong></h3><ul><li><strong>功能</strong>：提供静态文件服务，用于提供诸如 HTML、CSS、JS、图片等文件。</li><li><strong>使用场景</strong>：当你需要为前端应用提供静态资源时，如图片或静态网页。</li></ul><h3 id="4-koa-multer"><a href="#4-koa-multer" class="headerlink" title="4. koa-multer"></a>4. <strong><code>koa-multer</code></strong></h3><ul><li><strong>功能</strong>：用于处理文件上传。</li><li><strong>使用场景</strong>：当应用需要处理用户上传的文件时。</li></ul><h3 id="5-koa-session"><a href="#5-koa-session" class="headerlink" title="5. koa-session"></a>5. <strong><code>koa-session</code></strong></h3><ul><li><strong>功能</strong>：用于会话管理，存储和管理用户会话信息。</li><li><strong>使用场景</strong>：需要对用户登录状态进行管理。</li></ul><h3 id="6-koa-jwt"><a href="#6-koa-jwt" class="headerlink" title="6. koa-jwt"></a>6. <strong><code>koa-jwt</code></strong></h3><ul><li><strong>功能</strong>：用于基于 JWT 的身份验证，解析请求中的 JWT token。</li><li><strong>使用场景</strong>：用于保护路由，需要对用户身份进行认证。</li></ul><h3 id="7-koa-view"><a href="#7-koa-view" class="headerlink" title="7 koa-view"></a>7 <strong><code>koa-view</code></strong></h3><ul><li><strong>功能</strong>：用于在服务器端渲染 HTML 模板，可以动态生成页面</li><li><strong>使用场景</strong>：需要服务端渲染动态内容的场景，比如渲染用户数据、生成 HTML 电子邮件等<ul><li><strong>EJS</strong>：简单、易用，适合小项目。</li><li><strong>Pug</strong>：简洁的缩进式语法，适合中大型项目。</li><li><strong>Nunjucks</strong>：功能强大，支持高级特性，适合复杂应用。</li><li><strong>Handlebars</strong>：轻量化，适合生成静态页面。</li></ul></li></ul><h2 id="8-中间件实现"><a href="#8-中间件实现" class="headerlink" title="8. 中间件实现"></a>8. 中间件实现</h2><h3 id="1-koa-router-1"><a href="#1-koa-router-1" class="headerlink" title="1.koa-router"></a>1.koa-router</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"head"</span><span class="token punctuation">,</span> <span class="token string">"options"</span><span class="token punctuation">,</span> <span class="token string">"put"</span><span class="token punctuation">,</span> <span class="token string">"patch"</span><span class="token punctuation">,</span> <span class="token string">"post"</span><span class="token punctuation">,</span> <span class="token string">"delete"</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//stack里存放路由规则</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> method <span class="token keyword">of</span> methods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> middleware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//把请求的方法，请求的路径以及对应的请求处理中间件函数包装成一个对象并放入stack数组</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path<span class="token punctuation">,</span> method<span class="token punctuation">,</span> middleware <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Router</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">routes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//这个才是真正用来处理请求的中间件函数</span>  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在stack数组中找到一个元素，那个元素path和当前的请求的路径相同，它的method和请求的方法名相同</span>    <span class="token keyword">const</span> matchedLayer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">layer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> layer<span class="token punctuation">.</span>path <span class="token operator">===</span> ctx<span class="token punctuation">.</span>path <span class="token operator">&amp;&amp;</span> layer<span class="token punctuation">.</span>method <span class="token operator">===</span> ctx<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchedLayer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">await</span> matchedLayer<span class="token punctuation">.</span><span class="token function">middleware</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-koa-bodyparser-1"><a href="#2-koa-bodyparser-1" class="headerlink" title="2.koa-bodyparser"></a>2.koa-bodyparser</h3><ul><li>包含解析<code>application/x-www-form-urlencoded</code>和<code>application/json</code>和文件上传<code>multipart/form-data</code>原理</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> querystring <span class="token keyword">from</span> <span class="token string">"querystring"</span><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">"fs/promises"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> v4 <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"uuid"</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token keyword">const</span> starts <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">"application/json"</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token class-name">Buffer</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">split</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">sep</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> headerLines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  sep <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">isBuffer</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span> <span class="token operator">?</span> sep <span class="token operator">:</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span>  <span class="token keyword">let</span> offset <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">!==</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>sep<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    headerLines<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>    offset <span class="token operator">=</span> index <span class="token operator">+</span> sep<span class="token punctuation">.</span>length  <span class="token punctuation">&#125;</span> <span class="token comment">// str.indexOf(分隔符,查找的位置)</span>  headerLines<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 分割后的最后一部分也放到数组里</span>  <span class="token keyword">return</span> headerLines<span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">formData</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> boundary<span class="token punctuation">,</span> uploadDir</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> headerLines <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"--"</span> <span class="token operator">+</span> boundary<span class="token punctuation">)</span>  headerLines <span class="token operator">=</span> headerLines<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>    headerLines<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>content<span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\r\n\r\n"</span><span class="token punctuation">)</span> <span class="token comment">// type 和 内容之间是两个换行</span>      <span class="token keyword">let</span> contentType <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> name <span class="token operator">=</span> contentType<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">name="(.+?)"</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        content <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token function">v4</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>uploadDir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>        <span class="token keyword">let</span> file <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">originalFilename</span><span class="token operator">:</span> contentType<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">filename="(.+?)"</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token literal-property property">type</span><span class="token operator">:</span> contentType<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Content-Type: ([^\r\n]+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token literal-property property">size</span><span class="token operator">:</span> content<span class="token punctuation">.</span>length<span class="token punctuation">,</span>          filename<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        result<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        result<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> uploadDir <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 解析请求体，将结果 给 赋值到ctx.request.body</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      ctx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      ctx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> type <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span>        <span class="token comment">// 给上下文中的request自定一个body属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> content <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"multipart/form-data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 表单内容， 表单的分割符号</span>            <span class="token function">formData</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> uploadDir<span class="token punctuation">)</span> <span class="token comment">// 将文件上传到某个目录中</span>            <span class="token comment">// 信息保存到 ctx.request.body</span>            ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body <span class="token operator">=</span> starts<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> bodyParser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-koa-static-1"><a href="#3-koa-static-1" class="headerlink" title="3.koa-static"></a>3.koa-static</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> stat <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"fs/promises"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createReadStream <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token keyword">import</span> mime <span class="token keyword">from</span> <span class="token string">"mime"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token parameter">dirname</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//先向后执行</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dirname<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>path<span class="token punctuation">)</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> statObj <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">stat</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>statObj<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> mime<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"text/plain"</span> <span class="token operator">+</span> <span class="token string">";charset=utf-8"</span><span class="token punctuation">)</span>        ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token function">createReadStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-koa-session"><a href="#4-koa-session" class="headerlink" title="4. koa-session"></a>4. koa-session</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">generateKoaSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//服务端会有一段内存用来保存每个用户的数据</span>  <span class="token comment">//用户对就在的会话数据就放在这个对象里</span>  <span class="token keyword">const</span> sessionStorage <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取用户传递过来的koa.sess</span>    <span class="token keyword">let</span> koasess <span class="token operator">=</span> ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"koa.sess"</span><span class="token punctuation">)</span>    <span class="token comment">//如果没有传递,说明一个新的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>koasess<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//生成一个新的koasess</span>      koasess <span class="token operator">=</span> <span class="token function">generateKoaSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      sessionStorage<span class="token punctuation">[</span>koasess<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token comment">//通过cookie把这个新的卡号发给或者说种植到客户端</span>      ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"koa.sess"</span><span class="token punctuation">,</span> koasess<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">httpOnly</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    ctx<span class="token punctuation">.</span>session <span class="token operator">=</span> sessionStorage<span class="token punctuation">[</span>koasess<span class="token punctuation">]</span>    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 中的diff算法？</title>
      <link href="/2024/07/15/vue-zhong-de-diff-suan-fa/"/>
      <url>/2024/07/15/vue-zhong-de-diff-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="前后元素不一致"><a href="#前后元素不一致" class="headerlink" title="前后元素不一致"></a>前后元素不一致</h2><blockquote><p>两个不同虚拟节点不需要进行比较，直接移除老节点，将新的虚拟节点渲染成真实 DOM 进行挂载即可</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isSameVNodeType</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> n1<span class="token punctuation">.</span>type <span class="token operator">===</span> n2<span class="token punctuation">.</span>type <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>key <span class="token operator">===</span> n2<span class="token punctuation">.</span>key<span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">patch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化和diff算法都在这里喲</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> n2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 有n1 是n1和n2不是同一个节点</span>    <span class="token function">unmount</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>    n1 <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化的情况</span>    <span class="token function">mountElement</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// diff算法</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">patch</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ....</span>  <span class="token function">processElement</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token comment">// 封装对元素的处理逻辑</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前后元素一致"><a href="#前后元素一致" class="headerlink" title="前后元素一致"></a>前后元素一致</h2><blockquote><p>前后元素一致则比较两个元素的属性和孩子节点</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">patchProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span>oldProps<span class="token punctuation">,</span> newProps<span class="token punctuation">,</span> el<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> newProps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 用新的生效</span>    <span class="token function">hostPatchProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">,</span> oldProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> newProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 老的里面有新的没有则删除</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> oldProps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> newProps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">hostPatchProp</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">,</span> oldProps<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">patchElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> el <span class="token operator">=</span> <span class="token punctuation">(</span>n2<span class="token punctuation">.</span>el <span class="token operator">=</span> n1<span class="token punctuation">.</span>el<span class="token punctuation">)</span>  <span class="token keyword">const</span> oldProps <span class="token operator">=</span> n1<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> newProps <span class="token operator">=</span> n2<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token function">patchProps</span><span class="token punctuation">(</span>oldProps<span class="token punctuation">,</span> newProps<span class="token punctuation">,</span> el<span class="token punctuation">)</span> <span class="token comment">// 比对新老属性</span>  <span class="token function">patchChildren</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> el<span class="token punctuation">)</span> <span class="token comment">// 比较元素的孩子节点</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">processElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">mountElement</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">patchElement</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token comment">// 比较两个元素</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子元素比较情况"><a href="#子元素比较情况" class="headerlink" title="子元素比较情况"></a>子元素比较情况</h2><table><thead><tr><th align="left">新儿子</th><th align="left">旧儿子</th><th align="left">操作方式</th></tr></thead><tbody><tr><td align="left">文本</td><td align="left">数组</td><td align="left">（删除老儿子，设置文本内容）</td></tr><tr><td align="left">文本</td><td align="left">文本</td><td align="left">（更新文本即可）</td></tr><tr><td align="left">文本</td><td align="left">空</td><td align="left">（更新文本即可) 与上面的类似</td></tr><tr><td align="left">数组</td><td align="left">数组</td><td align="left">（diff 算法）</td></tr><tr><td align="left">数组</td><td align="left">文本</td><td align="left">（清空文本，进行挂载）</td></tr><tr><td align="left">数组</td><td align="left">空</td><td align="left">（进行挂载） 与上面的类似</td></tr><tr><td align="left">空</td><td align="left">数组</td><td align="left">（删除所有儿子）</td></tr><tr><td align="left">空</td><td align="left">文本</td><td align="left">（清空文本）</td></tr><tr><td align="left">空</td><td align="left">空</td><td align="left">（无需处理）</td></tr></tbody></table><h3 id="子节点有三种情况：-文本、数组、没有儿子"><a href="#子节点有三种情况：-文本、数组、没有儿子" class="headerlink" title="子节点有三种情况： 文本、数组、没有儿子"></a>子节点有三种情况： 文本、数组、没有儿子</h3><ul><li>1.新的是文本，老的是数组移除老的；</li><li>2.新的是文本，老的也是文本，内容不相同替换</li><li>3.老的是数组，新的是数组，全量 diff 算法</li><li>4.老的是数组，新的不是数组，移除老的子节点</li><li>5.老的是文本，新的是空</li><li>6.老的是文本，新的是数组</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">unmountChildren</span> <span class="token operator">=</span> <span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unmount</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">patchChildren</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> el<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> c1 <span class="token operator">=</span> n1 <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>children  <span class="token keyword">const</span> c2 <span class="token operator">=</span> n2<span class="token punctuation">.</span>children  <span class="token keyword">const</span> prevShapeFlag <span class="token operator">=</span> n1<span class="token punctuation">.</span>shapeFlag  <span class="token keyword">const</span> shapeFlag <span class="token operator">=</span> n2<span class="token punctuation">.</span>shapeFlag  <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevShapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">unmountChildren</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">!==</span> c2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">hostSetElementText</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> c2<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prevShapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">unmountChildren</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>prevShapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">hostSetElementText</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">mountChildren</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span> el<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="核心Diff算法"><a href="#核心Diff算法" class="headerlink" title="核心Diff算法[#]"></a>核心<code>Diff</code>算法[#]</h2><h3 id="sync-from-start"><a href="#sync-from-start" class="headerlink" title="sync from start[#]"></a>sync from start[#]</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span><span class="token punctuation">[</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">'a'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">'b'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">'c'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span><span class="token punctuation">[</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">'a'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">'b'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">'d'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">'e'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">patchKeydChildren</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> container<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">const</span> l2 <span class="token operator">=</span> c2<span class="token punctuation">.</span>length  <span class="token keyword">let</span> e1 <span class="token operator">=</span> c1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>  <span class="token keyword">let</span> e2 <span class="token operator">=</span> l2 <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment">// 1. sync from start</span>  <span class="token comment">// (a b) c</span>  <span class="token comment">// (a b) d e</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> e1 <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> n1 <span class="token operator">=</span> c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">const</span> n2 <span class="token operator">=</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">patch</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">break</span>    <span class="token punctuation">&#125;</span>    i<span class="token operator">++</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sync-from-end"><a href="#sync-from-end" class="headerlink" title="sync from end"></a>sync from end</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 2. sync from end</span><span class="token comment">// a (b c)</span><span class="token comment">// d e (b c)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> e1 <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> n1 <span class="token operator">=</span> c1<span class="token punctuation">[</span>e1<span class="token punctuation">]</span>  <span class="token keyword">const</span> n2 <span class="token operator">=</span> c2<span class="token punctuation">[</span>e2<span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">patch</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">break</span>  <span class="token punctuation">&#125;</span>  e1<span class="token operator">--</span>  e2<span class="token operator">--</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="common-sequence-mount"><a href="#common-sequence-mount" class="headerlink" title="common sequence + mount"></a>common sequence + mount</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 3. common sequence + mount</span><span class="token comment">// (a b)</span><span class="token comment">// (a b) c</span><span class="token comment">// i = 2, e1 = 1, e2 = 2</span><span class="token comment">// (a b)</span><span class="token comment">// c (a b)</span><span class="token comment">// i = 0, e1 = -1, e2 = 0</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> e1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 说明有新增</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 表示有新增的部分</span>    <span class="token comment">// 先根据e2 取他的下一个元素  和 数组长度进行比较</span>    <span class="token keyword">const</span> nextPos <span class="token operator">=</span> e2 <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">const</span> anchor <span class="token operator">=</span> nextPos <span class="token operator">&lt;</span> c2<span class="token punctuation">.</span>length <span class="token operator">?</span> c2<span class="token punctuation">[</span>nextPos<span class="token punctuation">]</span><span class="token punctuation">.</span>el <span class="token operator">:</span> <span class="token keyword">null</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>      i<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="common-sequence-unmount"><a href="#common-sequence-unmount" class="headerlink" title="common sequence + unmount"></a>common sequence + unmount</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 4. common sequence + unmount</span><span class="token comment">// (a b) c</span><span class="token comment">// (a b)</span><span class="token comment">// i = 2, e1 = 2, e2 = 1</span><span class="token comment">// a (b c)</span><span class="token comment">// (b c)</span><span class="token comment">// i = 0, e1 = 0, e2 = -1</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> e1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">unmount</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token operator">++</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unknown-sequence"><a href="#unknown-sequence" class="headerlink" title="unknown sequence"></a>unknown sequence</h3><h4 id="build-key-index-map-for-newChildren"><a href="#build-key-index-map-for-newChildren" class="headerlink" title="build key:index map for newChildren"></a><code>build key:index map for newChildren</code></h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 5. unknown sequence</span><span class="token comment">// a b [c d e] f g</span><span class="token comment">// a b [e c d h] f g</span><span class="token comment">// i = 2, e1 = 4, e2 = 5</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> s1 <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">const</span> s2 <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">const</span> keyToNewIndexMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> s2<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> e2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> nextChild <span class="token operator">=</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        keyToNewIndexMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>key<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="loop-through-old-children-left-to-be-patched-and-try-to-patch"><a href="#loop-through-old-children-left-to-be-patched-and-try-to-patch" class="headerlink" title="loop through old children left to be patched and try to patch"></a><code>loop through old children left to be patched and try to patch</code></h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 标记新元素的，对应老元素的索引位置</span><span class="token keyword">const</span> toBePatched <span class="token operator">=</span> e2 <span class="token operator">-</span> s2 <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">const</span> newIndexToOldMapIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>toBePatched<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> s1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> e1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> prevChild <span class="token operator">=</span> c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token keyword">let</span> newIndex <span class="token operator">=</span> keyToNewIndexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token comment">// 获取新的索引</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>newIndex <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unmount</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">)</span> <span class="token comment">// 老的有 新的没有直接删除</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    newIndexToOldMapIndex<span class="token punctuation">[</span>newIndex <span class="token operator">-</span> s2<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token function">patch</span><span class="token punctuation">(</span>prevChild<span class="token punctuation">,</span> c2<span class="token punctuation">[</span>newIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="move-and-mount"><a href="#move-and-mount" class="headerlink" title="move and mount"></a>move and mount</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newIndexToOldMapIndex<span class="token punctuation">)</span> <span class="token comment">// -> 将结果映射成  [1,2]  倒序的时候遇到索引为2和1的跳过操作</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> toBePatched <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> nextIndex <span class="token operator">=</span> s2 <span class="token operator">+</span> i <span class="token comment">// [ecdh]   找到h的索引</span>  <span class="token keyword">const</span> nextChild <span class="token operator">=</span> c2<span class="token punctuation">[</span>nextIndex<span class="token punctuation">]</span> <span class="token comment">// 找到 h</span>  <span class="token keyword">let</span> anchor <span class="token operator">=</span> nextIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> c2<span class="token punctuation">.</span>length <span class="token operator">?</span> c2<span class="token punctuation">[</span>nextIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el <span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">// 找到当前元素的下一个元素</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>newIndexToOldMapIndex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这是一个新元素 直接创建插入到 当前元素的下一个即可</span>    <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> nextChild<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 根据参照物 将节点直接移动过去  所有节点都要移动 （但是有些节点可以不动）</span>    <span class="token function">hostInsert</span><span class="token punctuation">(</span>nextChild<span class="token punctuation">.</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h2><h3 id="最优情况"><a href="#最优情况" class="headerlink" title="最优情况"></a>最优情况</h3><blockquote><p>Vue3 采用最长递增子序列，求解不需要移动的元素有哪些</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getSequence</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 保存最长递增子序列的索引</span>  <span class="token keyword">let</span> resultLastIndex  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> arrI <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">// 获取数组中的每一项，但是0 没有意义我们需要忽略掉</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arrI <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      resultLastIndex <span class="token operator">=</span> result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>resultLastIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arrI<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 记录索引</span>        <span class="token keyword">continue</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token comment">// 针对默认递增的序列进行优化</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSequence</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二分查找查找最长递增个"><a href="#二分查找查找最长递增个" class="headerlink" title="二分查找查找最长递增个"></a>二分查找查找最长递增个</h3><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getSequence1</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 保存最长递增子序列的索引</span>  <span class="token keyword">let</span> resultLastIndex  <span class="token keyword">let</span> start  <span class="token keyword">let</span> end  <span class="token keyword">let</span> middle <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> arrI <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">// 获取数组中的每一项，但是0 没有意义我们需要忽略掉</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arrI <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      resultLastIndex <span class="token operator">=</span> result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>resultLastIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arrI<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 记录索引</span>        <span class="token keyword">continue</span>      <span class="token punctuation">&#125;</span>      start <span class="token operator">=</span> <span class="token number">0</span>      end <span class="token operator">=</span> result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 二分查找 前后索引</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 最终start = end</span>        middle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token comment">// 向下取整</span>        <span class="token comment">// 拿result中间值和最后一项比较</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arrI<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 找比arrI大的值 或者等于arrI</span>          start <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          end <span class="token operator">=</span> middle        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arrI <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 当前这个小就替换掉</span>        result<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> i      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前驱节点追溯"><a href="#前驱节点追溯" class="headerlink" title="前驱节点追溯"></a>前驱节点追溯</h3><p>假设有：[2,3,1,5,6,8,7,9,4] 为最新序列 -&gt; 按照上述结果得出的结论为：[ 2, 1, 8, 4, 6, 7 ]</p><p><img src="http://zhufengpeixun.com/vue-lesson/assets/sequence.957e5a54.png" alt="img"></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getSequence</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 最终的结果是索引</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 索引  递增的序列 用二分查找性能高</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 里面内容无所谓 和 原本的数组相同 用来存放索引</span>  <span class="token keyword">let</span> start  <span class="token keyword">let</span> end  <span class="token keyword">let</span> middle  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// O(n)</span>    <span class="token keyword">const</span> arrI <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arrI <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> resultLastIndex <span class="token operator">=</span> result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token comment">// 取到索引对应的值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>resultLastIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arrI<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> resultLastIndex <span class="token comment">// 标记当前前一个对应的索引</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment">// 当前的值 比上一个人大 ，直接push ，并且让这个人得记录他的前一个</span>        <span class="token keyword">continue</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 二分查找 找到比当前值大的那一个</span>      start <span class="token operator">=</span> <span class="token number">0</span>      end <span class="token operator">=</span> result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 重合就说明找到了 对应的值  // O(logn)</span>        middle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token comment">// 找到中间位置的前一个</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arrI<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          start <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          end <span class="token operator">=</span> middle        <span class="token punctuation">&#125;</span> <span class="token comment">// 找到结果集中，比当前这一项大的数</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// start / end 就是找到的位置</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arrI <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>result<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果相同 或者 比当前的还大就不换了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 才需要替换</span>          p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 要将他替换的前一个记住</span>        <span class="token punctuation">&#125;</span>        result<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> i      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> result<span class="token punctuation">.</span>length <span class="token comment">// 总长度</span>  <span class="token keyword">let</span> last <span class="token operator">=</span> result<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 找到了最后一项</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 根据前驱节点一个个向前查找</span>    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> last <span class="token comment">// 最后一项肯定是正确的</span>    last <span class="token operator">=</span> p<span class="token punctuation">[</span>last<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSequence</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化Diff算法"><a href="#优化Diff算法" class="headerlink" title="优化Diff算法"></a>优化<code>Diff</code>算法</h3><p>利用最长递增子序列，优化<code>Diff</code>算法</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// [5,3,4,0] => [1,2]</span><span class="token keyword">let</span> increasingNewIndexSequence <span class="token operator">=</span> <span class="token function">getSequence</span><span class="token punctuation">(</span>newIndexToOldMapIndex<span class="token punctuation">)</span><span class="token keyword">let</span> j <span class="token operator">=</span> increasingNewIndexSequence<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 取出最后一个人的索引</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> toBePatched <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> i <span class="token operator">+</span> s2 <span class="token comment">// 找到h的索引</span>  <span class="token keyword">let</span> child <span class="token operator">=</span> c2<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token comment">// 找到h对应的节点</span>  <span class="token keyword">let</span> anchor <span class="token operator">=</span> currentIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> c2<span class="token punctuation">.</span>length <span class="token operator">?</span> c2<span class="token punctuation">[</span>currentIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el <span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">// 第一次插入h 后 h是一个虚拟节点，同时插入后 虚拟节点会</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>newIndexToOldMapIndex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果自己是0说明没有被patch过</span>    <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> child<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> increasingNewIndexSequence<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">hostInsert</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>el<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token comment">// 操作当前的d 以d下一个作为参照物插入</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      j<span class="token operator">--</span> <span class="token comment">// 跳过不需要移动的元素， 为了减少移动操作 需要这个最长递增子序列算法</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V8内存管理</title>
      <link href="/2024/06/27/v8-nei-cun-guan-li/"/>
      <url>/2024/06/27/v8-nei-cun-guan-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>V8 也会申请内存，申请的内存又会分为<strong>堆内存和栈内存</strong></p></blockquote><h2 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h2><ul><li>栈用于存放 JS 中的<strong>基本类型和引用类型指针</strong></li><li>栈的<strong>空间是连续</strong>的，增加删除只需要移动指针，操作速度非常快</li><li>栈的<strong>空间是有限</strong>的，当栈满了，就会抛出一个错误</li><li>栈一般是在<strong>执行函数时创建</strong>的，在函数执行完毕后，栈就会被销毁</li></ul><h2 id="二、堆"><a href="#二、堆" class="headerlink" title="二、堆"></a>二、堆</h2><ul><li>堆主要用于存储 JS 中的<strong>引用类型</strong></li></ul><p><img src="https://static.zhufengpeixun.com/dui_de_nei_cun_fen_pei_1639157736483.jpg" alt="new_large_object_space"></p><h3 id="堆空间分类"><a href="#堆空间分类" class="headerlink" title="堆空间分类"></a>堆空间分类</h3><h4 id="新生代-new-space"><a href="#新生代-new-space" class="headerlink" title="新生代(new space)"></a>新生代(new space)</h4><ul><li>新生代内存用于存放一些<strong>生命周期比较短的对象数据</strong></li></ul><h4 id="老生代-old-space"><a href="#老生代-old-space" class="headerlink" title="老生代(old space)"></a>老生代(old space)</h4><ul><li>老生代内存用于存放一些<strong>生命周期比较长的对象数据</strong></li><li>当<code>new space</code>的对象进行<strong>两个周期的</strong>垃圾回收后，如果数据还存在<code>new space</code>中，则将他们存放到<code>old space</code>中</li><li>Old Space 使<strong>用标记清除</strong>和<strong>标记整理</strong>的方式进行垃圾回收</li></ul><h3 id="什么是垃圾"><a href="#什么是垃圾" class="headerlink" title="什么是垃圾"></a>什么是垃圾</h3><ul><li>在程序运行过程中肯定会用到一些数据，这些数据会放在堆栈中，但是在程序运行结束后，这些数据就不会再被使用了，那些不再使用的数据就是垃圾</li></ul><h3 id="新生代的垃圾回收"><a href="#新生代的垃圾回收" class="headerlink" title="新生代的垃圾回收"></a>新生代的垃圾回收</h3><ul><li>新生代内存有<strong>两个区域</strong>，分别是<strong>对象区域(from) 和 空闲区域(to)</strong></li><li>新生代内存使用<strong>Scavenger 算法</strong>来管理内存,垃圾回收的入口<ul><li><strong>广度优先遍历</strong> From-Space 中的对象，从根对象出发，广度优先遍历所有能到达的对象,把存活的对象复制到 To-Space</li><li>遍历完成后，<strong>清空</strong> From-Space</li><li>From-Space 和 To-Space <strong>角色互换</strong></li></ul></li><li>复制后的对象在 To-Space 中占用的<strong>内存空间是连续的</strong>，<strong>不会出现碎片问题</strong></li><li>这种垃圾回收方式<strong>快速</strong>而又<strong>高效</strong>，但是<strong>会造成空间浪费</strong>（有 To-Space 空闲区域）</li><li>新生代的 <strong>GC 比较频繁</strong></li><li><strong>新生代的对象转移到老生</strong>代称为<strong>晋升 Promote</strong>,判断晋升的情况有两种<ul><li>经过<strong>一次 GC</strong> 还存活的对象</li><li>对象复制到 To-Space 时，To-Space 的<strong>空间达到一定的限制</strong>（超过 25%）</li></ul></li></ul><h3 id="老生代的垃圾回收"><a href="#老生代的垃圾回收" class="headerlink" title="老生代的垃圾回收"></a>老生代的垃圾回收</h3><blockquote><p>V8 在老生代中的垃圾回收策略采用<a style="color:red"><strong>Mark-Sweep(标记清除)和 Mark-Compact(标记整理)相结合</strong></a></p></blockquote><h4 id="Mark-Sweep-标记清除"><a href="#Mark-Sweep-标记清除" class="headerlink" title="Mark-Sweep(标记清除)"></a>Mark-Sweep(标记清除)</h4><ul><li>标记清除分为<strong>标记和清除两个阶段</strong></li><li>在标记阶段需要遍历**(深度优先遍历**)堆中的所有对象，并<strong>标记</strong>那些<strong>活着的对象</strong>，然后进入清除阶段。在清除阶段总，只<strong>清除没有被标记的对象</strong></li><li>V8 采取的是<strong>黑色和白色来标记数据</strong>，垃圾收集之前，会把所有的数据设置为<strong>白色</strong>，用来标记所有的<strong>尚未标记的对象</strong>，然后会从 GC 根出发，以<strong>深度优先的方式把所有的能访问到的数据都标记为黑色</strong>，遍历结束后黑色的就是活的数据，白色的就是可以清理的垃圾数据</li><li>由于标记清除只清除死亡对象，而死亡对象在老生代中占用的比例很小，所以<strong>效率较高</strong></li><li>标记清除有一个<strong>问题</strong>就是进行一次标记清楚后 <strong>，内存空间往往是不连续</strong>的，会出现很多的<strong>内存碎片</strong>。如果后续需要分配一个需要内存空间较多的对象时，如果所有的内存碎片都不够用，就会出现内存溢出的问题</li></ul><h4 id="Mark-Compact（标记整理）"><a href="#Mark-Compact（标记整理）" class="headerlink" title="Mark-Compact（标记整理）"></a>Mark-Compact（标记整理）</h4><ul><li>标记整理正是为了<strong>解决标记清除所带来的内存碎片的问题</strong></li><li>标记整理在标记清除的基础进行修改，将其的<strong>清除阶段变为紧缩极端</strong></li><li>在整理的过程中，将活着的对象向内存区的一段移动，移动完成后直接清理掉边界外的内存</li><li>紧缩过程涉及对象的移动，所以<strong>效率并不是太好，</strong>但是能保证不会生成内存碎片，<strong>一般 10 次标记清理会伴随一次标记整理</strong></li></ul><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>在执行垃圾回收算法期间，JS 脚本需要暂停，这种叫 Stop the world(全停顿)</li><li>如果回收时间过长，会引起卡顿</li><li>性能优化<ul><li>把大任务拆分小任务，分步执行，类似 fiber</li><li>将一些任务放在后台执行，不占用主线程</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">JavaScript执行 垃圾标记、垃圾清理、垃圾整理 JavaScript执行<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>                          <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Parallel-并行执行"><a href="#Parallel-并行执行" class="headerlink" title="Parallel(并行执行)"></a>Parallel(并行执行)</h4><ul><li><strong>新生代的垃圾回收</strong>采取并行策略提升垃圾回收速度，它会<strong>开启多个辅助线</strong>程来执行新生代的垃圾回收工作</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>辅助线程<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>辅助线程<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>辅助线程<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>                    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增量标记"><a href="#增量标记" class="headerlink" title="增量标记"></a>增量标记</h4><ul><li>老生代因为对象又大又多，所以垃圾回收的时间更长，采用增量标记的方式进行优化</li><li>增量标记就是把标记<strong>工作分成多个阶段</strong>，每个阶段都只标记一部分对象，和主线程的执行穿插进行</li><li>为了支持增量标记，V8 必须可以支持垃圾回收的<strong>暂停和恢复</strong>，所以采用了<code>黑白灰</code>三色标记法<ul><li>黑色表示这个节点被 GC 根引用到了，而且该节点的子节点都已经标记完成了</li><li>灰色表示这个节点被 GC 根引用到了，但子节点还没被垃圾回收器标记处理，也表明目前正在处理这个节点</li><li>白色表示此节点还没未被垃圾回收器发现，如果在本轮遍历结束时还是白色，那么这块数据就会被收回</li></ul></li><li>引入了灰色标记后，就可以通过判断有没有灰色节点来判断标记是否完成了，如果有灰色节点，下次恢复的应该从灰色节点继续执行</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>开始标记<span class="token operator">--</span><span class="token operator">-</span>增量标记<span class="token operator">--</span><span class="token operator">-</span>增量标记<span class="token operator">--</span><span class="token operator">-</span>清理<span class="token operator">--</span><span class="token operator">-</span>整理<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Write-barrier-写屏障"><a href="#Write-barrier-写屏障" class="headerlink" title="Write-barrier(写屏障)"></a>Write-barrier(写屏障)</h4><ul><li>当黑色指向白色节点的时候，就会触发写屏障，这个写屏障会把白色节点设置为灰色</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">global<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"a"</span> <span class="token punctuation">&#125;</span>global<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"b1"</span> <span class="token punctuation">&#125;</span><span class="token comment">//执行标记工作</span>global<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"b2"</span> <span class="token punctuation">&#125;</span><span class="token comment">//继续执行标记工作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Lazy-Sweeping-惰性清理"><a href="#Lazy-Sweeping-惰性清理" class="headerlink" title="Lazy Sweeping(惰性清理)"></a>Lazy Sweeping(惰性清理)</h4><ul><li>当增量标记完成后，如果内存够用，先不清理，等 JS 代码执行完慢慢清理</li></ul><h4 id="concurrent-并发回收"><a href="#concurrent-并发回收" class="headerlink" title="concurrent(并发回收)"></a>concurrent(并发回收)</h4><ul><li>其实增量标记和惰性清理并没有减少暂停的总时间</li><li>并发回收就是主线程在执行过程中，辅助线程可以在后台完成垃圾回收工作</li><li>标记操作全都由辅助线程完，清理操作由主线程和辅助线程配合完成</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">         <span class="token operator">--</span><span class="token operator">--</span>辅助线程标记<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>清理整理<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>         <span class="token operator">--</span><span class="token operator">--</span>辅助线程标记<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>清理整理<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>         <span class="token operator">--</span><span class="token operator">--</span>辅助线程标记<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>清理整理<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>执行<span class="token constant">JS</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>清理整理<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单页应用首屏加载速度慢的怎么解决？</title>
      <link href="/2024/05/11/dan-ye-ying-yong-shou-ping-jia-zai-su-du-man-de-zen-me-jie-jue/"/>
      <url>/2024/05/11/dan-ye-ying-yong-shou-ping-jia-zai-su-du-man-de-zen-me-jie-jue/</url>
      
        <content type="html"><![CDATA[<ul><li>使用路由懒加载、异步组件，实现组件拆分，减少入口文件体积大小,优化体验骨架屏</li><li>抽离公共代码，采用 splitChunks 进行代码分割。</li><li>组件加载采用按需加载的方式。</li><li>静态资源缓存，采用 HTTP 缓存 （强制缓存、对比缓存）、使用 localStorage 实现缓存资源。</li><li>图片资源的压缩，雪碧图、对小图片进行 base64 减少 http 请求。</li><li>打包时开启 gzip 压缩处理 compression-webpack-plugin 插件</li><li>静态资源采用 CDN 提速。终极的手段</li><li>使用 SSR 对首屏做服务端渲染。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React中的diff算法？</title>
      <link href="/2024/05/11/react-zhong-de-diff-suan-fa/"/>
      <url>/2024/05/11/react-zhong-de-diff-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>React 的 diff 算法是 React 在更新 DOM 时使用的算法。它的目的是最小化页面的重新渲染，以便提高性能。</p><p>当 React 渲染组件时，它会在内存中生成虚拟 DOM 树。然后，它会对比新的虚拟 DOM 树和之前的树的差异，找出最小的变化集合。这些变化会被打包成一组操作，用来更新真正的 DOM。</p><p>React 的 diff 算法遵循以下规则：</p><ul><li><p>同级比较：React 会把新的虚拟 DOM 树中的每一个节点与之前的树中的节点进行比较。如果节点类型不同或者属性不同，React 会直接替换掉原来的节点。如果节点类型相同，React 会继续递归比较这两个节点的子节点。</p></li><li><p>先序深度优先搜索：React 会按照节点的先序深度优先搜索的顺序，对比新旧两棵虚拟 DOM 树。这意味着，如果节点 A 在虚拟 DOM 中出现在节点 B 之前，那么在比较过程中，A 也会先于 B 被比较。</p><p>在比较同级节点时，React 会尽可能多地保留原来的节点。如果新的虚拟 DOM 中有多余的节点，它会把多余的节点插入到相应的位置；如果新的虚拟 DOM 中少了某些节点，它会把多余的节点删除。</p><p>在比较过程中，React 会把节点分成四类：新增、删除、修改、移动。对于新增、删除、修改的节点，React 会直接在 DOM 中进行对应的操作。对于移动的节点，React 会先将节点从原来的位置删除，然后再将节点插入到新的位置。</p><p>通过这样的方式，React 的 diff 算法可以最小化页面的重新渲染，提高性能。</p></li></ul><h2 id="单节点的-diff"><a href="#单节点的-diff" class="headerlink" title="单节点的 diff"></a>单节点的 diff</h2><p><img src="https://raw.githubusercontent.com/ghx9908/image-hosting/master/img/20230220164823.png"></p><h3 id="1、单节点-key-和类型相同"><a href="#1、单节点-key-和类型相同" class="headerlink" title="1、单节点 key 和类型相同"></a>1、单节点 key 和类型相同</h3><p><strong>核心复用老 Fiber 并返回</strong></p><ul><li>在 begin 阶段调用 useFiber 传入老 fiber 和新的虚拟 dom 的 props 创建 WorkInProgress 的新 fiber</li></ul><p>main.jsx</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> number <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> key<span class="token operator">=</span><span class="token string">"title1"</span> id<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span>      title    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> key<span class="token operator">=</span><span class="token string">"title"</span> id<span class="token operator">=</span><span class="token string">"title2"</span><span class="token operator">></span>      title2    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src\react-reconciler\src\ReactChildFiber.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * * @param &#123;*&#125; returnFiber 根fiber div#root对应的fiber * @param &#123;*&#125; currentFirstChild 老的FunctionComponent对应的fiber * @param &#123;*&#125; element 新的虚拟DOM对象 * @returns 返回新的第一个子fiber */</span><span class="token keyword">function</span> <span class="token function">reconcileSingleElement</span><span class="token punctuation">(</span><span class="token parameter">returnFiber<span class="token punctuation">,</span> currentFirstChild<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> key <span class="token operator">=</span> element<span class="token punctuation">.</span>key  <span class="token keyword">let</span> child <span class="token operator">=</span> currentFirstChild  <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>type <span class="token operator">===</span> element<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果key一样，类型也一样，则认为此节点可以复用</span>        <span class="token keyword">const</span> existing <span class="token operator">=</span> <span class="token function">useFiber</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> element<span class="token punctuation">.</span>props<span class="token punctuation">)</span>        existing<span class="token punctuation">.</span>return <span class="token operator">=</span> returnFiber        <span class="token keyword">return</span> existing      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">useFiber</span><span class="token punctuation">(</span><span class="token parameter">fiber<span class="token punctuation">,</span> pendingProps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> clone <span class="token operator">=</span> <span class="token function">createWorkInProgress</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> pendingProps<span class="token punctuation">)</span>  clone<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span>  clone<span class="token punctuation">.</span>sibling <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">return</span> clone<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、单节点-key-不同-类型相同，"><a href="#2、单节点-key-不同-类型相同，" class="headerlink" title="2、单节点 key 不同,类型相同，"></a>2、<strong>单节点 key 不同,类型相同，</strong></h3><p><strong>核心删除老节点，添加新节点</strong></p><ul><li>begin work 阶段 当检测到 key 不同的时候，给父 fiber 的 deletions=[deletedFiber]赋值和 flags 做上删除的标记；</li><li>在 commit 阶段 从根节点递归遍历处理变更的时候，先通过父 fiber，找到最近真实的 DOM 节点，然后递归从里向外删除它的真实 dom，目的是为了处理一些组件销毁时候如 uesEffect 的副作用。</li></ul><p>main.jsx</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> number <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">      title    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title2<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">      title2    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src\react-reconciler\src\ReactChildFiber.js</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">/**   *   * @param &#123;*&#125; returnFiber 根fiber div#root对应的fiber   * @param &#123;*&#125; currentFirstChild 老的FunctionComponent对应的fiber   * @param &#123;*&#125; element 新的虚拟DOM对象   * @returns 返回新的第一个子fiber   */</span>  <span class="token keyword">function</span> <span class="token function">reconcileSingleElement</span><span class="token punctuation">(</span><span class="token parameter">returnFiber<span class="token punctuation">,</span> currentFirstChild<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> key <span class="token operator">=</span> element<span class="token punctuation">.</span>key<span class="token punctuation">;</span>    <span class="token keyword">let</span> child <span class="token operator">=</span> currentFirstChild<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//...</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>       <span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给fiber上做标记</span>     <span class="token punctuation">&#125;</span>      child <span class="token operator">=</span> child<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">/**   *给父fiber的deletions和flags赋值   * @param &#123;*&#125; returnFiber 父fiber   * @param &#123;*&#125; childToDelete 将要删除的老节点   * @returns   */</span>  <span class="token keyword">function</span> <span class="token function">deleteChild</span><span class="token punctuation">(</span><span class="token parameter">returnFiber<span class="token punctuation">,</span> childToDelete</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrackSideEffects<span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token keyword">const</span> deletions <span class="token operator">=</span> returnFiber<span class="token punctuation">.</span>deletions    <span class="token keyword">if</span> <span class="token punctuation">(</span>deletions <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      returnFiber<span class="token punctuation">.</span>deletions <span class="token operator">=</span> <span class="token punctuation">[</span>childToDelete<span class="token punctuation">]</span>      returnFiber<span class="token punctuation">.</span>flags <span class="token operator">|=</span> ChildDeletion    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      returnFiber<span class="token punctuation">.</span>deletions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childToDelete<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src\react-reconciler\src\ReactFiberCommitWork.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 递归遍历处理变更的作用 * @param &#123;*&#125; root 根节点 * @param &#123;*&#125; parentFiber  父fiber */</span><span class="token keyword">function</span> <span class="token function">recursivelyTraverseMutationEffects</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> parentFiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//先把父fiber上该删除的节点都删除</span>  <span class="token keyword">const</span> deletions <span class="token operator">=</span> parentFiber<span class="token punctuation">.</span>deletions  <span class="token keyword">if</span> <span class="token punctuation">(</span>deletions <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> deletions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> childToDelete <span class="token operator">=</span> deletions<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token comment">//提交删除副作用</span>      <span class="token function">commitDeletionEffects</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> parentFiber<span class="token punctuation">,</span> childToDelete<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//再去处理剩下的子节点</span>  <span class="token comment">//判断是否有副作用...</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> hostParent <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 真实的父fiber对应的DOM</span><span class="token comment">/** * 提交删除副作用 * @param &#123;*&#125; root 根节点 * @param &#123;*&#125; returnFiber 父fiber * @param &#123;*&#125; deletedFiber 删除的fiber */</span><span class="token keyword">function</span> <span class="token function">commitDeletionEffects</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> returnFiber<span class="token punctuation">,</span> deletedFiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> parent <span class="token operator">=</span> returnFiber  <span class="token comment">//一直向上找，找到真实的DOM节点为此</span>  <span class="token literal-property property">findParent</span><span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>parent <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        hostParent <span class="token operator">=</span> parent<span class="token punctuation">.</span>stateNode        <span class="token keyword">break</span> findParent      <span class="token punctuation">&#125;</span>      <span class="token keyword">case</span> <span class="token literal-property property">HostRoot</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        hostParent <span class="token operator">=</span> parent<span class="token punctuation">.</span>stateNode<span class="token punctuation">.</span>containerInfo        <span class="token keyword">break</span> findParent      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>return  <span class="token punctuation">&#125;</span>  <span class="token function">commitDeletionEffectsOnFiber</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> returnFiber<span class="token punctuation">,</span> deletedFiber<span class="token punctuation">)</span>  hostParent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 删除真实Dom * @param &#123;*&#125; finishedRoot 跟biber * @param &#123;*&#125; nearestMountedAncestor 最近的父fiber * @param &#123;*&#125; deletedFiber 要删除的fiber */</span><span class="token keyword">function</span> <span class="token function">commitDeletionEffectsOnFiber</span><span class="token punctuation">(</span><span class="token parameter">finishedRoot<span class="token punctuation">,</span> nearestMountedAncestor<span class="token punctuation">,</span> deletedFiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>deletedFiber<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token literal-property property">HostText</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//当要删除一个节点的时候，要先删除它的子节点</span>      <span class="token function">recursivelyTraverseDeletionEffects</span><span class="token punctuation">(</span>finishedRoot<span class="token punctuation">,</span> nearestMountedAncestor<span class="token punctuation">,</span> deletedFiber<span class="token punctuation">)</span>      <span class="token comment">//再把自己删除</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hostParent <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">removeChild</span><span class="token punctuation">(</span>hostParent<span class="token punctuation">,</span> deletedFiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">break</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">break</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//递归遍历</span><span class="token keyword">function</span> <span class="token function">recursivelyTraverseDeletionEffects</span><span class="token punctuation">(</span><span class="token parameter">finishedRoot<span class="token punctuation">,</span> nearestMountedAncestor<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> child <span class="token operator">=</span> parent<span class="token punctuation">.</span>child  <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">commitDeletionEffectsOnFiber</span><span class="token punctuation">(</span>finishedRoot<span class="token punctuation">,</span> nearestMountedAncestor<span class="token punctuation">,</span> child<span class="token punctuation">)</span>    child <span class="token operator">=</span> child<span class="token punctuation">.</span>sibling  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src\react-dom-bindings\src\client\ReactDOMHostConfig.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token parameter">parentInstance<span class="token punctuation">,</span> child</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  parentInstance<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3、单节点-key-相同-类型不同"><a href="#3、单节点-key-相同-类型不同" class="headerlink" title="3、单节点 key 相同,类型不同"></a>3、单节点 key 相同,类型不同</h3><p><strong>核心删除包括当前 fiber 在内的所有的老 fiber</strong></p><p>main.jsx</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> number <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> key<span class="token operator">=</span><span class="token string">"title1"</span> id<span class="token operator">=</span><span class="token string">"title1"</span><span class="token operator">></span>      title1    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>p onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> key<span class="token operator">=</span><span class="token string">"title1"</span> id<span class="token operator">=</span><span class="token string">"title1"</span><span class="token operator">></span>      title1    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src\react-reconciler\src\ReactChildFiber.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * * @param &#123;*&#125; returnFiber 根fiber div#root对应的fiber * @param &#123;*&#125; currentFirstChild 老的FunctionComponent对应的fiber * @param &#123;*&#125; element 新的虚拟DOM对象 * @returns 返回新的第一个子fiber */</span><span class="token keyword">function</span> <span class="token function">reconcileSingleElement</span><span class="token punctuation">(</span><span class="token parameter">returnFiber<span class="token punctuation">,</span> currentFirstChild<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> key <span class="token operator">=</span> element<span class="token punctuation">.</span>key  <span class="token keyword">let</span> child <span class="token operator">=</span> currentFirstChild  <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>type <span class="token operator">===</span> element<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">deleteRemai·ningChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//删除从currentFirstChild之后所有的fiber节点</span><span class="token keyword">function</span> <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span><span class="token parameter">returnFiber<span class="token punctuation">,</span> currentFirstChild</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrackSideEffects<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">let</span> childToDelete <span class="token operator">=</span> currentFirstChild  <span class="token keyword">while</span> <span class="token punctuation">(</span>childToDelete <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> childToDelete<span class="token punctuation">)</span>    childToDelete <span class="token operator">=</span> childToDelete<span class="token punctuation">.</span>sibling  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">deleteChild</span><span class="token punctuation">(</span><span class="token parameter">returnFiber<span class="token punctuation">,</span> childToDelete</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrackSideEffects<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> deletions <span class="token operator">=</span> returnFiber<span class="token punctuation">.</span>deletions  <span class="token keyword">if</span> <span class="token punctuation">(</span>deletions <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    returnFiber<span class="token punctuation">.</span>deletions <span class="token operator">=</span> <span class="token punctuation">[</span>childToDelete<span class="token punctuation">]</span>    returnFiber<span class="token punctuation">.</span>flags <span class="token operator">|=</span> ChildDeletion  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    returnFiber<span class="token punctuation">.</span>deletions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childToDelete<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、原来多个节点，现在只有一个节点"><a href="#4、原来多个节点，现在只有一个节点" class="headerlink" title="4、原来多个节点，现在只有一个节点"></a>4、原来多个节点，现在只有一个节点</h3><p><strong>核心删除多余节点</strong></p><ul><li>没有老 fiber 直接返回全新的 fiber,如果有老 fiber，看 key 是否相同，key 不同删除当前 fiber 并查找下一个 fiber，key 相同类型不同,删除当前 fiber 在内的所有老 fiebr 并返回新的 fiber，如果类型相同复删除剩下的其他老 fiber 并复用老 fiber 返回</li></ul><p>main.jsx</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> number <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul key<span class="token operator">=</span><span class="token string">"container"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">></span><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"B"</span> id<span class="token operator">=</span><span class="token string">"B"</span><span class="token operator">></span>        <span class="token constant">B</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"C"</span><span class="token operator">></span><span class="token constant">C</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul key<span class="token operator">=</span><span class="token string">"container"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"B"</span> id<span class="token operator">=</span><span class="token string">"B2"</span><span class="token operator">></span>        <span class="token constant">B2</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src\react-reconciler\src\ReactChildFiber.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * * @param &#123;*&#125; returnFiber 根fiber div#root对应的fiber * @param &#123;*&#125; currentFirstChild 老的FunctionComponent对应的fiber * @param &#123;*&#125; element 新的虚拟DOM对象 * @returns 返回新的第一个子fiber */</span><span class="token keyword">function</span> <span class="token function">reconcileSingleElement</span><span class="token punctuation">(</span><span class="token parameter">returnFiber<span class="token punctuation">,</span> currentFirstChild<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//新的虚拟DOM的key,也就是唯一标准</span>  <span class="token keyword">debugger</span>  <span class="token keyword">const</span> key <span class="token operator">=</span> element<span class="token punctuation">.</span>key <span class="token comment">// null</span>  <span class="token keyword">let</span> child <span class="token operator">=</span> currentFirstChild <span class="token comment">//老的FunctionComponent对应的fiber</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>child <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//有老fiber</span>    <span class="token comment">//判断此老fiber对应的key和新的虚拟DOM对象的key是否一样 null===null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//判断老fiber对应的类型和新虚拟DOM元素对应的类型是否相同</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>type <span class="token operator">===</span> element<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// p div</span>        <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">.</span>sibling<span class="token punctuation">)</span>        <span class="token comment">//如果key一样，类型也一样，则认为此节点可以复用</span>        <span class="token keyword">const</span> existing <span class="token operator">=</span> <span class="token function">useFiber</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> element<span class="token punctuation">.</span>props<span class="token punctuation">)</span>        existing<span class="token punctuation">.</span>return <span class="token operator">=</span> returnFiber        <span class="token keyword">return</span> existing      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果找到一key一样老fiber,但是类型不一样，不能此老fiber,把剩下的全部删除</span>        <span class="token function">deleteRemainingChildren</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">deleteChild</span><span class="token punctuation">(</span>returnFiber<span class="token punctuation">,</span> child<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    child <span class="token operator">=</span> child<span class="token punctuation">.</span>sibling  <span class="token punctuation">&#125;</span>  <span class="token comment">//因为我们现实的初次挂载，老节点currentFirstChild肯定是没有的，所以可以直接根据虚拟DOM创建新的Fiber节点</span>  <span class="token keyword">const</span> created <span class="token operator">=</span> <span class="token function">createFiberFromElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>  created<span class="token punctuation">.</span>return <span class="token operator">=</span> returnFiber  <span class="token keyword">return</span> created<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多节点的-diff"><a href="#多节点的-diff" class="headerlink" title="多节点的 diff"></a>多节点的 diff</h2><ul><li>DOM DIFF 的三个规则<ul><li>只对同级元素进行比较，不同层级不对比</li><li>不同的类型对应不同的元素</li><li>可以通过 key 来标识同一个节点</li></ul></li><li>第 1 轮遍历<ul><li>如果 key 不同则直接结束本轮循环</li><li>newChildren 或 oldFiber 遍历完，结束本轮循环</li><li>key 相同而 type 不同，标记老的 oldFiber 为删除，继续循环</li><li>key 相同而 type 也相同，则可以复用老节 oldFiber 节点，继续循环</li></ul></li><li>第 2 轮遍历<ul><li>newChildren 遍历完而 oldFiber 还有，遍历剩下所有的 oldFiber 标记为删除，DIFF 结束</li><li>oldFiber 遍历完了，而 newChildren 还有，将剩下的 newChildren 标记为插入，DIFF 结束</li><li>newChildren 和 oldFiber 都同时遍历完成，diff 结束</li><li>newChildren 和 oldFiber 都没有完成，则进行<code>节点移动</code>的逻辑</li></ul></li><li>第 3 轮遍历<ul><li>处理节点移动的情况</li></ul></li></ul><h3 id="1、多个节点的数量和-key-相同，有的-type-不同"><a href="#1、多个节点的数量和-key-相同，有的-type-不同" class="headerlink" title="1、多个节点的数量和 key 相同，有的 type 不同"></a>1、多个节点的数量和 key 相同，有的 type 不同</h3><p><img src="https://raw.githubusercontent.com/ghx9908/image-hosting/master/img/20230220164902.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> number <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul key<span class="token operator">=</span><span class="token string">"container"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">></span><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"B"</span> id<span class="token operator">=</span><span class="token string">"B"</span><span class="token operator">></span>        <span class="token constant">B</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"C"</span> id<span class="token operator">=</span><span class="token string">"C"</span><span class="token operator">></span>        <span class="token constant">C</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul key<span class="token operator">=</span><span class="token string">"container"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">></span><span class="token constant">A2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>p key<span class="token operator">=</span><span class="token string">"B"</span> id<span class="token operator">=</span><span class="token string">"B2"</span><span class="token operator">></span>        <span class="token constant">B2</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"C"</span> id<span class="token operator">=</span><span class="token string">"C2"</span><span class="token operator">></span>        <span class="token constant">C2</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、多个节点的类型和-key-全部相同，有新增元素"><a href="#2、多个节点的类型和-key-全部相同，有新增元素" class="headerlink" title="2、多个节点的类型和 key 全部相同，有新增元素"></a>2、多个节点的类型和 key 全部相同，有新增元素</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> number <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul key<span class="token operator">=</span><span class="token string">"container"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">></span><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"B"</span> id<span class="token operator">=</span><span class="token string">"B"</span><span class="token operator">></span>        <span class="token constant">B</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"C"</span> id<span class="token operator">=</span><span class="token string">"C"</span><span class="token operator">></span>        <span class="token constant">C</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul key<span class="token operator">=</span><span class="token string">"container"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">></span><span class="token constant">A2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>p key<span class="token operator">=</span><span class="token string">"B"</span> id<span class="token operator">=</span><span class="token string">"B2"</span><span class="token operator">></span>        <span class="token constant">B2</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"C"</span> id<span class="token operator">=</span><span class="token string">"C2"</span><span class="token operator">></span>        <span class="token constant">C2</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"D"</span><span class="token operator">></span><span class="token constant">D</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-多个节点的类型和-key-全部相同，有删除老元素"><a href="#3-多个节点的类型和-key-全部相同，有删除老元素" class="headerlink" title="3.多个节点的类型和 key 全部相同，有删除老元素"></a>3.多个节点的类型和 key 全部相同，有删除老元素</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> number <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul key<span class="token operator">=</span><span class="token string">"container"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">></span><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"B"</span> id<span class="token operator">=</span><span class="token string">"B"</span><span class="token operator">></span>        <span class="token constant">B</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"C"</span> id<span class="token operator">=</span><span class="token string">"C"</span><span class="token operator">></span>        <span class="token constant">C</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul key<span class="token operator">=</span><span class="token string">"container"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">></span><span class="token constant">A2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>p key<span class="token operator">=</span><span class="token string">"B"</span> id<span class="token operator">=</span><span class="token string">"B2"</span><span class="token operator">></span>        <span class="token constant">B2</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-多个节点数量不同、key-不同"><a href="#4-多个节点数量不同、key-不同" class="headerlink" title="4.多个节点数量不同、key 不同"></a>4.多个节点数量不同、key 不同</h3><ul><li>多个节点数量不同、key 不同</li><li>第一轮比较 A 和 A，相同可以复用，更新，然后比较 B 和 C，key 不同直接跳出第一个循环</li><li>把剩下 oldFiber 的放入 existingChildren 这个 map 中</li><li>然后声明一个<code>lastPlacedIndex</code>变量，表示不需要移动的老节点的索引</li><li>继续循环剩下的虚拟 DOM 节点</li><li>如果能在 map 中找到相同 key 相同 type 的节点则可以复用老 fiber,并把此老 fiber 从 map 中删除</li><li>如果能在 map 中找不到相同 key 相同 type 的节点则创建新的 fiber</li><li>如果是复用老的 fiber,则判断老 fiber 的索引是否小于 lastPlacedIndex，如果是要移动老 fiber，不变</li><li>如果是复用老的 fiber,则判断老 fiber 的索引是否小于 lastPlacedIndex，如果否则更新 lastPlacedIndex 为老 fiber 的 index</li><li>把所有的 map 中剩下的 fiber 全部标记为删除</li><li>(删除#li#F)=&gt;(添加#li#B)=&gt;(添加#li#G)=&gt;(添加#li#D)=&gt;null</li></ul><p><img src="https://raw.githubusercontent.com/ghx9908/image-hosting/master/img/20230220164329.png"></p><p><img src="C:\Users\哗啦啦\AppData\Roaming\Typora\typora-user-images\image-20230220164410416.png" alt="image-20230220164410416"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> number <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul key<span class="token operator">=</span><span class="token string">"container"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">></span><span class="token constant">A</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"B"</span> id<span class="token operator">=</span><span class="token string">"b"</span><span class="token operator">></span>        <span class="token constant">B</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"C"</span><span class="token operator">></span><span class="token constant">C</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"D"</span><span class="token operator">></span><span class="token constant">D</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"E"</span><span class="token operator">></span><span class="token constant">E</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"F"</span> id<span class="token operator">=</span><span class="token string">"F"</span><span class="token operator">></span>        <span class="token constant">F</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul key<span class="token operator">=</span><span class="token string">"container"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">></span><span class="token constant">A2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"C"</span><span class="token operator">></span><span class="token constant">C2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"E"</span><span class="token operator">></span><span class="token constant">E2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"B"</span> id<span class="token operator">=</span><span class="token string">"b2"</span><span class="token operator">></span>        <span class="token constant">B2</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"G"</span><span class="token operator">></span><span class="token constant">G</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"D"</span><span class="token operator">></span><span class="token constant">D2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的性能优化有哪些</title>
      <link href="/2024/05/11/vue-zhong-de-xing-neng-you-hua-you-na-xie/"/>
      <url>/2024/05/11/vue-zhong-de-xing-neng-you-hua-you-na-xie/</url>
      
        <content type="html"><![CDATA[<ul><li>Vue2 中数据层级不易过深，（会数据劫持每一层都增加getter和setter）.合理设置响应式数据；</li><li>Vue2 非响应式数据可以通过 Object.freeze()方法冻结属性；</li><li>Vue2 中采用函数式组件 -&gt; 函数式组件开销低；</li><li>使用数据时缓存值的结果，不频繁取值；</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  a<span class="token punctuation">.</span>b<span class="token operator">+=</span>i<span class="token punctuation">&#125;</span><span class="token comment">//每次都触发取值getter操作 依赖收集等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>合理设置 Key 属性；</li><li><code>v-show</code> 和 <code>v-if</code> 的选取；</li><li>控制组件粒度 -&gt; Vue 采用组件级更新；不然数据一变 真个组件更新</li><li>采用异步组件 -&gt; 借助构建工具的分包的能力；</li><li>合理使用<code>keep-alive</code> 、<code>v-once</code>、<code>v-memo</code> 进行逻辑优化；</li><li>分页、虚拟滚动、时间分片等策略…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数组件的优势</title>
      <link href="/2024/05/11/han-shu-zu-jian-de-you-shi/"/>
      <url>/2024/05/11/han-shu-zu-jian-de-you-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>函数式组件是一种定义<strong>自身没有任何状态的组件的方式。它们很像纯函数：接收 props，返回 vnodes</strong>。函数式组件在渲染过程中不会创建组件实例 (也就是说，没有 this)，也不会触发常规的组件生命周期钩子。</p></blockquote><p>在 Vue2 正常组件是通过<code>Vue.extend</code>方法进行创建， 函数式组件就是普通的函数，没有 new 的过程。最终就是将返回的虚拟 DOM 变成真实 DOM 替换对应的组件，同时函数式组件不会被记录在组件的父子关系中。</p><p><strong>因此在 Vue2 中函数式组件有以下优势：</strong></p><ul><li><strong>性能优化：</strong> 函数式组件相对于常规组件在渲染性能上具有优势。由于函数式组件是无状态的，不包含生命周期钩子和实例状态，渲染时的开销更小。</li><li><strong>没有 this</strong> ： 函数式组件不依赖于 this，不再有 this 绑定问题。</li><li><strong>可读性和维护性：</strong> 函数式组件更加简洁和直观。只是一个函数，没有复杂的选项对象和实例属性。这使得代码更易于阅读和维护。</li><li><strong>易测试：</strong> 由于函数式组件是纯函数，因此更容易编写单元测试。</li></ul><blockquote><p><strong>但在 Vue3 中因为所有的组件都不用 <code>new</code> 了，本身就是函数实现的，所以在性能上没有了优势，所以不在建议使用函数组件</strong>~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.set方法是如何实现的</title>
      <link href="/2024/03/28/vue-set-fang-fa-shi-ru-he-shi-xian-de/"/>
      <url>/2024/03/28/vue-set-fang-fa-shi-ru-he-shi-xian-de/</url>
      
        <content type="html"><![CDATA[<p><code>Vue2</code> 不允许在已经创建的实例上动态添加新的响应式属性。所以采用 set API 来进行实现。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span>targetx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 1.是开发环境 target 没定义或者是基础类型则报错</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">"production"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Cannot set reactive property on undefined, null, or primitive value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>target<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 2.如果是数组 Vue.set(array,1,100); 调用我们重写的splice方法 (这样可以更新视图)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidArrayIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    target<span class="token punctuation">.</span>length <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>length<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    target<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token keyword">return</span> val  <span class="token punctuation">&#125;</span>  <span class="token comment">// 3.如果是对象本身的属性，则直接添加即可</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> target <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token keyword">return</span> val  <span class="token punctuation">&#125;</span>  <span class="token comment">// 4.如果是Vue实例 或 根数据data时 报错,（更新_data 无意义）</span>  <span class="token keyword">const</span> ob <span class="token operator">=</span> target<span class="token punctuation">.</span>__ob__  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>_isVue <span class="token operator">||</span> <span class="token punctuation">(</span>ob <span class="token operator">&amp;&amp;</span> ob<span class="token punctuation">.</span>vmCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">"production"</span> <span class="token operator">&amp;&amp;</span>      <span class="token function">warn</span><span class="token punctuation">(</span>        <span class="token string">"Avoid adding reactive properties to a Vue instance or its root $data "</span> <span class="token operator">+</span>          <span class="token string">"at runtime - declare it upfront in the data option."</span>      <span class="token punctuation">)</span>    <span class="token keyword">return</span> val  <span class="token punctuation">&#125;</span>  <span class="token comment">// 5.如果不是响应式的也不需要将其定义成响应式属性</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ob<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token keyword">return</span> val  <span class="token punctuation">&#125;</span>  <span class="token comment">// 6.将属性定义成响应式的</span>  <span class="token function">defineReactive</span><span class="token punctuation">(</span>ob<span class="token punctuation">.</span>value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  <span class="token comment">// 通知视图更新</span>  ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> val<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当我们选择新增属性时，可以考虑使用对象合并的方式实现</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>info<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">&#123;</span><span class="token literal-property property">newProperty1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">newProperty2</span><span class="token operator">:</span><span class="token number">2</span> <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>Vue3</code> 则采用 proxy 来进行数据劫持，可以直接劫持到属性新增的逻辑，无需采用补丁的方式来进行实现。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件中的data为什么必须是函数</title>
      <link href="/2024/03/28/vue-zu-jian-zhong-de-data-wei-shi-me-bi-xu-shi-han-shu/"/>
      <url>/2024/03/28/vue-zu-jian-zhong-de-data-wei-shi-me-bi-xu-shi-han-shu/</url>
      
        <content type="html"><![CDATA[<ul><li>根实例对象<code>data</code>可以是对象也可以是函数“单例”，不会产生数据污染情况</li><li>组件实例对象<code>data</code>必须为函数，目的是为了防止多个组件实例对象之间共用一个<code>data</code>，产生数据污染。所以需要通过工厂函数返回全新的 data 作为组件的数据源</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Vue<span class="token punctuation">.</span><span class="token function-variable function">extend</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 会将data存起来</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>options<span class="token punctuation">.</span>data  <span class="token punctuation">&#125;</span>  Sub<span class="token punctuation">.</span>options <span class="token operator">=</span> options  <span class="token keyword">return</span> Sub<span class="token punctuation">&#125;</span><span class="token keyword">let</span> Child <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"xxx"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 两个组件就是两个实例, 希望数据互不干扰</span><span class="token keyword">let</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child1<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span>child1<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"jw"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Vue3 一切从组件开始，所以 data 都为函数形式。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.extend方法的作用</title>
      <link href="/2024/03/28/vue-extend-fang-fa-de-zuo-yong/"/>
      <url>/2024/03/28/vue-extend-fang-fa-de-zuo-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-Vue-extend-概念"><a href="#1-1-Vue-extend-概念" class="headerlink" title="1.1 Vue.extend 概念"></a>1.1 Vue.extend 概念</h2><p>使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</p><p><code>data</code> 选项是特例，需要注意 - 在 <code>Vue.extend()</code> 中它必须是函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Profile <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"&lt;p>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p>"</span><span class="token punctuation">,</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">"Walter"</span><span class="token punctuation">,</span>      <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">"White"</span><span class="token punctuation">,</span>      <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token string">"Heisenberg"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 Profile 实例，并挂载到一个元素上。</span><span class="token keyword">new</span> <span class="token class-name">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#mount-point"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-分析"><a href="#1-2-分析" class="headerlink" title="1.2 分析"></a>1.2 分析</h2><ul><li>所有的组件创建时都会调用<code>Vue.extend</code>方法进行创建</li><li>有了此方法我们可以用于手动挂载组件。</li><li>后端存储的字符串模板我们可以通过 Vue.extend 方法将其进行渲染，但是需要引入编译时。</li></ul><h2 id="1-3-Vue3-中手动挂载"><a href="#1-3-Vue3-中手动挂载" class="headerlink" title="1.3 Vue3 中手动挂载"></a>1.3 Vue3 中手动挂载</h2><blockquote><p>Vue3 中不在使用 <code>Vue.extend</code> 方法，而是采用<code>render</code>方法进行手动渲染。</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> render<span class="token punctuation">,</span> h<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./vue.esm-browser.js"</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div id="counter">&#123;&#123; count &#125;&#125;&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说说你对双向绑定的理解,以及它的实现原理吗</title>
      <link href="/2024/03/27/shuo-shuo-ni-dui-shuang-xiang-bang-ding-de-li-jie-yi-ji-ta-de-shi-xian-yuan-li-ma/"/>
      <url>/2024/03/27/shuo-shuo-ni-dui-shuang-xiang-bang-ding-de-li-jie-yi-ji-ta-de-shi-xian-yuan-li-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-双向绑定的概念"><a href="#1-1-双向绑定的概念" class="headerlink" title="1.1 双向绑定的概念"></a>1.1 双向绑定的概念</h2><p>vue 中双向绑定靠的是指令 v-model，可以绑定一个动态值到视图上，同时修改视图能改变数据对应的值（能修改的视图就是<strong>表单组件</strong>） 经常会听到一句话：v-model 是 value + input 的语法糖。</p><p><code>v-model</code> 指令扩展为 <code>modelValue</code> 和 <code>onUpdate:modelValue</code> 在模板编译过程中，我们必须自己提供这些 props：</p><h2 id="1-2-表单元素中的-v-model"><a href="#1-2-表单元素中的-v-model" class="headerlink" title="1.2 表单元素中的 v-model"></a>1.2 表单元素中的 v-model</h2><p>内部会根据标签的不同解析出不同的语法。并且这里有“额外”的处理逻辑</p><ul><li>例如 文本框会被解析成 value + input 事件 (同时处理中文输入问题)</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;input :value&#x3D;&quot;value&quot; @input&#x3D;&quot;(e) &#x3D;&gt; (value &#x3D; e.target.value)&quot; &#x2F;&gt;&#x2F;&#x2F; 输入中午还没到屏幕也是响应式的&lt;input v-model&#x3D;&quot;value&quot; &#x2F;&gt;&#x2F;&#x2F;底层做过处理 对中文进行拦截<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例如 复选框会被解析成 checked + change 事件</li><li>…</li></ul><p><a href="https://github1s.com/vuejs/core/blob/HEAD/packages/runtime-dom/src/directives/vModel.ts#L45-L46">v-model</a></p><h2 id="1-3-组件中的-v-model"><a href="#1-3-组件中的-v-model" class="headerlink" title="1.3 组件中的 v-model"></a>1.3 组件中的 v-model</h2><p>很遗憾在 vue2 中不支持使用多个 v-model 的 （使用过时的<code>.sync</code>语法）。vue3 中可以通过以下方法进行绑定。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;my v-model:a&#x3D;&quot;a&quot; v-model:b&#x3D;&quot;b&quot; v-model:c&#x3D;&quot;c&quot;&gt;&lt;&#x2F;my&gt;&lt;my v-model&#x3D;&quot;value&quot;&gt;&lt;&#x2F;my&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.use是干什么的</title>
      <link href="/2024/03/27/vue-use-shi-gan-shi-me-de/"/>
      <url>/2024/03/27/vue-use-shi-gan-shi-me-de/</url>
      
        <content type="html"><![CDATA[<h2 id="1-use-概念"><a href="#1-use-概念" class="headerlink" title=".1 use 概念"></a>.1 use 概念</h2><p>安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将 Vue 作为参数传入,这样插件中就不在需要依赖 Vue 了。(扩展应用的功能)</p><h2 id="1-2-插件的功能"><a href="#1-2-插件的功能" class="headerlink" title="1.2 插件的功能"></a>1.2 插件的功能</h2><ul><li>添加全局指令、全局过滤器(Vue3 不再支持过滤器)、全局组件。</li><li>通过全局混入来添加一些组件选项。</li><li>添加实例方法，通过把它们添加到 <code>Vue.prototype</code> / <code>app.config.globalProperties</code>上实现。</li></ul><h2 id="1-3-实现原理"><a href="#1-3-实现原理" class="headerlink" title="1.3 实现原理"></a>1.3 实现原理</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function-variable function">use</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">plugin</span><span class="token operator">:</span> Function <span class="token operator">|</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 插件缓存</span>  <span class="token keyword">const</span> installedPlugins <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_installedPlugins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>installedPlugins<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果已经有插件 直接返回</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// additional parameters</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 除了第一项其他的参数整合成数组</span>  args<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 将Vue 放入到数组中</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin<span class="token punctuation">.</span>install <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 调用install方法</span>    plugin<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>plugin<span class="token punctuation">,</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> plugin <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 直接调用方法</span>    <span class="token function">plugin</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  installedPlugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span> <span class="token comment">// 缓存插件</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Vue3 中使用<a href="https://github1s.com/vuejs/core/blob/main/packages/runtime-core/src/apiCreateApp.ts#L256-L257">app.use</a>进行插件的注册，原理同 Vue2~</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">plugin</span><span class="token operator">:</span> Plugin<span class="token punctuation">,</span> <span class="token operator">...</span>options<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>installedPlugins<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      __DEV__ <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Plugin has already been applied to target app.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>plugin <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>plugin<span class="token punctuation">.</span>install<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      installedPlugins<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span>      plugin<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token operator">...</span>options<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      installedPlugins<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span>      <span class="token function">plugin</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token operator">...</span>options<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A plugin must either be a function or an object with an "install" </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">function.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> app  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.mixin的使用场景和原理</title>
      <link href="/2024/03/27/vue-mixin-de-shi-yong-chang-jing-he-yuan-li/"/>
      <url>/2024/03/27/vue-mixin-de-shi-yong-chang-jing-he-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-Vue-mixin-概念"><a href="#1-1-Vue-mixin-概念" class="headerlink" title="1.1 Vue.mixin 概念"></a>1.1 Vue.mixin 概念</h2><p>mixin 可以用来扩展组件，将公共逻辑进行抽离。在需要该逻辑时进行“混入”，采用策略模式针对不同的属性进行合并。如果混入的数据和本身组件中的数据冲突，会采用“就近原则”以组件的数据为准。</p><blockquote><p>mixin 中有很多缺陷 “命名冲突问题”、”数据来源问题”，Vue3 采用 CompositionAPI 提取公共逻辑非常方便。</p></blockquote><p><strong>mixins 在 Vue 3 支持主要是为了向后兼容，因为生态中有许多库使用到。在新的应用中应尽量避免使用 mixin，特别是全局 mixin。</strong></p><h2 id="1-2-混入方式"><a href="#1-2-混入方式" class="headerlink" title="1.2 混入方式"></a>1.2 混入方式</h2><p>在<code>Vue</code>中我们可以<strong>局部混入</strong>跟<strong>全局混入</strong>。一般情况下全局混入用于编写插件。局部混入用于复用逻辑。</p><p><a href="https://github.com/vuejs/vue-router/blob/dev/src/install.js#L21">vue-router</a><a href="https://github.com/vuejs/vuex/blob/3.x/src/store.js#L549">vuex</a></p><h2 id="1-3-mixin-合并策略"><a href="#1-3-mixin-合并策略" class="headerlink" title="1.3 mixin 合并策略"></a>1.3 mixin 合并策略</h2><p>核心就是：对象的合并处理。</p><ul><li>props、methods、inject、computed 同名时会被替换</li><li>data 会被合并</li><li>生命周期和 watch 方法 会被合并成队列</li><li>components、directives、filters 会在原型链上叠加</li></ul><blockquote><p>组件的扩展除了 mixin 之外还有一个属性叫 extends，但是不怎么常用~~~。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说是vue的声明周期</title>
      <link href="/2024/03/26/shuo-shi-vue-de-sheng-ming-zhou-qi/"/>
      <url>/2024/03/26/shuo-shi-vue-de-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-Vue2-中的生命周期"><a href="#1-1-Vue2-中的生命周期" class="headerlink" title="1.1 Vue2 中的生命周期"></a>1.1 Vue2 中的生命周期</h2><p>主要的生命周期有：创建前后, 挂载前后, 更新前后, 销毁前后</p><ul><li>beforeCreate 初始化父子关系及事件，数据观测(data observer) 之前被调用。用此方法一般编写插件的时候会用到。</li><li>created 实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法等， 但是这里没有$el，一般也不咋用。</li><li>beforeMount 在挂载开始之前被调用：相关的 render 函数首次被调用。</li><li>mounted el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。可以用于获取 DOM 元素</li><li>beforeUpdate 数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。此时修改数据不会再次出发更新方法</li><li>updated 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li><li>beforeDestroy 实例销毁之前调用。在这一步，实例仍然完全可用。</li><li>destroyed Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</li><li>keep-alive (activated 和 deactivated)</li></ul><h2 id="1-2-V2-和-V3-中的生命周期对比"><a href="#1-2-V2-和-V3-中的生命周期对比" class="headerlink" title="1.2 V2 和 V3 中的生命周期对比"></a>1.2 V2 和 V3 中的生命周期对比</h2><p><a href="https://v2.cn.vuejs.org/images/lifecycle.png">Vue2 生命周期</a><a href="https://cn.vuejs.org/guide/essentials/lifecycle.html#lifecycle-diagram">Vue3 生命周期</a></p><table><thead><tr><th align="left">生命周期 v2</th><th align="left">生命周期 v3</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">beforeCreate</td><td align="left">beforeCreate</td><td align="left">组件实例被创建之初</td></tr><tr><td align="left">created</td><td align="left">created</td><td align="left">组件实例已经完全创建</td></tr><tr><td align="left">beforeMount</td><td align="left">beforeMount</td><td align="left">组件挂载之前</td></tr><tr><td align="left">mounted</td><td align="left">mounted</td><td align="left">组件挂载到实例上去之后</td></tr><tr><td align="left">beforeUpdate</td><td align="left">beforeUpdate</td><td align="left">组件数据发生变化，更新之前</td></tr><tr><td align="left">updated</td><td align="left">updated</td><td align="left">数据数据更新之后</td></tr><tr><td align="left">beforeDestroy</td><td align="left"><strong>beforeUnmount</strong></td><td align="left">组件实例销毁之前</td></tr><tr><td align="left">destroyed</td><td align="left"><strong>unmounted</strong></td><td align="left">组件实例销毁之后</td></tr><tr><td align="left">activated</td><td align="left">activated</td><td align="left">keep-alive 缓存的组件激活时</td></tr><tr><td align="left">deactivated</td><td align="left">deactivated</td><td align="left">keep-alive 缓存的组件停用时调用</td></tr><tr><td align="left">errorCaptured</td><td align="left">errorCaptured</td><td align="left">捕获一个来自子孙组件的错误时被调用</td></tr><tr><td align="left">-</td><td align="left"><strong>renderTracked Dev</strong></td><td align="left">调试钩子，响应式依赖被收集时调用</td></tr><tr><td align="left">-</td><td align="left"><strong>renderTriggered Dev</strong></td><td align="left">调试钩子，响应式依赖被触发时调用</td></tr><tr><td align="left">-</td><td align="left"><strong>serverPrefetch</strong></td><td align="left">ssr only，组件实例在服务器上被渲染前调用</td></tr></tbody></table><blockquote><p>Vue3 中新增了，组合式 API：生命周期钩子，但是不存在 onBeforeCreate 和 onCreated 钩子</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-once的使用场景有哪些</title>
      <link href="/2024/03/25/v-once-de-shi-yong-chang-jing-you-na-xie/"/>
      <url>/2024/03/25/v-once-de-shi-yong-chang-jing-you-na-xie/</url>
      
        <content type="html"><![CDATA[<ul><li>v-once 是 Vue 中内置指令，只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。<br><strong>核心实现原理是利用缓存</strong></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 单个元素 --&gt;&lt;span v-once&gt;This will never change: &#123;&#123;msg&#125;&#125;&lt;&#x2F;span&gt;&lt;!-- 有子元素 --&gt;&lt;div v-once&gt;  &lt;h1&gt;comment&lt;&#x2F;h1&gt;  &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;!-- 组件 --&gt;&lt;my-component v-once :comment&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;my-component&gt;&lt;!-- &#96;v-for&#96; 指令--&gt;&lt;ul&gt;  &lt;li v-for&#x3D;&quot;i in list&quot; v-once&gt;&#123;&#123;i&#125;&#125;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>vue3.2 之后，增加了 v-memo 指令，通过依赖列表的方式控制页面渲染。</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div&gt;  &lt;div v-memo&#x3D;&quot;[valueA,valueB]&quot;&gt;    &lt;div class&#x3D;&quot;box&quot; v-for&#x3D;&quot;item in arr&quot; :key&#x3D;&quot;item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-if和v-for哪个优先级更高</title>
      <link href="/2024/03/25/v-if-he-v-for-na-ge-you-xian-ji-geng-gao/"/>
      <url>/2024/03/25/v-if-he-v-for-na-ge-you-xian-ji-geng-gao/</url>
      
        <content type="html"><![CDATA[<ul><li><p>同时使用 v-if 和 v-for 是不推荐的，因为这样二者的优先级不明显。</p></li><li><p>在 Vue3 中 v-if 的优先级高于 v-for，这意味着 v-if 的条件将无法访问到 v-for 作用域内定义的变量别名：</p></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 这会抛出一个错误，因为属性 todo 此时 没有在该实例上定义--&gt;&lt;li v-for&#x3D;&quot;todo in todos&quot; v-if&#x3D;&quot;!todo.isComplete&quot;&gt;  &#123;&#123; todo.name &#125;&#125;&lt;&#x2F;li&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在外新包装一层 <template> 再在其上使用 v-for 可以解决这个问题 (这也更加明显易读)：<br>防止循环可以采取计算属性，或者使用 v-for 循环时，使用计算属性或方法来过滤数据。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template v-for&#x3D;&quot;todo in todos&quot;&gt;  &lt;li v-if&#x3D;&quot;!todo.isComplete&quot;&gt;    &#123;&#123; todo.name &#125;&#125;  &lt;&#x2F;li&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 Vue2 中解析时，先解析 v-for 在解析 v-if。会导致先循环后在对每一项进行判断，浪费性能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的v-show和v-if怎么理解</title>
      <link href="/2024/03/25/vue-zhong-de-v-show-he-v-if-zen-me-li-jie/"/>
      <url>/2024/03/25/vue-zhong-de-v-show-he-v-if-zen-me-li-jie/</url>
      
        <content type="html"><![CDATA[<ul><li><p>v-if 是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建。</p></li><li><p>v-if 也是惰性的：(可以阻断内部代码是否执行),如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染。</p></li><li><p>相比之下，v-show 简单许多，元素无论初始条件如何，始终会被渲染，只有 CSS display 属性会被切换。</p></li><li><p>总的来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。</p><ul><li>如果需要频繁切换，则使用 v-show 较好；</li><li>如果在运行时绑定条件很少改变，则 v-if 会更合适。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何看待CompositionAPI和OptionsAPI</title>
      <link href="/2024/03/25/ru-he-kan-dai-compositionapi-he-optionsapi/"/>
      <url>/2024/03/25/ru-he-kan-dai-compositionapi-he-optionsapi/</url>
      
        <content type="html"><![CDATA[<ul><li>在 Vue2 中采用的是 OptionsAPI, 用户提供的 data,props,methods,computed,watch 等属性 (用户编写复杂业务逻辑会出现反复横跳问题)</li><li>Vue2 中所有的属性都是通过<code>this</code>访问，<code>this</code>存在指向明确问题</li><li>Vue2 中很多未使用方法或属性依旧会被打包，并且所有全局 API 都在 Vue 对象上公开。Composition API 对 tree-shaking 更加友好，代码也更容易压缩。</li><li>组件逻辑共享问题， Vue2 采用 mixins 实现组件之间的逻辑共享； 但是会有数据来源不明确，命名冲突等问题。 Vue3 采用 CompositionAPI 提取公共逻辑非常方便</li></ul><blockquote><p>将同一个逻辑的相关代码收集在一起，并且可复用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3对⽐Vue2的变化</title>
      <link href="/2024/03/25/vue3-dui-vue2-de-bian-hua/"/>
      <url>/2024/03/25/vue3-dui-vue2-de-bian-hua/</url>
      
        <content type="html"><![CDATA[<ul><li>性能优化（更快）：<ul><li>使用了<strong>Proxy</strong>替代 Object.defineProperty 实现响应式。（为什么？defineProperty 需要对属性进行递归重写添加<code>getter</code>及<code>setter</code> <strong>性能差</strong>，同时新增属性和删除属性时无法监控变化，需要$set、$delete 方法。此方法对数组劫持性能差，同时不支持 map 和 set 的数据结构。）</li><li>模板编译优化。给动态节点增添 PatchFlag 标记；对静态节点进行静态提升；对事件进行缓存处理等。</li><li>Diff 算法优化，全量 diff 算法中采用最长递增子序列减少节点的移动。在非全量 diff 算法中只比较动态节点，通过 PatchFlag 标记更新动态的部分。</li></ul></li><li>体积优化（更小）:<ul><li>Vue3 移除了不常用的 API<ul><li>移除 inline-template (Vue2 中就不推荐使用)</li><li>$on、$off、$once （如果有需要可以采用 mitt 库来实现）</li><li>删除过滤器 （可以通过计算属性或者方法来实现）</li><li>$children移除 （可以通过provide，inject方法构建$children）</li><li>移除<code>.sync</code> <code>.native</code>)修饰符 (<code>.sync</code>通过 <code>v-model:xxx</code>实现，<code>.native</code>为 Vue3 中的默认行为) 以及不在支持 keycode 作为<code>v-on</code>修饰符（@keyup.13 不在支持）</li><li>移除全局 API。Vue.component、Vue.use、Vue.directive (将这些 api 挂载到实例上)</li></ul></li><li>通过构建工具 Tree-shaking 机制实现按需引入，减少用户打包后体积。</li></ul></li><li>支持自定义渲染器：<ul><li>用户可以自定义渲染 API 达到跨平台的目的。扩展能力更强，无需改造 Vue 源码。</li></ul></li><li>TypeScript 支持：<ul><li>Vue3 源码采用 Typescript 来进行重写 , 对 Ts 的支持更加友好。</li></ul></li><li>源码结构变化：<ul><li>Vue3 源码采用 monorepo 方式进行管理，将模块拆分到 package 目录中，解耦后可单独使用。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你知道哪些Vue3新特性</title>
      <link href="/2024/03/25/ni-zhi-dao-na-xie-vue3-xin-te-xing/"/>
      <url>/2024/03/25/ni-zhi-dao-na-xie-vue3-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Composition API</p><ul><li>使用函数的方式编写 vue 组件。</li><li>组合式 API (响应式 API <code>ref()、reactive()</code>，生命周期钩子<code>onMounted()、onUnmounted()</code>，依赖注入<code>inject()、provide()</code>)</li><li>组合式 API 并不是函数式编程。</li></ul><blockquote><p>虽然这套 API 的风格是基于函数的组合，但<strong>组合式 API 并不是函数式编程</strong>。组合式 API 是以 Vue 中数据可变的、细粒度的响应性系统为基础的，而<strong>函数式编程通常强调数据不可变。</strong></p></blockquote></li><li><p><code>&lt;script setup&gt; </code>是在单文件组件 (SFC) 中使用组合式 API 的编译时语法糖。</p><ul><li>让代码更简洁，性能更好（不需要借助代理对象）。</li></ul></li><li><p>Teleport</p><ul><li><p>类似于 React 中的 Portal 传送门组件，指定将组件渲染到某个容器中。</p></li><li><p>经常用于处理弹窗组件和模态框组件。</p></li></ul></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;button @click&#x3D;&quot;open &#x3D; true&quot;&gt;打开模态框&lt;&#x2F;button&gt;&lt;Teleport to&#x3D;&quot;body&quot;&gt;  &lt;div v-if&#x3D;&quot;open&quot; class&#x3D;&quot;modal&quot;&gt;    &lt;button @click&#x3D;&quot;open &#x3D; false&quot;&gt;关闭&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;Teleport&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Fragments</p><ul><li>Fragment（片段）Vue3 中允许组件中包含多个节点。无需引入额外的 DOM 元素。</li></ul></li><li><p>Emits Component Option</p><ul><li>Vue3 中默认绑定的事件会被绑定到根元素上。通过 Emits 属性可将事件从<code>attrs</code> 中移除。</li></ul></li><li><p>createRenderer API from @vue/runtime-core to create custom renderers</p><ul><li>提供自定义渲染器，可以在非 DOM 环境中使用 Vue 的运行时。</li></ul></li><li><p><a href="https://cn.vuejs.org/api/sfc-css-features.html#v-bind-in-css">单文件组件中的状态驱动的 CSS 变量 (``中的<code>v-bind</code>)</a></p><ul><li><p>在 css 中使用 v-bind 绑定样式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">background</span><span class="token operator">:</span> v <span class="token operator">-</span> <span class="token function">bind</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0023-scoped-styles-changes.md">SFC <code> &lt;style scoped&gt;</code> 新增全局规则和针对插槽内容的规则</a></p><ul><li><p>在作用域样式中可以包含全局规则或只针对插槽内容的规则</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 跨组件修改组件内样式 */</span><span class="token selector">.parent :deep(h1)</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 控制全局样式 */</span><span class="token selector">:global(.root)</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 控制插槽内容的样式 */</span><span class="token selector">:slotted(.child)</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Suspense experimental</p><ul><li>主要的作用优雅地处理异步组件的加载状态</li></ul></li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;Suspense&gt;    &lt;template #default&gt;        &lt;!-- 可以配合async setup使用 --&gt;        &lt;AsyncComponent&gt;&lt;&#x2F;AsyncComponent&gt;    &lt;&#x2F;template&gt;    &lt;template #fallback&gt;        正在加载异步组件...    &lt;&#x2F;template&gt;&lt;&#x2F;Suspense&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈Vue3中模板编译做了哪些优化</title>
      <link href="/2024/03/25/tan-tan-vue3-zhong-mo-ban-bian-yi-zuo-liao-na-xie-you-hua/"/>
      <url>/2024/03/25/tan-tan-vue3-zhong-mo-ban-bian-yi-zuo-liao-na-xie-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-PatchFlags-优化"><a href="#1-1-PatchFlags-优化" class="headerlink" title="1.1 PatchFlags 优化"></a>1.1 PatchFlags 优化</h2><p>Diff 算法无法避免新旧虚拟 DOM 中无用的比较操作，通过 patchFlags 来标记动态内容，可以实现快速 diff 算法</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div&gt;  &lt;h1 a&#x3D;&#39;a&#39; :b&#x3D;&quot;b&quot;&gt;Hello&lt;&#x2F;h1&gt;  &lt;span&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>        <span class="token string">"h1"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>          <span class="token literal-property property">b</span><span class="token operator">:</span> _ctx<span class="token punctuation">.</span>b<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"Hello"</span><span class="token punctuation">,</span>        <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建虚拟节点"><a href="#创建虚拟节点" class="headerlink" title="创建虚拟节点"></a>创建虚拟节点</h3><blockquote><p>生成的虚拟 DOM 是：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span>    <span class="token literal-property property">__v_isVNode</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>       <span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> …<span class="token punctuation">&#125;</span>       <span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> …<span class="token punctuation">&#125;</span>   <span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> …<span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">dynamicChildren</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> _ctx<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token literal-property property">patchFlag</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>此时生成的虚拟节点多出一个 dynamicChildren 属性。这个就是 block 的作用，block 可以收集所有后代动态节点。这样后续更新时可以直接跳过静态节点，实现靶向更新</p></blockquote><h3 id="动态标识"><a href="#动态标识" class="headerlink" title="动态标识"></a>动态标识</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> PatchFlags <span class="token punctuation">&#123;</span>  <span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 动态文本节点</span>  <span class="token constant">CLASS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 动态class</span>  <span class="token constant">STYLE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 动态style</span>  <span class="token constant">PROPS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment">// 除了class\style动态属性</span>  <span class="token constant">FULL_PROPS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">// 有key，需要完整diff</span>  <span class="token constant">HYDRATE_EVENTS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 挂载过事件的</span>  <span class="token constant">STABLE_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// 稳定序列，子节点顺序不会发生变化</span>  <span class="token constant">KEYED_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token comment">// 子节点有key的fragment</span>  <span class="token constant">UNKEYED_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token comment">// 子节点没有key的fragment</span>  <span class="token constant">NEED_PATCH</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token comment">// 进行非props比较, ref比较</span>  <span class="token constant">DYNAMIC_SLOTS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 动态插槽</span>  <span class="token constant">DEV_ROOT_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token constant">HOISTED</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 表示静态节点，内容变化，不比较儿子</span>  <span class="token constant">BAIL</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token comment">// 表示diff算法应该结束</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-BlockTree"><a href="#1-2-BlockTree" class="headerlink" title="1.2 BlockTree"></a>1.2 BlockTree</h2><p>为什么我们还要提出 blockTree 的概念？ 只有 block 不就挺好的么？ 问题出在 block 在收集动态节点时是忽略虚拟 DOM 树层级的。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;a&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;a&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里我们知道默认根节点是一个 block 节点，如果要是按照之前的套路来搞，这时候切换 flag 的状态将无法从 p 标签切换到 div 标签。 <strong>解决方案：就是将不稳定的结构也作为 block 来进行处理</strong></p></blockquote><h3 id="不稳定结构"><a href="#不稳定结构" class="headerlink" title="不稳定结构"></a>不稳定结构</h3><p>所谓的不稳结构就是 DOM 树的结构可能会发生变化。不稳定结构有哪些呢？ （v-if/v-for/Fragment）</p><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;a&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;a&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后的结果:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      _ctx<span class="token punctuation">.</span>flag        <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>            <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>            <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Block(div)Blcok(div,&#123;key:0&#125;)Block(div,&#123;key:1&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>父节点除了会收集动态节点之外，也会收集子 block。 更新时因 key 值不同会进行删除重新创建</p><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>随着<code>v-for</code>变量的变化也会导致虚拟 DOM 树变得不稳定</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in fruits<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>      _Fragment<span class="token punctuation">,</span>      <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token function">_renderList</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>fruits<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token number">256</span> <span class="token comment">/* UNKEYED_FRAGMENT */</span>    <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以试想一下，如果不增加这个 block，前后元素不一致是无法做到靶向更新的。因为 dynamicChildren 中还有可能有其他层级的元素。同时这里还生成了一个 Fragment，因为前后元素个数不一致，所以称之为<strong>不稳定序列</strong>。</p></blockquote><h3 id="稳定-Fragment"><a href="#稳定-Fragment" class="headerlink" title="稳定 Fragment"></a>稳定 Fragment</h3><p>这里是可以靶向更新的, 因为稳定则有参照物</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in 3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//会收集</span>    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>        _Fragment<span class="token punctuation">,</span>        <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token function">_renderList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">64</span> <span class="token comment">/* STABLE_FRAGMENT */</span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-静态提升"><a href="#1-3-静态提升" class="headerlink" title="1.3 静态提升"></a>1.3 静态提升</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">a</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">b</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;age&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们把模板直接转化成 render 函数是这个样子的，那么问题就是每次调用<code>render</code>函数都要重新创建虚拟节点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>        <span class="token string">"span"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>          <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">1</span> <span class="token comment">/* TEXT */</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开<code>hoistStatic</code></p><p>提升后的代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span><span class="token punctuation">)</span><span class="token keyword">const</span> _hoisted_2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      _hoisted_1<span class="token punctuation">,</span>      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> _hoisted_2<span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-预字符串化"><a href="#1-4-预字符串化" class="headerlink" title="1.4 预字符串化"></a>1.4 预字符串化</h2><p>静态提升的节点都是静态的，我们可以将提升出来的节点字符串化。 当连续静态节点超过 20 个时，会将静态节点序列化为字符串。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">_createStaticVNode</span><span class="token punctuation">(</span>  <span class="token string">"&lt;span>hello&lt;/span>&lt;span>hello&lt;/span>&lt;span>hello&lt;/span>&lt;span>hello&lt;/span>&lt;span>hello&lt;/span>&lt;span>hello&lt;/span>&lt;span>hello&lt;/span>&lt;span>hello&lt;/span>&lt;span>hello&lt;/span>&lt;span>hello&lt;/span>"</span><span class="token punctuation">,</span>  <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">const</span> _hoisted_11 <span class="token operator">=</span> <span class="token punctuation">[</span>_hoisted_1<span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> _hoisted_11<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5-缓存函数"><a href="#1-5-缓存函数" class="headerlink" title="1.5 缓存函数"></a>1.5 缓存函数</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>e=>v=e.target.value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>每次调用 render 的时都要创建新函数</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>      <span class="token string">"div"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>v <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token number">8</span> <span class="token comment">/* PROPS */</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"onClick"</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开<code>cacheHandlers</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">onClick</span><span class="token operator">:</span> _cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>v <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总言之：</p><ol><li><p>给动态元素都做好标记，到时候 diff 算法的时候他会去看标记是文本，他就只更新文本，属性只更新属性，性能高</p></li><li><p>把动态节点单独收集到一个队列中，可以做靶向更新，按照顺序依次更新，但是有些结构不稳定的不能通过一个 block 收集，多个 block，保证更新不出错</p></li><li><p>静态提升，把一些不变的东西拿出去，不需要每次创建</p></li><li><p>节点是固定，重复性比较多的，进行预字符串化</p></li><li><p>缓存函数，每次调用的时候都用以前的</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>key的作用和原理</title>
      <link href="/2024/03/22/key-de-zuo-yong-he-yuan-li/"/>
      <url>/2024/03/22/key-de-zuo-yong-he-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-key-的概念"><a href="#1-1-key-的概念" class="headerlink" title="1.1 key 的概念"></a>1.1 key 的概念</h2><ul><li><p>key 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。</p></li><li><p>当 Vue 正在更新使用 v-for 渲染的元素列表时，它默认使用“就地更新”的策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染</p></li></ul><h2 id="1-2-key-的作用"><a href="#1-2-key-的作用" class="headerlink" title="1.2 key 的作用"></a>1.2 key 的作用</h2><ul><li>Vue 在 patch 过程中通过 key 可以判断两个虚拟节点是否是相同节点。 （可以复用老节点）</li><li>无 key 会导致更新的时候出问题</li><li>尽量不要采用索引作为 key ( 倒叙删除，正序插入 )</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的diff算法</title>
      <link href="/2024/03/22/vue-zhong-de-diff-suan-fa/"/>
      <url>/2024/03/22/vue-zhong-de-diff-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-Diff-概念"><a href="#1-1-Diff-概念" class="headerlink" title="1.1 Diff 概念"></a>1.1 Diff 概念</h2><p>vue 基于虚拟 DOM 做更新 。diff 的核心就是比较两个虚拟节点的差异 。Vue 的 diff 算法是<strong>平级比较，不考虑跨级比较</strong>的情况。内部采用<strong>深度递归的方式 + 双指针的方式</strong>进行比较。</p><h2 id="1-2-Vue2-Diff-比较流程"><a href="#1-2-Vue2-Diff-比较流程" class="headerlink" title="1.2 Vue2 Diff 比较流程"></a>1.2 Vue2 Diff 比较流程</h2><ul><li>1.先比较是否是相同节点 key tag</li><li>2.相同节点比较属性,并复用老节点（将老的虚拟 dom 复用给新的虚拟节点 DOM）</li><li>3.比较儿子节点，考虑老节点和新节点儿子的情况<ul><li>老的没儿子，现在有儿子。 直接插入新的儿子</li><li>老的有儿子，新的没儿子。直接删除页面节点</li><li>老的儿子是文本，新的儿子是文本，直接更新文本节点即可</li><li>老的儿子是一个列表，新的儿子也是一个列表 updateChildren</li></ul></li><li>4.优化比较：头头、尾尾、头尾、尾头</li><li>5.比对查找进行复用</li><li><ol start="6"><li>乱序的时候，取新的一个节点，在旧的里面查找 （新的去老的里面查找）</li></ol></li></ul><blockquote><p>Vue3 中采用最长递增子序列来实现 diff 优化</p></blockquote><h2 id="3-Vue3-Diff-算法比较流程"><a href="#3-Vue3-Diff-算法比较流程" class="headerlink" title="3 Vue3 Diff 算法比较流程"></a>3 Vue3 Diff 算法比较流程</h2><p>全量 Diff：</p><ul><li>刚开始默认从头比对，相同节点则复用节点。</li><li>如果头部节点不一致，我们就从后向前对比，相同节点则复用。</li><li>默认优化了子节点追加和子节点删除的情况。</li><li>乱序比对，通过最长递增子序列实现在复用过程中减少节点的移动操作。</li></ul><blockquote><p>Vue3 采用最长递增子序列，求解不需要移动的元素有哪些</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 中如何检测数组变化?</title>
      <link href="/2024/03/22/zhong-ru-he-jian-ce-shu-zu-bian-hua/"/>
      <url>/2024/03/22/zhong-ru-he-jian-ce-shu-zu-bian-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-Vue2-中采用重写数组方法的方式"><a href="#1-1-Vue2-中采用重写数组方法的方式" class="headerlink" title="1.1 Vue2 中采用重写数组方法的方式"></a>1.1 Vue2 中采用重写数组方法的方式</h2><ul><li>数组考虑性能原因没有用<code>defineProperty</code>对数组的每一项进行拦截，而是选择重写数组（<code>push,shift,pop,splice,unshift,sort,reverse</code>）方法。<strong>数组中如果是对象数据类型也会进行递归劫持</strong>。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> methodsToPatch <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'push'</span><span class="token punctuation">,</span>  <span class="token string">'pop'</span><span class="token punctuation">,</span>  <span class="token string">'shift'</span><span class="token punctuation">,</span>  <span class="token string">'unshift'</span><span class="token punctuation">,</span>  <span class="token string">'splice'</span><span class="token punctuation">,</span>  <span class="token string">'sort'</span><span class="token punctuation">,</span>  <span class="token string">'reverse'</span><span class="token punctuation">]</span>methodsToPatch<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// cache original method</span>  <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>  <span class="token function">def</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">mutator</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">original</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__    <span class="token keyword">let</span> inserted    <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token string">'push'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'unshift'</span><span class="token operator">:</span>        inserted <span class="token operator">=</span> args        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'splice'</span><span class="token operator">:</span>        inserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> ob<span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span>    <span class="token comment">// notify change</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> TriggerOpTypes<span class="token punctuation">.</span><span class="token constant">ARRAY_MUTATION</span><span class="token punctuation">,</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>        <span class="token literal-property property">key</span><span class="token operator">:</span> method      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-Vue3-直接采用的是-Proxy"><a href="#1-2-Vue3-直接采用的是-Proxy" class="headerlink" title="1.2 Vue3 直接采用的是 Proxy"></a>1.2 Vue3 直接采用的是 Proxy</h2><ul><li>在 Vue 3.x 中，直接使用 Proxy 实现了更<em>高效</em>和<em>精确</em>的数组变化检测，通过 Proxy，Vue 可以捕获到数组索引和长度的变化，不再需要重写数组的方法。这是 Vue 3.x 在性能方面的一个重要改进（但是由于代理问题，还需要对部分检测方法进行重写）。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">n</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">createArrayInstrumentations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token literal-property property">instrumentations</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Function<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// instrument identity-sensitive Array methods to account for possible reactive</span>  <span class="token comment">// values</span>  <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'includes'</span><span class="token punctuation">,</span> <span class="token string">'indexOf'</span><span class="token punctuation">,</span> <span class="token string">'lastIndexOf'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    instrumentations<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> unknown<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> unknown<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token keyword">as</span> any      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">track</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> TrackOpTypes<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// we run the method using the original args first (which may be reactive)</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> res <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// if that didn't work, run it again using raw values.</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>toRaw<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// instrument length-altering mutation methods to avoid length being tracked</span>  <span class="token comment">// which leads to infinite loops in some cases (#2137)</span>  <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'push'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'shift'</span><span class="token punctuation">,</span> <span class="token string">'unshift'</span><span class="token punctuation">,</span> <span class="token string">'splice'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    instrumentations<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> unknown<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> unknown<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">pauseTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">pauseScheduling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>      <span class="token function">resetScheduling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">resetTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> res    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> instrumentations<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://github.com/vuejs/vue/blob/main/src/core/observer/array.ts#L12">Vue2 数组重写</a>，<a href="https://github.com/vuejs/core/blob/main/packages/reactivity/src/baseHandlers.ts#L53">Vue3 数组重写</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 中如何进行依赖收集</title>
      <link href="/2024/03/22/zhong-ru-he-jin-xing-yi-lai-shou-ji/"/>
      <url>/2024/03/22/zhong-ru-he-jin-xing-yi-lai-shou-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-依赖收集的流程"><a href="#1-1-依赖收集的流程" class="headerlink" title="1.1 依赖收集的流程"></a>1.1 依赖收集的流程</h2><ul><li>每个属性都拥有自己的<code>dep</code>属性，存放他所依赖的 watcher，当属性变化后会通知自己对应的 watcher 去更新</li><li>默认在初始化时会调用 render 函数，此时会触发属性依赖收集 <code>dep.depend</code></li><li>当属性发生修改时会触发<code>watcher</code>更新 <code>dep.notify()</code></li></ul><p><img src="https://raw.githubusercontent.com/ghx9908/image-hosting/master/img20240322144336.png"></p><h2 id="1-2-Vue3依赖收集"><a href="#1-2-Vue3依赖收集" class="headerlink" title="1.2 Vue3依赖收集"></a>1.2 <code>Vue3</code>依赖收集</h2><ul><li><code>Vue3</code>中会通过<code>Map</code>结构将属性和<code>effect</code>映射起来。</li><li>默认在初始化时会调用 render 函数，此时会触发属性依赖收集<code>track</code>，</li><li>当属性发生修改时会找到对应的<code>effect</code>列表依次执行<code>trigger</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>effect1<span class="token punctuation">,</span>effect2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将template转换成render函数</title>
      <link href="/2024/03/22/ru-he-jiang-template-zhuan-huan-cheng-render-han-shu/"/>
      <url>/2024/03/22/ru-he-jiang-template-zhuan-huan-cheng-render-han-shu/</url>
      
        <content type="html"><![CDATA[<p>Vue 中含有模版编译的功能，它的主要作用是将用户编写的 template 编译为 js 中可执行的 render 函数。</p><h2 id="Vue-中的模版转化流程"><a href="#Vue-中的模版转化流程" class="headerlink" title="Vue 中的模版转化流程"></a>Vue 中的模版转化流程</h2><ol><li>将 template 模板转换成 ast 语法树 - parserHTML (ast 描述语法的，虚拟 dom 描述的 Dom 结构的)</li><li>Vue2 对静态语法做静态标记 - optimize / Vue3 对 ast 语法进行转化 - transform（更细致）</li><li>重新生成代码 - codeGen</li></ol><p><a href="https://github1s.com/vuejs/vue/blob/main/src/platforms/web/runtime-with-compiler.ts#L21-L22">Vue2 模板编译的过程</a></p><p><a href="https://github.com/vuejs/core/blob/main/packages/compiler-core/src/compile.ts#L61">Vue3 模版编译的过程</a></p><blockquote><p>Vue3 中的模版转化，做了更多的优化操作。Vue2 仅仅是标记了静态节点而已~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请说一下你对响应式数据的理解？</title>
      <link href="/2024/03/22/qing-shuo-yi-xia-ni-dui-xiang-ying-shi-shu-ju-de-li-jie/"/>
      <url>/2024/03/22/qing-shuo-yi-xia-ni-dui-xiang-ying-shi-shu-ju-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-如何实现响应式数据"><a href="#1-1-如何实现响应式数据" class="headerlink" title="1.1 如何实现响应式数据"></a>1.1 如何实现响应式数据</h2><p>数组和对象类型当值变化时如何劫持到。对象内部通过<code>defineReactive</code>方法，使用<code>Object.defineProperty</code>将属性进行劫持（只会劫持已经存在的属性），数组则是通过重写数组方法来实现。 多层对象是通过<strong>递归</strong>来实现劫持。<code>Vue3</code>则采用 proxy</p><h2 id="1-2-vue2-处理缺陷"><a href="#1-2-vue2-处理缺陷" class="headerlink" title="1.2 vue2 处理缺陷"></a>1.2 <code>vue2</code> 处理缺陷</h2><ul><li>在 <code>Vue2</code> 的时候使用 <code>defineProperty</code> 来进行数据的劫持, 需要对属性进行重写添加<code>getter</code>及<code>setter</code> <strong>性能差</strong>。</li><li>当新增属性和删除属性时无法监控变化。需要通过<code>$set</code>、<code>$delete</code>实现</li><li>数组不采用 <code>defineProperty</code> 来进行劫持 （浪费性能，对所有索引进行劫持会造成性能浪费）需要对数组单独进行处理。</li><li>对于 <code>ES6</code> 中新产生的 Map、Set 这些数据结构不支持。</li></ul><h2 id="1-3-Vue2-与-Vue3-实现对比"><a href="#1-3-Vue2-与-Vue3-实现对比" class="headerlink" title="1.3 Vue2 与 Vue3 实现对比"></a>1.3 <code>Vue2</code> 与 <code>Vue3</code> 实现对比</h2><p>Vue2</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">observer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token punctuation">&#123;</span> ¸v        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//依赖收集</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>                <span class="token function">observer</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">observer</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> data    <span class="token punctuation">&#125;</span>  <span class="token comment">//依赖更新</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vue3</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><a href="https://github1s.com/vuejs/vue/blob/HEAD/src/core/observer/index.ts#L105-L106">Vue2 源码</a> ,<a href="https://github1s.com/vuejs/core/blob/main/packages/reactivity/src/reactive.ts#L90-L91">Vue3 源码</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>既然 Vue 通过数据劫持可以精准探测数据变化,为什么还需要虚拟 DOM 进行 diff 检测差异？</title>
      <link href="/2024/03/22/wei-shi-me-yao-you-diff-suan-fa/"/>
      <url>/2024/03/22/wei-shi-me-yao-you-diff-suan-fa/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Vue 的数据劫持是通过 Object.defineProperty 或 Proxy 来实现的。</p></li><li><p>虚拟 DOM 是用于比较两次渲染之间的虚拟树，找出差异并仅更新必要的部分。从而提高性能，减少直接操作实际 DOM 的次数。（直接操作真实 DOM 是代价是非常昂贵的）</p></li></ul><blockquote><p>Vue 内部设计原因导致，vue 设计的是每个组件一个 watcher（渲染 watcher），没有采用一个属性对应一个 watcher。这样会导致大量 watcher 的产生而且浪费内存，如果粒度过低也无法精准检测变化。所以采用 diff 算法 + 组件级 watcher。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈vue组件化的理解</title>
      <link href="/2024/03/22/tan-tan-vue-zu-jian-hua-de-li-jie/"/>
      <url>/2024/03/22/tan-tan-vue-zu-jian-hua-de-li-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>WebComponent</code> 组件化的核心组成：模板、属性、事件、插槽、生命周期。</p></blockquote><p>组件化好处: 高内聚、可重用、可组合</p><ul><li>组件化开发能大幅提高应用开发效率、测试性、复用性等;</li><li>降低更新范围，只重新渲染变化的组件；</li></ul><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><ul><li><p>Vue 中的每个组件都有一个渲染函数 watcher、effect。</p></li><li><p>数据是响应式的，数据变化后会执行 watcher 或者 effect。</p></li><li><p>组件要合理的划分，如果不拆分组件，那更新的时候整个页面都要重新更新。</p></li><li><p>如果过分的拆分组件会导致 watcher、effect 产生过多也会造成性能浪费。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue为什么需要虚拟DOM</title>
      <link href="/2024/03/21/vue-wei-shi-me-xu-yao-xu-ni-dom/"/>
      <url>/2024/03/21/vue-wei-shi-me-xu-yao-xu-ni-dom/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><blockquote><p>基本上所有框架都引入了虚拟 DOM 来对真实 DOM 进行抽象，也就是现在大家所熟知的 VNode 和 VDOM</p></blockquote><ul><li>Virtual DOM 就是用 js 对象来描述真实 DOM，是对真实 DOM 的抽象，由于直接操作 DOM 性能低但是 js 层的操作效率高，可以将 DOM 操作转化成对象操作，最终通过 diff 算法比对差异进行更新 DOM（减少了对真实 DOM 的操作）。</li><li>虚拟 DOM 不依赖真实平台环境从而也可以实现跨平台。</li></ul><h2 id="1-2-VDOM-是如何生成的-？"><a href="#1-2-VDOM-是如何生成的-？" class="headerlink" title="1.2 VDOM 是如何生成的 ？"></a>1.2 VDOM 是如何生成的 ？</h2><ul><li>在 vue 中我们常常会为组件编写模板 - template</li><li>这个模板会被编译器编译为渲染函数 - render</li><li>在接下来的挂载过程中会调用 render 函数，返回的对象就是虚拟 dom</li><li>会在后续的 patch 过程中进一步转化为 真实 dom。</li></ul><h2 id="1-3-VDOM-如何做-diff-的？"><a href="#1-3-VDOM-如何做-diff-的？" class="headerlink" title="1.3 VDOM 如何做 diff 的？"></a>1.3 VDOM 如何做 diff 的？</h2><ul><li>挂载过程结束后，会记录第一次生成的 VDOM - oldVnode</li><li>当响应式数据发生变化时，将会引起组件重新 render，此时就会生成新的 VDOM - newVnode</li><li>使用 oldVnode 与 newVnode 做 diff 操作，将更改的部分应到真实 DOM 上，从而转换为最小量的 dom 操作，高效更新视图。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈你对vue的理解</title>
      <link href="/2024/03/21/tan-tan-ni-dui-vue-de-li-jie/"/>
      <url>/2024/03/21/tan-tan-ni-dui-vue-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="1-谈谈你对-vue-的理解-？"><a href="#1-谈谈你对-vue-的理解-？" class="headerlink" title="1.谈谈你对 vue 的理解 ？"></a>1.谈谈你对 vue 的理解 ？</h1><p>官方： <strong>Vue</strong>是一套用于构建用户界面的<strong>渐进式框架</strong>，Vue 的核心库只关注视图层</p><p><img src="https://raw.githubusercontent.com/ghx9908/image-hosting/master/img20240321153030.png"></p><p>声明式渲染（data，mathod），功能不够，大型项目需要拆分，提供了组件化功能，有提供了客户端路由的模式，需要通信，提供了状态管理（vuex，pinia），上线打包，提供了构建工具等..,渐进式框架，我们可以使用其中的部分功能，需要了再拿过来</p><h2 id="1-1-声明式框架"><a href="#1-1-声明式框架" class="headerlink" title="1.1 声明式框架"></a>1.1 声明式框架</h2><p><strong>令式和声明式的区别</strong></p><ul><li><p>早在 JQ 的时代编写的代码都是命令式的，命令式框架重要<strong>特点就是关注过程</strong></p></li><li><p><strong>声明式框架更加关注结果</strong>。命令式的代码封装到了 Vuejs 中，过程靠 vuejs 来实现</p><blockquote><p>声明式代码更加简单，不需要关注实现，按照要求填代码就可以 （给上原材料就出结果）</p></blockquote></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span> 命令式编程：<span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  total <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> 关注了过程<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token operator">-</span> 声明式编程：<span class="token keyword">let</span> total2 <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">memo<span class="token punctuation">,</span>current</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> memo <span class="token operator">+</span> current<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-MVVM-模式"><a href="#1-2-MVVM-模式" class="headerlink" title="1.2 MVVM 模式"></a>1.2 MVVM 模式</h2><h3 id="1-2-1-MVC-模式"><a href="#1-2-1-MVC-模式" class="headerlink" title="1.2.1 MVC 模式"></a>1.2.1 MVC 模式</h3><p><img src="https://raw.githubusercontent.com/ghx9908/image-hosting/master/img20240321154403.png"></p><p>这是一个单向的过程</p><blockquote><p>用户请求资源到控制层，控制层放一些业务逻辑，然后然后去掉 service 服务层通过 model 去查数据，渲染到页面 view 层</p></blockquote><p>对于前端而言就是如何将数据同步到页面上，也是借鉴后端思想。</p><h3 id="1-2-3-MVVM-模式-映射关系的简化-（隐藏-controller）"><a href="#1-2-3-MVVM-模式-映射关系的简化-（隐藏-controller）" class="headerlink" title="1.2.3 MVVM 模式 : 映射关系的简化 （隐藏 controller）"></a>1.2.3 MVVM 模式 : 映射关系的简化 （隐藏 controller）</h3><p><img src="https://raw.githubusercontent.com/ghx9908/image-hosting/master/img20240321154946.png"></p><p>ViewModel ：自动监听 dom 变化，将数据更新到 Model 中，也可以把数据绑定到视图中，v-model</p><blockquote><p>虽然没有完全遵循 <strong>MVVM</strong> 模型，但是 Vue 的设计也受到了它的启发。因此在文档中经常会使用 <code>vm</code> (ViewModel 的缩写) 这个变量名表示 Vue 实例。(可以通过 ref 更改数据)</p></blockquote><h2 id="1-3-采用虚拟-DOM"><a href="#1-3-采用虚拟-DOM" class="headerlink" title="1.3 采用虚拟 DOM"></a>1.3 采用虚拟 DOM</h2><p>传统更新页面，拼接一个完整的字符串 innerHTML 全部重新渲染，添加虚拟 DOM 后，可以比较新旧虚拟节点，找到变化在进行更新。<strong>虚拟 DOM 就是一个对象</strong>，用来描述真实 DOM 的</p><h3 id="最大的优势是什么"><a href="#最大的优势是什么" class="headerlink" title="最大的优势是什么"></a>最大的优势是什么</h3><ul><li>可以跨平台，对象是可以跨平台的</li><li>虚拟 dom 可以做缓存层，所有的修改都可以在虚拟 dom 层面【diff 算法】</li></ul><p><a href="https://github1s.com/vuejs/vue/blob/main/src/core/vdom/vnode.ts">https://github.com/vuejs/vue/blob/main/src/core/vdom/vnode.ts</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">tag<span class="token operator">?</span><span class="token operator">:</span> string<span class="token literal-property property">data</span><span class="token operator">:</span> VNodeData <span class="token operator">|</span> <span class="token keyword">undefined</span>children<span class="token operator">?</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>VNode<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span>text<span class="token operator">?</span><span class="token operator">:</span> string<span class="token literal-property property">elm</span><span class="token operator">:</span> Node <span class="token operator">|</span> <span class="token keyword">undefined</span>ns<span class="token operator">?</span><span class="token operator">:</span> stringcontext<span class="token operator">?</span><span class="token operator">:</span> Component <span class="token comment">// rendered in this component's scope</span><span class="token literal-property property">key</span><span class="token operator">:</span> string <span class="token operator">|</span> number <span class="token operator">|</span> <span class="token keyword">undefined</span>componentOptions<span class="token operator">?</span><span class="token operator">:</span> VNodeComponentOptionscomponentInstance<span class="token operator">?</span><span class="token operator">:</span> Component <span class="token comment">// component instance</span><span class="token literal-property property">parent</span><span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token comment">// component placeholder node</span><span class="token comment">// strictly internal</span><span class="token literal-property property">raw</span><span class="token operator">:</span> boolean <span class="token comment">// contains raw HTML? (server only)</span><span class="token literal-property property">isStatic</span><span class="token operator">:</span> boolean <span class="token comment">// hoisted static node</span><span class="token literal-property property">isRootInsert</span><span class="token operator">:</span> boolean <span class="token comment">// necessary for enter transition check</span><span class="token literal-property property">isComment</span><span class="token operator">:</span> boolean <span class="token comment">// empty comment placeholder?</span><span class="token literal-property property">isCloned</span><span class="token operator">:</span> boolean <span class="token comment">// is a cloned node?</span><span class="token literal-property property">isOnce</span><span class="token operator">:</span> boolean <span class="token comment">// is a v-once node?</span>asyncFactory<span class="token operator">?</span><span class="token operator">:</span> Function <span class="token comment">// async component factory function</span><span class="token literal-property property">asyncMeta</span><span class="token operator">:</span> Object <span class="token operator">|</span> <span class="token keyword">void</span><span class="token literal-property property">isAsyncPlaceholder</span><span class="token operator">:</span> booleanssrContext<span class="token operator">?</span><span class="token operator">:</span> Object <span class="token operator">|</span> <span class="token keyword">void</span><span class="token literal-property property">fnContext</span><span class="token operator">:</span> Component <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token comment">// real context vm for functional nodes</span>fnOptions<span class="token operator">?</span><span class="token operator">:</span> ComponentOptions <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token comment">// for SSR caching</span>devtoolsMeta<span class="token operator">?</span><span class="token operator">:</span> Object <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token comment">// used to store functional render context for devtools</span>fnScopeId<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token comment">// functional scope id support</span>isComponentRootElement<span class="token operator">?</span><span class="token operator">:</span> boolean <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token comment">// for SSR directives</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-区分编译时-打包-和运行-浏览器-时"><a href="#1-4-区分编译时-打包-和运行-浏览器-时" class="headerlink" title="1.4 区分编译时(打包)和运行(浏览器)时"></a>1.4 区分编译时(打包)和运行(浏览器)时</h2><ul><li>Vue 的渲染核心就是调用渲染（render）方法将虚拟 DOM 渲染成真实 DOM （缺点就是虚拟 DOM 编写麻烦）</li><li>专门写个编译时可以将模板编译成虚拟 DOM （在构建的时候进行编译性能更高，不需要再运行的时候进行编译）</li></ul><h2 id="1-5-组件化"><a href="#1-5-组件化" class="headerlink" title="1.5 组件化"></a>1.5 组件化</h2><p>实现高内聚、低耦合、单向数据流</p><ul><li>组件化开发能大幅提高应用开发效率、测试性、复用性等;</li><li>降低更新范围，只重新渲染变化的组件</li></ul><p>模块化：针对的业务逻辑，逻辑上的封装和抽离。组件化是对 UI 的抽离</p><p><strong>总结：</strong></p><p>vue 声明式框架，里面借鉴了 mvvm 思想，有虚拟 dom，有编译，渲染的时候有组件化的特点，做一些拆分</p>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echarts自适应问题高级解决方案</title>
      <link href="/2024/01/26/echarts-zi-gua-ying-wen-ti-gao-ji-jie-jue-fang-an/"/>
      <url>/2024/01/26/echarts-zi-gua-ying-wen-ti-gao-ji-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>在移动端或者 PC 端当页面尺寸发生变化时，echarts 图表需要自适应，以适应页面尺寸的变化。</p><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><h3 id="增加图表-resize"><a href="#增加图表-resize" class="headerlink" title="增加图表 resize"></a>增加图表 resize</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  chart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="解决-canvas-画布大小和容器大小不一致的问题"><a href="#解决-canvas-画布大小和容器大小不一致的问题" class="headerlink" title="解决 canvas 画布大小和容器大小不一致的问题"></a>解决 canvas 画布大小和容器大小不一致的问题</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resizeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Auto resizes the chart when the browser window is resized.</span><span class="token keyword">const</span> <span class="token function-variable function">resizeHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"resize.."</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>chart<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">let</span> width <span class="token operator">=</span> myChart<span class="token punctuation">.</span>value<span class="token punctuation">.</span>offsetWidth  <span class="token keyword">let</span> height <span class="token operator">=</span> myChart<span class="token punctuation">.</span>value<span class="token punctuation">.</span>offsetHeight  chart<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ul><li>窗口改变时 EChart 会立即获取宽度，但是此时宽度还在变化中，可能不是最终值，所以 ECharts 显示有问题，修改方法是添加一个延时。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">resizeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 解决方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动设备上的安全区域适配</title>
      <link href="/2024/01/26/yi-dong-she-bei-shang-de-an-quan-qu-yu-gua-pei/"/>
      <url>/2024/01/26/yi-dong-she-bei-shang-de-an-quan-qu-yu-gua-pei/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-代码解析"><a href="#CSS-代码解析" class="headerlink" title="CSS 代码解析"></a>CSS 代码解析</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>当我们写个功能，容器的高度需要设置为 100vh，发现在 ios(safari)浏览器显示的时候，浏览器的底部工具栏总是会挡住底下的一部分，只有工具栏隐藏或者向上滚动的时候才能看到。</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>没找到相关官方的问题，从知乎上搜到一个解释，觉得合理，就当是原因吧：在 Safari 上工作时，该团队努力只在必要时显示按钮栏。他们的目标是尽可能给网站更多的空间，这就是为什么按钮栏在滚动时隐藏。这导致了一个关于如何处理视口高度的艰难决定。它会</p><ul><li>每次工具条隐藏和显示时更改高度。</li><li>使视口高度保持不变，并让按钮栏覆盖视口的一部分。</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">min-height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">,</span> -webkit-fill-available<span class="token punctuation">;</span>  <span class="token comment">/* min-height: 100vh;  min-height: -webkit-fill-available; */</span>  <span class="token comment">/* 适配齐刘海*/</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token function">constant</span><span class="token punctuation">(</span>safe-area-inset-top<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token function">env</span><span class="token punctuation">(</span>safe-area-inset-top<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 适配底部黑条*/</span>  <span class="token comment">/* padding-bottom: constant(safe-area-inset-bottom);  padding-bottom: env(safe-area-inset-bottom); */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul><li><p>min-height: 100vh;: 这一行设置页面的最小高度为视窗高度的 100%。vh 表示视窗高度的百分比单位，100vh 即表示整个视窗高度。</p></li><li><p>min-height: -webkit-fill-available;: 这是为了在 WebKit（例如，Safari 浏览器）中设置页面最小高度，使其填充可用的视窗高度。这在移动设备上确保了整个视窗高度的使用。</p></li><li><p>padding-top: constant(safe-area-inset-top);: 这一行使用了 constant() 函数，它用于指定一个常量值。safe-area-inset-top 表示设备的安全区域在顶部的高度。这样设置的目的是在页面的顶部添加一个与安全区域高度相等的内边距，以确保页面内容不被遮挡在设备的刘海或状态栏等区域。</p></li><li><p>padding-top: env(safe-area-inset-top);: 这一行使用了 env() 函数，该函数也用于指定一个环境变量值。同样，这里是为了在页面顶部添加一个与安全区域高度相等的内边距，确保适应设备的安全区域。</p></li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>我们需要将顶部和底部合理的摆放在安全区域内，iOS11 新增了两个 CSS 函数 <code>env、constant</code>，用于设定安全区域与边界的距离。</p><p>函数内部可以是四个常量：</p><ul><li><code>safe-area-inset-left</code>：安全区域距离左边边界距离</li><li><code>safe-area-inset-right</code>：安全区域距离右边边界距离</li><li><code>safe-area-inset-top</code>：安全区域距离顶部边界距离</li><li><code>safe-area-inset-bottom</code>：安全区域距离底部边界距离</li></ul><p>注意：我们必须指定 <code>viweport-fit</code> 后才能使用这两个函数：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, viewport-fit=cover<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>constant</code>在<code>iOS &lt; 11.2</code>的版本中生效，<code>env</code>在<code>iOS &gt;= 11.2</code>的版本中生效，这意味着我们往往要同时设置他们，将页面限制在安全区域内：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token function">constant</span><span class="token punctuation">(</span>safe-area-inset-bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token function">env</span><span class="token punctuation">(</span>safe-area-inset-bottom<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 解决方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-code-diff使用</title>
      <link href="/2023/08/29/v-code-diff-shi-yong/"/>
      <url>/2023/08/29/v-code-diff-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://github.com/Shimada666/v-code-diff/blob/master/README-zh.md">https://github.com/Shimada666/v-code-diff/blob/master/README-zh.md</a></li><li><a href="https://www.npmjs.com/package/v-code-diff">https://www.npmjs.com/package/v-code-diff</a></li><li><a href="https://www.npmjs.com/package/deep-parse-json">https://www.npmjs.com/package/deep-parse-json</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i deep-parse-json <span class="token comment"># 深度解析json</span><span class="token function">npm</span> i v-code-diff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="Vue3-注册为全局组件"><a href="#Vue3-注册为全局组件" class="headerlink" title="Vue3 注册为全局组件"></a>Vue3 注册为全局组件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> CodeDiff <span class="token keyword">from</span> <span class="token string">"v-code-diff"</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>CodeDiff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;code-diff :old-string&#x3D;&quot;diffData.oldString&quot; :new-string&#x3D;&quot;diffData.newString&quot; output-format&#x3D;&quot;side-by-side&quot; &#x2F;&gt;&lt;&#x2F;template&gt;&lt;script lang&#x3D;&quot;ts&quot; setup&gt;const diffData &#x3D; reactive(&#123;  oldString: &quot;&quot;,  newString: &quot;&quot;,&#125;)onMount(() &#x3D;&gt; &#123;  diffData.oldString &#x3D; JSON.stringify(deepParseJson(&quot;123&quot;), null, 4)  diffData.newString &#x3D; JSON.stringify(deepParseJson(&quot;456&quot;), null, 4)&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导出execl文件</title>
      <link href="/2023/08/28/dao-chu-execl-wen-jian/"/>
      <url>/2023/08/28/dao-chu-execl-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>参考：</p><ul><li><p><a href="https://www.npmjs.com/package/xlsx">https://www.npmjs.com/package/xlsx</a></p></li><li><p><a href="https://juejin.cn/post/7018094518931030053">https://juejin.cn/post/7018094518931030053</a></p></li></ul><ol><li>安装 xlsx 库</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install xlsx <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装 file-saver</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install file<span class="token operator">-</span>saver <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>编写函数—新建 exportsExcel.js 文件</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//将包导入</span><span class="token keyword">import</span> FileSaver <span class="token keyword">from</span> <span class="token string">"file-saver"</span><span class="token keyword">import</span> <span class="token constant">XLSX</span> <span class="token keyword">from</span> <span class="token string">"xlsx"</span><span class="token comment">// 传入json数据</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">exportDataToExcel</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> workbook <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">book_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//  创建一个新的工作簿</span>  <span class="token keyword">let</span> worksheet <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">json_to_sheet</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">//根据data生成一个工作表:</span>  <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">book_append_sheet</span><span class="token punctuation">(</span>workbook<span class="token punctuation">,</span> worksheet<span class="token punctuation">,</span> <span class="token string">"Sheet1"</span><span class="token punctuation">)</span> <span class="token comment">//将工作表命名为Sheet1追加到工作簿</span>  <span class="token keyword">let</span> wbout <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>workbook<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">bookType</span><span class="token operator">:</span> <span class="token string">"xlsx"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"array"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">saveAs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>wbout<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"application/octet-stream"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> title <span class="token operator">+</span> <span class="token string">".xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 传入元素id数据</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">exportDdomToExcel</span><span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> workbook <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">book_new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//  创建一个新的工作簿</span>  <span class="token keyword">let</span> worksheet <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">table_to_shell</span><span class="token punctuation">(</span><span class="token function">documenletuerySelector</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//根据DOM生成一个工作表:</span>  <span class="token constant">XLSX</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">book_append_sheet</span><span class="token punctuation">(</span>workbook<span class="token punctuation">,</span> worksheet<span class="token punctuation">,</span> <span class="token string">"Sheet1"</span><span class="token punctuation">)</span> <span class="token comment">//将工作表命名为Sheet1追加到工作簿</span>  <span class="token keyword">let</span> wbout <span class="token operator">=</span> <span class="token constant">XLSX</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>workbook<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">bookType</span><span class="token operator">:</span> <span class="token string">"xlsx"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"array"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">saveAs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>wbout<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"application/octet-stream"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> title <span class="token operator">+</span> <span class="token string">".xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS-兼容性</title>
      <link href="/2023/08/15/ts-jian-rong-xing/"/>
      <url>/2023/08/15/ts-jian-rong-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>TS 中的兼容性，主要看结构是否兼容。（核心是考虑安全性）</p></blockquote><h2 id="一-基本数据类型的兼容性"><a href="#一-基本数据类型的兼容性" class="headerlink" title="一.基本数据类型的兼容性"></a>一.基本数据类型的兼容性</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> temp<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token keyword">let</span> num<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span>temp <span class="token operator">=</span> num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>你要的我有就可以</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"zf"</span>num <span class="token operator">=</span> str <span class="token comment">// 字符串中具备toString()方法，所以可以进行兼容</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token punctuation">&#123;</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#125;</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们可以把 string 看成一个对象 基于 toString 扩展了其他的功能</li></ul><h2 id="二-接口兼容性"><a href="#二-接口兼容性" class="headerlink" title="二.接口兼容性"></a>二.接口兼容性</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">IAnimal</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span>  age<span class="token operator">:</span> <span class="token builtin">number</span>  address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> animal<span class="token operator">:</span> IAnimal<span class="token keyword">let</span> person<span class="token operator">:</span> IPerson <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"zs"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>  address<span class="token operator">:</span> <span class="token string">"回龙观"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>animal <span class="token operator">=</span> person <span class="token comment">// 子类赋予给父类 兼容 、 你要的我都有安全</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> IPerson <span class="token keyword">extends</span> <span class="token class-name">IAnimal</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>接口的兼容性，只要满足接口中所需要的类型即可！<br>多的赋给少的 | 子类赋予给父类</p></blockquote><h2 id="三-函数的兼容性"><a href="#三-函数的兼容性" class="headerlink" title="三.函数的兼容性"></a>三.函数的兼容性</h2><p>函数的兼容性主要是比较参数和返回值,利于 forEach 函数提供三个参数，但是我们可以只用一个</p><ul><li><p>参数</p><p>少的赋予给多的，多了无法判断类型是否正确，不安全</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> <span class="token function-variable function">sum1</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token keyword">let</span> <span class="token function-variable function">sum2</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> asum1 <span class="token operator">=</span> sum2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>赋值函数的参数要少于等于被赋值的函数，与对象相反</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Func<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">forEach</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cb<span class="token operator">:</span> Func<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">cb</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>返回值</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">sum1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token keyword">type</span> <span class="token class-name">sum2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token keyword">let</span> fn1<span class="token operator">:</span> sum1<span class="token keyword">let</span> fn2<span class="token operator">!</span><span class="token operator">:</span> sum2fn1 <span class="token operator">=</span> fn2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="四-标称类型"><a href="#四-标称类型" class="headerlink" title="四.标称类型"></a>四.标称类型</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">AddType<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> _type<span class="token operator">!</span><span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">NewType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> AddType<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">></span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">BTC</span></span> <span class="token operator">=</span> NewType<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token string">"btc"</span><span class="token operator">></span> <span class="token comment">// number + BTC</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">USDT</span></span> <span class="token operator">=</span> NewType<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token string">"usdt"</span><span class="token operator">></span> <span class="token comment">// number + USDT</span><span class="token keyword">let</span> btc <span class="token operator">=</span> <span class="token number">100</span> <span class="token keyword">as</span> <span class="token constant">BTC</span><span class="token keyword">let</span> usdt <span class="token operator">=</span> <span class="token number">100</span> <span class="token keyword">as</span> <span class="token constant">USDT</span><span class="token keyword">function</span> <span class="token function">getCount</span><span class="token punctuation">(</span>count<span class="token operator">:</span> <span class="token constant">USDT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> count<span class="token punctuation">&#125;</span><span class="token function">getCount</span><span class="token punctuation">(</span>usdt<span class="token punctuation">)</span> <span class="token comment">// 标称类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五-类的兼容性"><a href="#五-类的兼容性" class="headerlink" title="五.类的兼容性"></a>五.类的兼容性</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Perent</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"zs"</span>  age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Parent1</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"zs"</span>  age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> parent<span class="token operator">:</span> Perent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里要注意的是，只要有 private 或者 protected 关键字类型就会不一致;但是继承的类可以兼容</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> name<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span>  age<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> name<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">string</span>  age<span class="token operator">!</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">B</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 语法错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Parent1</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">protected</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"zs"</span>  age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent1</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> child<span class="token operator">:</span> Parent1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六-泛型的兼容性"><a href="#六-泛型的兼容性" class="headerlink" title="六.泛型的兼容性"></a>六.泛型的兼容性</h2><blockquote><p>泛型的兼容性 泛型比较的是最终的结果 比较的不是泛型传递的参数</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">II</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token punctuation">&#123;</span>  a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> a1<span class="token operator">!</span><span class="token operator">:</span> <span class="token constant">II</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token keyword">let</span> a2<span class="token operator">!</span><span class="token operator">:</span> <span class="token constant">II</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token keyword">type</span> <span class="token class-name">xx</span> <span class="token operator">=</span> <span class="token constant">II</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">II</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">//false</span>a1 <span class="token operator">=</span> a2 <span class="token comment">// 语法错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七-枚举的兼容性"><a href="#七-枚举的兼容性" class="headerlink" title="七.枚举的兼容性"></a>七.枚举的兼容性</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> <span class="token constant">USER1</span> <span class="token punctuation">&#123;</span>  role <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> <span class="token constant">USER2</span> <span class="token punctuation">&#123;</span>  role <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> user1<span class="token operator">!</span><span class="token operator">:</span> <span class="token constant">USER1</span><span class="token keyword">let</span> user2<span class="token operator">!</span><span class="token operator">:</span> <span class="token constant">USER2</span>user1 <span class="token operator">=</span> user2 <span class="token comment">// 错误语法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>不同的枚举类型不兼容</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS-类型推断</title>
      <link href="/2023/08/14/ts-lei-xing-tui-duan/"/>
      <url>/2023/08/14/ts-lei-xing-tui-duan/</url>
      
        <content type="html"><![CDATA[<h2 id="一-赋值推断"><a href="#一-赋值推断" class="headerlink" title="一.赋值推断"></a>一.赋值推断</h2><p>赋值时推断，类型从右像左流动,会根据赋值推断出变量类型</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">11</span><span class="token keyword">let</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二-返回值推断"><a href="#二-返回值推断" class="headerlink" title="二.返回值推断"></a>二.返回值推断</h2><p>自动推断函数返回值类型</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-函数推断"><a href="#三-函数推断" class="headerlink" title="三.函数推断"></a>三.函数推断</h2><p>函数从左到右进行推断</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> sum<span class="token operator">:</span> <span class="token function-variable function">ISum</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//  a-> string b-> string</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token comment">// -> string</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">ICallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span> <span class="token comment">// 不关心返回值</span><span class="token comment">// 标记成void 意味着用户可以写返回值，但是实际上用不到</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>cb<span class="token operator">:</span> ICallback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token comment">// 调用函数后不会根据返回值来推导，默认采用就是上下文中声明的类型</span><span class="token punctuation">&#125;</span><span class="token comment">// 函数的参数 推断是按照上下文类型的位置来推断的</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-类型反推"><a href="#四-类型反推" class="headerlink" title="四.类型反推"></a>四.类型反推</h2><p>可以使用<code>typeof</code>关键字反推变量类型</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"zf"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> person<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五-索引访问操作符"><a href="#五-索引访问操作符" class="headerlink" title="五.索引访问操作符"></a>五.索引访问操作符</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span>  age<span class="token operator">:</span> <span class="token builtin">number</span>  job<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    address<span class="token operator">:</span> <span class="token builtin">string</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">job</span> <span class="token operator">=</span> IPerson<span class="token punctuation">[</span><span class="token string">"job"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六-类型映射"><a href="#六-类型映射" class="headerlink" title="六.类型映射"></a>六.类型映射</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">MapPerson</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> IPerson<span class="token punctuation">]</span><span class="token operator">:</span> IPerson<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS-类型保护</title>
      <link href="/2023/08/14/ts-lei-xing-bao-hu/"/>
      <url>/2023/08/14/ts-lei-xing-bao-hu/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li><p>ts 默认在使用的时候 都是联合类型， 不能直接使用联合类型。</p></li><li><p>识别类型，通过判断识别所执行的代码块，自动识别变量属性和方法，对不同的类型进行范围缩小</p></li></ul></blockquote><h2 id="一-typeof类型保护"><a href="#一-typeof类型保护" class="headerlink" title="一.typeof类型保护"></a>一.<code>typeof</code>类型保护</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getTypeof</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    val <span class="token comment">//number</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    val <span class="token comment">//string</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-instanceof类型保护"><a href="#二-instanceof类型保护" class="headerlink" title="二.instanceof类型保护"></a>二.<code>instanceof</code>类型保护</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>clazz<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Dog <span class="token operator">|</span> Cat <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">clazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getInstance1</span><span class="token punctuation">(</span>clazz<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> Dog <span class="token operator">|</span> Cat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">clazz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">instanceof</span></span> Cat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">type</span> <span class="token comment">//Cat</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">type</span> <span class="token comment">//Dog</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-in类型保护"><a href="#三-in类型保护" class="headerlink" title="三.in类型保护"></a>三.<code>in</code>类型保护</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">&#123;</span>  swiming<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">&#123;</span>  fly<span class="token operator">:</span> <span class="token builtin">string</span>  leg<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Fish <span class="token operator">|</span> Bird<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"swiming"</span> <span class="token keyword">in</span> animal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    animal <span class="token comment">// Fish</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    animal <span class="token comment">// Bird</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Array.isArray</code>确保一个变量是数组</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 确保一个变量是数组</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">ensureArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 类型来辨识</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> input  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>input<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-可辨识联合类型"><a href="#四-可辨识联合类型" class="headerlink" title="四.可辨识联合类型"></a>四.可辨识联合类型</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">WarningButton</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">DangerButton</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">"danger"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createButton</span><span class="token punctuation">(</span>button<span class="token operator">:</span> WarningButton <span class="token operator">|</span> DangerButton<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>button<span class="token punctuation">.</span>class <span class="token operator">==</span> <span class="token string">"warning"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    button <span class="token comment">// WarningButton</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    button <span class="token comment">// DangerButton</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五-null-保护"><a href="#五-null-保护" class="headerlink" title="五. null 保护"></a>五. <code>null</code> 保护</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token function-variable function">addPrefix</span> <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  num <span class="token operator">=</span> num <span class="token operator">||</span> <span class="token number">0</span> <span class="token comment">// null 保护</span>  <span class="token keyword">function</span> <span class="token function">prefix</span><span class="token punctuation">(</span>fix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> fix <span class="token operator">+</span> num<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里要注意的是 ts 无法检测内部函数变量类型</p></blockquote><h2 id="六-is自定义类型保护"><a href="#六-is自定义类型保护" class="headerlink" title="六.is自定义类型保护"></a>六.<code>is</code>自定义类型保护</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">&#123;</span>  swiming<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">&#123;</span>  fly<span class="token operator">:</span> <span class="token builtin">string</span>  leg<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token comment">//工具方法中判断类型的方法 全部需要使用 is 语法</span><span class="token comment">// ts的返回值类型 animal返回值true为Burd</span><span class="token keyword">function</span> <span class="token function">isBird</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Fish <span class="token operator">|</span> Bird<span class="token punctuation">)</span><span class="token operator">:</span> animal <span class="token keyword">is</span> Bird <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"swiming"</span> <span class="token keyword">in</span> animal <span class="token comment">// 必须是boolean</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getAniaml</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Fish <span class="token operator">|</span> Bird<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBird</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    animal <span class="token comment">// Bird</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    animal <span class="token comment">// Fish</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七-完整性保护"><a href="#七-完整性保护" class="headerlink" title="七.完整性保护"></a>七.完整性保护</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ICircle</span> <span class="token punctuation">&#123;</span>  kind<span class="token operator">:</span> <span class="token string">"circle"</span>  r<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">IRant</span> <span class="token punctuation">&#123;</span>  kind<span class="token operator">:</span> <span class="token string">"rant"</span>  width<span class="token operator">:</span> <span class="token builtin">number</span>  height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">ISquare</span> <span class="token punctuation">&#123;</span>  kind<span class="token operator">:</span> <span class="token string">"square"</span>  width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">Area</span> <span class="token operator">=</span> ICircle <span class="token operator">|</span> IRant <span class="token operator">|</span> ISquare<span class="token keyword">const</span> <span class="token function-variable function">isAssertion</span> <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">getArea</span> <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token operator">:</span> Area<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">"circle"</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token number">3.14</span> <span class="token operator">*</span> obj<span class="token punctuation">.</span>r <span class="token operator">**</span> <span class="token number">2</span>    <span class="token keyword">case</span> <span class="token string">"rant"</span><span class="token operator">:</span>      <span class="token keyword">return</span> obj<span class="token punctuation">.</span>height <span class="token operator">*</span> obj<span class="token punctuation">.</span>width    <span class="token keyword">case</span> <span class="token string">"square"</span><span class="token operator">:</span>      <span class="token keyword">return</span> obj<span class="token punctuation">.</span>width <span class="token operator">*</span> obj<span class="token punctuation">.</span>width    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token function">isAssertion</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 必须实现所有逻辑</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS-基础类型</title>
      <link href="/2023/08/09/ts-ji-chu-lei-xing/"/>
      <url>/2023/08/09/ts-ji-chu-lei-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>TS 中冒号后面的都为类型标识</p></blockquote><h2 id="一-布尔、数字、字符串类型"><a href="#一-布尔、数字、字符串类型" class="headerlink" title="一.布尔、数字、字符串类型"></a>一.布尔、数字、字符串类型</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> bool<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>包装类型</strong></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> s1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token comment">// let s2:string = new String('abc') //报错</span><span class="token keyword">let</span> s3<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"1"</span> <span class="token comment">// 在赋予值的时候 子集可以赋予给父级</span><span class="token keyword">let</span> s4<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token comment">// 类的类型，类类型，用来描述实例的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>规范</strong> :小写的类型一般用于描述基本类型 大写的用来描述的是实例类型</p><h2 id="二-数组"><a href="#二-数组" class="headerlink" title="二.数组"></a>二.数组</h2><p>声明数组中元素数据类型</p><blockquote><p><strong>类型[]</strong> 和<strong>Array&lt;类型&gt;</strong> 都可以用于声明数组</p></blockquote><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> arr1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr2<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr3<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr4<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// 泛型方式来声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS——环境配置和搭建</title>
      <link href="/2023/08/08/ts-huan-jing-pei-zhi-he-da-jian/"/>
      <url>/2023/08/08/ts-huan-jing-pei-zhi-he-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="一-Typescript-的价值是什么"><a href="#一-Typescript-的价值是什么" class="headerlink" title="一.Typescript 的价值是什么"></a>一.Typescript 的价值是什么</h2><p><code>TypeScript</code>是<code>Javascript</code>的超集，遵循最新的<code>ES5/ES6</code>规范。<code>Typescript</code>扩展了<code>Javascript</code>语法。</p><ul><li>Typescript 更像后端 JAVA,让<code>JS</code>可以开发大型企业应用</li><li>TS 提供的类型系统可以帮助我们在写代码时提供丰富的语法提示</li><li>在编写代码时会对代码进行类型检查从而避免很多线上错误</li></ul><blockquote><p><code>TypeScript</code>不会取代<code>JS</code>, <strong>尤雨溪：</strong> 我认为将类型添加到<code>JS</code>本身是一个漫长的过程 。让委员会设计一个类型系统是（根据<code>TC39</code>的经历来判断）不切实际的 。</p></blockquote><h2 id="二-环境配置"><a href="#二-环境配置" class="headerlink" title="二.环境配置"></a>二.环境配置</h2><h3 id="1-全局编译-TS-文件"><a href="#1-全局编译-TS-文件" class="headerlink" title="1.全局编译 TS 文件"></a>1.全局编译 TS 文件</h3><p>全局安装<code>typescript</code>对<code>TS</code>进行编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> typescript <span class="token parameter variable">-g</span>tsc <span class="token parameter variable">--init</span> <span class="token comment"># 生成tsconfig.json</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tsc <span class="token comment"># 可以将ts文件编译成js文件</span>tsc <span class="token parameter variable">--watch</span> <span class="token comment"># 监控ts文件变化生成js文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>如何运行</strong></p><ol><li><p>最终直接生成 js 文件在运行。</p></li><li><p>vscode 插件来实现代码的运行(临时测试)</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># code-runner 如果是js文件 内部会直接采用 node + 文件名来执行此文件 ,如果是ts文件 需要通过ts-node 来直接执行</span><span class="token function">npm</span> <span class="token function">install</span> ts-node <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>通过构建工具将代码转化成 js 在去运行 （webpack,rollup,esbuild） 最终便衣成 js 执行</li></ol><h3 id="2-配置rollup环境"><a href="#2-配置rollup环境" class="headerlink" title="2.配置rollup环境"></a>2.配置<code>rollup</code>环境</h3><ul><li><p>安装依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> rollup typescript rollup-plugin-typescript2 @rollup/plugin-node-resolve rollup-plugin-serve <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>rollup-plugin-typescript2: 这是 Rollup 中最常用的 TypeScript 插件,可以将 TypeScript 代码编译为 JavaScript 代码,并允许 Rollup 处理和打包。</li><li>@rollup/plugin-node-resolve: 这个插件可以让 Rollup 解析 Node.js 方式的模块导入,这样 Rollup 可以正确处理像 import/export 这样的语法。</li><li>rollup-plugin-serve: 这个插件可以启动一个服务器,并实时重新加载和更新当源代码变化时的页面。非常适合在开发过程中使用。</li><li>TypeScript: TypeScript 是一个 JavaScript 的超集语言,增加了类型系统,可以在编译为 JavaScript 前对代码进行检查。</li><li>Rollup: Rollup 是一个模块打包器,可以将小块代码编译成一个大块复杂的代码,常用于打包 JavaScript 库。</li></ul></li><li><p>初始化<code>TS</code>配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx tsc <span class="token parameter variable">--init</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>rollup.config.js</code>配置操作</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 默认rollup 打包的时候会查找当前目录下 rollup.config.js这个文件</span><span class="token comment">// 采用es模块来编写配置文件</span><span class="token comment">// node中有模块规范默认是 commonjs , 也可以改成esm模块规范</span><span class="token keyword">import</span> ts <span class="token keyword">from</span> <span class="token string">"rollup-plugin-typescript2"</span><span class="token keyword">import</span> serve <span class="token keyword">from</span> <span class="token string">"rollup-plugin-serve"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> nodeResolve <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@rollup/plugin-node-resolve"</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fileURLToPath <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"url"</span> <span class="token comment">//转换url为path</span><span class="token comment">// import.meta.url 当前文件的绝对路径 file://xxxx/xxx/xxx</span><span class="token keyword">const</span> __filename <span class="token operator">=</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token comment">// 当前文件的绝对路径</span><span class="token keyword">const</span> __dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span> <span class="token comment">// 当前文件所在的文件夹目录 绝对路径</span><span class="token comment">// 打包的配置对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">"./src/index.ts"</span><span class="token punctuation">,</span> <span class="token comment">// 项目入口</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">file</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist/bundle.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 当前的文件在当前目录下的dist目录</span>    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">"iife"</span><span class="token punctuation">,</span> <span class="token comment">// 打包后的格式 iife 自执行  (function()&#123;&#125;)()</span>    <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token function">nodeResolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// （第三方包的入口）入口文件可以是js 也可以是ts</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">tsconfig</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"tsconfig.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//所需要结合的ts</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">serve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token literal-property property">openPage</span><span class="token operator">:</span> <span class="token string">"/public/index.html"</span><span class="token punctuation">,</span>      <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>      <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>package.json</code>配置</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"my-ts"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"test.js"</span><span class="token punctuation">,</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"rollup -c -w"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"@rollup/plugin-node-resolve"</span><span class="token operator">:</span> <span class="token string">"^15.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"rollup"</span><span class="token operator">:</span> <span class="token string">"^3.27.2"</span><span class="token punctuation">,</span>    <span class="token property">"rollup-plugin-serve"</span><span class="token operator">:</span> <span class="token string">"^2.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"rollup-plugin-typescript2"</span><span class="token operator">:</span> <span class="token string">"^0.35.0"</span><span class="token punctuation">,</span>    <span class="token property">"typescript"</span><span class="token operator">:</span> <span class="token string">"^5.1.6"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>tsconfig.json</code>配置修改</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//开启sourceMap</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"ESNext"</span> <span class="token comment">// 指定生成的模块代码</span>    <span class="token comment">//....</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法</title>
      <link href="/2023/08/02/tan-xin-suan-fa/"/>
      <url>/2023/08/02/tan-xin-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a>455. 分发饼干</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/assign-cookies/">https://leetcode.cn/problems/assign-cookies/</a></p><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 <code>i</code>，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: g &#x3D; [1,2,3], s &#x3D; [1,1]输出: 1解释:你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。所以你应该输出1。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: g &#x3D; [1,2], s &#x3D; [1,2,3]输出: 2解释:你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。你拥有的饼干数量和尺寸都足以让所有孩子满足。所以你应该输出2.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= g.length &lt;= 3 * 104</code></li><li><code>0 &lt;= s.length &lt;= 3 * 104</code></li><li><code>1 &lt;= g[i], s[j] &lt;= 231 - 1</code></li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; g * @param &#123;number[]&#125; s * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">findContentChildren</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">g<span class="token punctuation">,</span> s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  g<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>  s<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token operator">++</span>      i<span class="token operator">++</span>      j<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      j<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="376-摆动序列"><a href="#376-摆动序列" class="headerlink" title="376. 摆动序列"></a>376. 摆动序列</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/combination-sum/">https://leetcode.cn/problems/combination-sum/</a></p><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 <strong>摆动序列 。</strong>第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p><ul><li>例如， <code>[1, 7, 4, 9, 2, 5]</code> 是一个 <strong>摆动序列</strong> ，因为差值 <code>(6, -3, 5, -7, 3)</code> 是正负交替出现的。</li><li>相反，<code>[1, 4, 7, 2, 5]</code> 和 <code>[1, 7, 4, 5, 5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</li></ul><p><strong>子序列</strong> 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p><p>给你一个整数数组 <code>nums</code> ，返回 <code>nums</code> 中作为 <strong>摆动序列</strong> 的 <strong>最长子序列的长度</strong> 。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,7,4,9,2,5]输出：6解释：整个序列均为摆动序列，各元素之间的差值为 (6, -3, 5, -7, 3) 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,17,5,10,13,15,10,5,16,8]输出：7解释：这个序列包含几个长度为 7 摆动序列。其中一个是 [1, 17, 10, 13, 10, 16, 8] ，各元素之间的差值为 (16, -7, 3, -3, 6, -8) 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,2,3,4,5,6,7,8,9]输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">wiggleMaxLength</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 边界条件,数组长度小于等于1直接返回长度</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 记录摆动序列的长度,默认为1</span>  <span class="token keyword">let</span> preDiff <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 前一对差值</span>  <span class="token keyword">let</span> curDiff <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 当前一对差值</span>  <span class="token comment">// 从 0 到长度 - 1,两两比较元素大小</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    curDiff <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">// 计算当前一对的差值</span>    <span class="token comment">// 如果当前一对差值符号与前一对不同,更新摆动序列长度</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>curDiff <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> preDiff <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>curDiff <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> preDiff <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token operator">++</span>      preDiff <span class="token operator">=</span> curDiff    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token comment">/** * 核心思路: * 1. 计算出相邻元素的差值 * 2. 如果前后差值符号不同,表示摆动,更新序列长度 * 3. 返回最后得到的摆动序列的最大长度 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li>怎么判断到达定点</li><li>怎么删除多余的数据</li></ul><h2 id="摆动序列-376"><a href="#摆动序列-376" class="headerlink" title="摆动序列-376"></a>摆动序列-376</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/combination-sum/">https://leetcode.cn/problems/combination-sum/</a></p><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 <strong>摆动序列 。</strong>第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p><ul><li>例如， <code>[1, 7, 4, 9, 2, 5]</code> 是一个 <strong>摆动序列</strong> ，因为差值 <code>(6, -3, 5, -7, 3)</code> 是正负交替出现的。</li><li>相反，<code>[1, 4, 7, 2, 5]</code> 和 <code>[1, 7, 4, 5, 5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</li></ul><p><strong>子序列</strong> 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p><p>给你一个整数数组 <code>nums</code> ，返回 <code>nums</code> 中作为 <strong>摆动序列</strong> 的 <strong>最长子序列的长度</strong> 。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,7,4,9,2,5]输出：6解释：整个序列均为摆动序列，各元素之间的差值为 (6, -3, 5, -7, 3) 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,17,5,10,13,15,10,5,16,8]输出：7解释：这个序列包含几个长度为 7 摆动序列。其中一个是 [1, 17, 10, 13, 10, 16, 8] ，各元素之间的差值为 (16, -7, 3, -3, 6, -8) 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,2,3,4,5,6,7,8,9]输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h3 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a>解析</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">wiggleMaxLength</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 边界条件,数组长度小于等于1直接返回长度</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 记录摆动序列的长度,默认为1</span>  <span class="token keyword">let</span> preDiff <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 前一对差值</span>  <span class="token keyword">let</span> curDiff <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 当前一对差值</span>  <span class="token comment">// 从 0 到长度 - 1,两两比较元素大小</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    curDiff <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">// 计算当前一对的差值</span>    <span class="token comment">// 如果当前一对差值符号与前一对不同,更新摆动序列长度</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>curDiff <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> preDiff <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>curDiff <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> preDiff <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token operator">++</span>      preDiff <span class="token operator">=</span> curDiff    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token comment">/** * 核心思路: * 1. 计算出相邻元素的差值 * 2. 如果前后差值符号不同,表示摆动,更新序列长度 * 3. 返回最后得到的摆动序列的最大长度 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h3><ul><li>怎么判断到达定点</li><li>怎么删除多余的数据</li></ul><h2 id="最大子数组和-53"><a href="#最大子数组和-53" class="headerlink" title="最大子数组和 - 53"></a>最大子数组和 - 53</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/maximum-subarray/">https://leetcode.cn/problems/maximum-subarray/</a></p><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>子数组</strong> 是数组中的一个连续部分。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [-2,1,-3,4,-1,2,1,-5,4]输出：6解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1]输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [5,4,-1,7,8]输出：23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><h3 id="解析-3"><a href="#解析-3" class="headerlink" title="解析"></a>解析</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">//默认第一项最大</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">//截止前一项的最大值</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> res <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 计算下一项的最大值</span>    max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token comment">//最终的比较</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> max<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="买卖股票的最佳时机-II-122"><a href="#买卖股票的最佳时机-II-122" class="headerlink" title="买卖股票的最佳时机 II - 122"></a>买卖股票的最佳时机 II - 122</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/</a></p><ul><li><p>给你一个整数数组 <code>prices</code> ，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。</p><p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售。</p><p>返回 <em>你能获得的 <strong>最大</strong> 利润</em> 。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：prices &#x3D; [7,1,5,3,6,4]输出：7解释：在第 2 天（股票价格 &#x3D; 1）的时候买入，在第 3 天（股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5 - 1 &#x3D; 4 。     随后，在第 4 天（股票价格 &#x3D; 3）的时候买入，在第 5 天（股票价格 &#x3D; 6）的时候卖出, 这笔交易所能获得利润 &#x3D; 6 - 3 &#x3D; 3 。     总利润为 4 + 3 &#x3D; 7 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：prices &#x3D; [1,2,3,4,5]输出：4解释：在第 1 天（股票价格 &#x3D; 1）的时候买入，在第 5 天 （股票价格 &#x3D; 5）的时候卖出, 这笔交易所能获得利润 &#x3D; 5 - 1 &#x3D; 4 。     总利润为 4 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：prices &#x3D; [7,6,4,3,1]输出：0解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 3 * 104</code></li><li><code>0 &lt;= prices[i] &lt;= 104</code></li></ul></li></ul><h3 id="解析-4"><a href="#解析-4" class="headerlink" title="解析"></a>解析</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxProfit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prices</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS输出</title>
      <link href="/2023/08/02/js-shu-chu/"/>
      <url>/2023/08/02/js-shu-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>考察函数和作用域的 PRIORITY,以及 new 在执行时的一些机制。需要结合执行上下文来分析函数和变量声明的顺序与优先级。</p></blockquote><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"11=>"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">&#125;</span>Foo<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"22=>"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"33=>"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> <span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"44=>"</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"55=>"</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>Foo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Foo<span class="token punctuation">.</span>getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 22=> 22</span><span class="token comment">// 44=> 44</span><span class="token comment">// 11=> 11</span><span class="token comment">// 11=> 11</span><span class="token comment">// 22=> 22</span><span class="token comment">// 33=> 33</span><span class="token comment">// 33=> 33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li>Foo.getName() 调用的是 Foo 上的静态方法,输出 22。</li><li>第一次调用 getName() 输出 44,调用的是全局作用域下声明的 getName 变量函数。</li><li>Foo().getName() 输出 11,Foo() 构造函数内部声明的 getName 变量,优先级最高。</li><li>第二次调用 getName() 输出 11,因为被 Foo() 内的 getName 覆盖了。</li><li>new Foo.getName() 输出 22,new 执行的是 Foo 上的静态方法。</li><li>new Foo().getName() 输出 33,new Foo() 创建了一个实例,调用的是原型上的方法。</li><li>new new Foo().getName() 也输出 33,新的语法并没有改变其机制,仍然执行原型上的方法。</li></ol><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ol><li>远算优先级</li></ol><ul><li>分组（…）19</li><li>成员访问（a.b） ，new（带参数了；列表），函数调用，可选链 优先级较高 为 18</li><li>new（无参数列表） 17 new Foo 属于无参数列表</li><li>后置递增 /递减 16</li><li>赋值 （从右到左） 2</li></ul><ol start="2"><li>new 关键字会进行如下的操作：</li></ol><ul><li>创建一个空的简单 JavaScript 对象（即 {}）；</li><li>为步骤 1 新创建的对象添加属性 <strong>proto</strong>，将该属性链接至构造函数的原型对象；</li><li>将步骤 1 新创建的对象作为 this 的上下文；</li><li>如果该函数没有返回对象，则返回 this。</li></ul><ol start="3"><li><code>.</code>和<code>new</code>的优先级</li></ol><ul><li>. 当 new 和 . 同时出现时,new 的优先级更高,例如:<br>new Foo().getName()<br>这里 new Foo()会先执行。</li><li>当 . 在 new 的参数位置时,. 的优先级更高,例如:<br>new Foo.getName()<br>这里 Foo.getName 会先解析。</li><li>当 . 不在 new 的参数位置时,new 的优先级更高。</li></ul><p>这么设定优先级主要基于以下考虑:</p><ul><li>new 作为创建实例的运算符,应该先执行。</li><li>. 在 new 的参数位置时,要先解析出一个静态方法。</li><li>. 不在参数位置时,应该作用于 new 创建的实例上。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单React-Hooks实现</title>
      <link href="/2023/07/31/react-hooks/"/>
      <url>/2023/07/31/react-hooks/</url>
      
        <content type="html"><![CDATA[<h2 id="1-React-Hooks"><a href="#1-React-Hooks" class="headerlink" title="1. React Hooks"></a>1. React Hooks</h2><ul><li>Hook 可以让你在不编写 <code>class</code> 的情况下使用 <code>state</code> 以及其他的 React 特性</li></ul><h2 id="2-useState"><a href="#2-useState" class="headerlink" title="2. useState"></a>2. useState</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> hookStates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> hookIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> oldState <span class="token operator">=</span> <span class="token punctuation">(</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span> <span class="token operator">=</span>    hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span> <span class="token operator">||</span> initialState<span class="token punctuation">)</span>  <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> hookIndex  <span class="token keyword">function</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> newState <span class="token operator">=</span> <span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">?</span> <span class="token function">action</span><span class="token punctuation">(</span>oldState<span class="token punctuation">)</span> <span class="token operator">:</span> action    hookStates<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> newState    <span class="token function">scheduleUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//重新diff算法渲染</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-useCallback-useMemo"><a href="#3-useCallback-useMemo" class="headerlink" title="3.useCallback+useMemo"></a>3.useCallback+useMemo</h2><ul><li>把内联回调函数及依赖项数组作为参数传入 <code>useCallback</code>，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新</li><li>把创建函数和依赖项数组作为参数传入 <code>useMemo</code>，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"./react"</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"./react-dom/client"</span><span class="token keyword">const</span> DOMRoot <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">let</span> <span class="token function-variable function">Child</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> handleClick <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Child render"</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span>number<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span>Child <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"App render"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"zhufeng"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> number <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> handleClick <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setName</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span> <span class="token attr-name">handleClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>DOMRoot<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token parameter">factory<span class="token punctuation">,</span> deps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//非第一次</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>lastMemo<span class="token punctuation">,</span> lastDeps<span class="token punctuation">]</span> <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span>    <span class="token keyword">let</span> same <span class="token operator">=</span> deps<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">===</span> lastDeps<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>same<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      hookIndex<span class="token operator">++</span>      <span class="token keyword">return</span> lastMemo    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> newMemo <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>newMemo<span class="token punctuation">,</span> deps<span class="token punctuation">]</span>      <span class="token keyword">return</span> newMemo    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初次渲染</span>    <span class="token keyword">let</span> newMemo <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>newMemo<span class="token punctuation">,</span> deps<span class="token punctuation">]</span>    <span class="token keyword">return</span> newMemo  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> deps</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>lastCallback<span class="token punctuation">,</span> lastDeps<span class="token punctuation">]</span> <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span>    <span class="token keyword">let</span> same <span class="token operator">=</span> deps<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">===</span> lastDeps<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>same<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      hookIndex<span class="token operator">++</span>      <span class="token keyword">return</span> lastCallback    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">,</span> deps<span class="token punctuation">]</span>      <span class="token keyword">return</span> callback    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>callback<span class="token punctuation">,</span> deps<span class="token punctuation">]</span>    <span class="token keyword">return</span> callback  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-useReducer"><a href="#4-useReducer" class="headerlink" title="4. useReducer"></a>4. useReducer</h2><ul><li>useState 的替代方案。它接收一个形如 (state, action) =&gt; newState 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法</li><li>在某些场景下，useReducer 会比 useState 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等</li></ul><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"./react"</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"./react-dom/client"</span><span class="token keyword">const</span> DOMRoot <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">"ADD"</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> state<span class="token punctuation">.</span>number <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> <span class="token string">"MINUS"</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> state<span class="token punctuation">.</span>number <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">return</span> state  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token literal-property property">Count</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>state<span class="token punctuation">.</span>number<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"ADD"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"MINUS"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>Counter <span class="token operator">/</span><span class="token operator">></span>DOMRoot<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useReducer</span><span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> initialState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span> <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span> <span class="token operator">||</span> initialState  <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> hookIndex  <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> oldState <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>reducer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> newState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>oldState<span class="token punctuation">,</span> action<span class="token punctuation">)</span>      hookStates<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> newState    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> newState <span class="token operator">=</span> <span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">?</span> <span class="token function">action</span><span class="token punctuation">(</span>oldState<span class="token punctuation">)</span> <span class="token operator">:</span> action      hookStates<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> newState    <span class="token punctuation">&#125;</span>    <span class="token function">scheduleUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//更新</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">useReducer</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-useContext"><a href="#5-useContext" class="headerlink" title="5. useContext"></a>5. useContext</h2><ul><li>接收一个 context 对象（React.createContext 的返回值）并返回该 context 的当前值</li><li>当前的 context 值由上层组件中距离当前组件最近的 <code>&lt;MyContext.Provider&gt;</code> 的 value prop 决定</li><li>当组件上层最近的 <code>&lt;MyContext.Provider&gt;</code> 更新时，该 Hook 会触发重渲染，并使用最新传递给 <code>MyContext provider</code> 的 context value 值</li><li>useContext(MyContext) 相当于 class 组件中的 <code>static contextType = MyContext</code> 或者 <code>&lt;MyContext.Consumer&gt;</code></li><li>useContext(MyContext) 只是让你能够读取 context 的值以及订阅 context 的变化。你仍然需要在上层组件树中使用 <code>&lt;MyContext.Provider&gt;</code> 来为下层组件提供 context</li></ul><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"./react"</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"./react-dom/client"</span><span class="token keyword">const</span> DOMRoot <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> CounterContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">"add"</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> state<span class="token punctuation">.</span>number <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> <span class="token string">"minus"</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> state<span class="token punctuation">.</span>number <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">return</span> state  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> dispatch <span class="token punctuation">&#125;</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useContext</span><span class="token punctuation">(</span>CounterContext<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>state<span class="token punctuation">.</span>number<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"add"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"minus"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">-</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CounterContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> dispatch <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Counter</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CounterContext.Provider</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>DOMRoot<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useContext</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> context<span class="token punctuation">.</span>_currentValue<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-useEffect"><a href="#6-useEffect" class="headerlink" title="6. useEffect"></a>6. useEffect</h2><ul><li>在函数组件主体内（这里指在 React 渲染阶段）改变 DOM、添加订阅、设置定时器、记录日志以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性</li><li>使用 useEffect 完成副作用操作。赋值给 useEffect 的函数会在组件渲染到屏幕之后执行。你可以把 effect 看作从 React 的纯函数式世界通往命令式世界的逃生通道</li><li>useEffect 就是一个 Effect Hook，给函数组件增加了操作副作用的能力。它跟 class 组件中的 <code>componentDidMount</code>、<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 具有相同的用途，只不过被合并成了一个 API</li><li>该 Hook 接收一个包含命令式、且可能有副作用代码的函数</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"./react"</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"./react-dom/client"</span><span class="token keyword">const</span> DOMRoot <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开启一个新的定时器"</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> $timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"销毁老的定时器"</span><span class="token punctuation">)</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>$timer<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Counter</span></span> <span class="token punctuation">/></span></span>DOMRoot<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> dependencies</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> hookIndex  <span class="token keyword">if</span> <span class="token punctuation">(</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>destroy<span class="token punctuation">,</span> lastDeps<span class="token punctuation">]</span> <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span>    <span class="token keyword">let</span> same <span class="token operator">=</span>      dependencies <span class="token operator">&amp;&amp;</span>      dependencies<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">===</span> lastDeps<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>same<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      hookIndex<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      destroy <span class="token operator">&amp;&amp;</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        hookStates<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dependencies<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      hookIndex<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      hookStates<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dependencies<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    hookIndex<span class="token operator">++</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-useLayoutEffect"><a href="#7-useLayoutEffect" class="headerlink" title="7. useLayoutEffect"></a>7. useLayoutEffect</h2><ul><li><p>其函数签名与 <code>useEffect</code> 相同，但它会在所有的 <code>DOM</code> 变更之后同步调用 effect</p></li><li><p><code>useEffect</code>不会阻塞浏览器渲染，而 <code>useLayoutEffect</code> 会浏览器渲染</p></li><li><p><code>useEffect</code>会在浏览器渲染结束后执行,<code>useLayoutEffect</code> 则是在 <code>DOM</code> 更新完成后,浏览器绘制之前执行</p></li><li><p>useLayoutEffect 相对于微任务，useEffect 相当于宏任务</p></li></ul><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom/client"</span><span class="token keyword">const</span> DOMRoot <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">Animate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> ref <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate(500px)</span><span class="token template-punctuation string">`</span></span> <span class="token comment">//TODO</span>    ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transition <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">all 500ms</span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> style <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">"100px"</span><span class="token punctuation">,</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token string">"100px"</span><span class="token punctuation">,</span>    <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token string">"50%"</span><span class="token punctuation">,</span>    <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">&#123;</span>style<span class="token punctuation">&#125;</span> ref<span class="token operator">=</span><span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>Animate <span class="token operator">/</span><span class="token operator">></span>DOMRoot<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><ul><li>用 useEffect 有动画，先浏览器进行渲染一次，然后再执行 useEffect 函数二次渲染</li><li>用 useLayoutEffect 无动画，然后再执行 useLayoutEffect 函数合并样式更新，再进行渲染</li></ul><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> dependencies</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> currentIndex <span class="token operator">=</span> hookIndex  <span class="token keyword">if</span> <span class="token punctuation">(</span>hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>destroy<span class="token punctuation">,</span> lastDeps<span class="token punctuation">]</span> <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span>    <span class="token keyword">let</span> same <span class="token operator">=</span>      dependencies <span class="token operator">&amp;&amp;</span>      dependencies<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">===</span> lastDeps<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>same<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      hookIndex<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      destroy <span class="token operator">&amp;&amp;</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        hookStates<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dependencies<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      hookIndex<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      hookStates<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dependencies<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    hookIndex<span class="token operator">++</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-useRef"><a href="#8-useRef" class="headerlink" title="8. useRef"></a>8. useRef</h2><ul><li>当你改变 <code>ref.current</code> 属性时，React 不会重新渲染你的组件。React 不知道你何时改变它，因为 ref 是一个普通的 JavaScript 对象。</li></ul><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span> <span class="token operator">=</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">current</span><span class="token operator">:</span> initialState <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> hookStates<span class="token punctuation">[</span>hookIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hooks-怎么获取上一轮的-state"><a href="#hooks-怎么获取上一轮的-state" class="headerlink" title="hooks 怎么获取上一轮的 state"></a>hooks 怎么获取上一轮的 state</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">usePrevious</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    ref<span class="token punctuation">.</span>current <span class="token operator">=</span> value  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> ref<span class="token punctuation">.</span>current<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="取最新值"><a href="#取最新值" class="headerlink" title="取最新值"></a>取最新值</h3><ul><li>使用 useRef，每次值更新的时候把最新的值赋给 ref.current</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"./react"</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"./react-dom/client"</span><span class="token keyword">const</span> DOMRoot <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> valueRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> newValue <span class="token operator">=</span> state <span class="token operator">+</span> <span class="token number">1</span>    valueRef<span class="token punctuation">.</span>current <span class="token operator">=</span> newValue    <span class="token function">setState</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>    <span class="token function">otherFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">otherFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> valueRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>state<span class="token operator">:</span><span class="token punctuation">&#123;</span>state<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>Counter <span class="token operator">/</span><span class="token operator">></span>DOMRoot<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-useImperativeHandle"><a href="#9-useImperativeHandle" class="headerlink" title="9. useImperativeHandle"></a>9. useImperativeHandle</h2><ul><li>forwardRef 将 ref 从父组件中转发到子组件中的 dom 元素上,子组件接受 props 和 ref 作为参数</li><li><code>useImperativeHandle</code> 可以让你在使用 ref 时自定义暴露给父组件的实例值</li></ul><h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a><strong>案例</strong></h3><p>点击父组件获取焦点按钮 子组件获取焦点</p><p><strong>注意：</strong>通过 forwardRef 转发给子组件的 inputa 绑定 ref，但是有危险，父组件可以任意操作子组件的元素，所以采用 useImperativeHandle，可以让你在使用 ref 时自定义暴露给父组件的实例值</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom/client"</span><span class="token keyword">const</span> DOMRoot <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  React<span class="token punctuation">.</span><span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>inputRef<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> ForwardChild <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">getFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inputRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span>    inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"focus"</span>    inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ForwardChild</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>inputRef<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>getFocus<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">获得焦点</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">debugger</span>          <span class="token function">setNumber</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">></span></span><span class="token plain-text">        +      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Parent</span></span> <span class="token punctuation">/></span></span>DOMRoot<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span><span class="token parameter">ref<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ref<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3-ace-editor的使用</title>
      <link href="/2023/07/19/vue3-ace-editor-de-shi-yong/"/>
      <url>/2023/07/19/vue3-ace-editor-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>npm 地址：<a href="https://www.npmjs.com/package/vue3-ace-editor">https://www.npmjs.com/package/vue3-ace-editor</a></p><p>官网地址：<a href="https://ace.c9.io/">Ace - The High Performance Code Editor for the Web</a><br>Github: <a href="https://github.com/ajaxorg/ace/">GitHub - ajaxorg/ace: Ace (Ajax.org Cloud9 Editor)</a><br>vue2 版：<a href="https://github.com/chairuosen/vue2-ace-editor">GitHub - chairuosen/vue2-ace-editor</a><br>vue3 版：<a href="https://github.com/CarterLi/vue3-ace-editor">GitHub - CarterLi/vue3-ace-editor</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i vue3-ace-editor<span class="token function">npm</span> i ace-builds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>或者</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i vue3-ace-editor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>.npmrc</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">shamefully<span class="token operator">-</span>hoist<span class="token operator">=</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>app.vue</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;header&gt;    &lt;select v-model&#x3D;&quot;states.lang&quot;&gt;      &lt;option v-for&#x3D;&quot;lang of langs&quot; :value&#x3D;&quot;lang&quot;&gt;&#123;&#123; lang &#125;&#125;&lt;&#x2F;option&gt;    &lt;&#x2F;select&gt;    &lt;select v-model&#x3D;&quot;states.theme&quot;&gt;      &lt;option v-for&#x3D;&quot;theme of themes&quot; :value&#x3D;&quot;theme&quot;&gt;&#123;&#123; theme &#125;&#125;&lt;&#x2F;option&gt;    &lt;&#x2F;select&gt;  &lt;&#x2F;header&gt;  &lt;main style&#x3D;&quot;height: 0&quot;&gt;    &lt;VAceEditor      ref&#x3D;&quot;aceRef&quot;      v-model:value&#x3D;&quot;states.content&quot;      class&#x3D;&quot;vue-ace-editor&quot;      :lang&#x3D;&quot;states.lang&quot;      :theme&#x3D;&quot;states.theme&quot;      :options&#x3D;&quot;&#123;        useWorker: true,        enableBasicAutocompletion: true,        enableSnippets: true,        enableLiveAutocompletion: true,      &#125;&quot;    &#x2F;&gt;  &lt;&#x2F;main&gt;&lt;&#x2F;template&gt;&lt;script setup lang&#x3D;&quot;ts&quot;&gt;import &#123; reactive, watch &#125; from &quot;vue&quot;import &#123; VAceEditor &#125; from &quot;vue3-ace-editor&quot;import &quot;.&#x2F;ace-config&quot;const langs &#x3D; [&quot;json&quot;, &quot;javascript&quot;, &quot;html&quot;, &quot;yaml&quot;]const themes &#x3D; [&quot;github&quot;, &quot;chrome&quot;, &quot;monokai&quot;]const states &#x3D; reactive(&#123;  lang: &quot;yaml&quot;,  theme: &quot;github&quot;,  content: &quot;&quot;,&#125;)watch(  () &#x3D;&gt; states.lang,  async (lang) &#x3D;&gt; &#123;    states.content &#x3D; (      await &#123;        json: import(&quot;..&#x2F;package.json?raw&quot;),        javascript: import(&quot;.&#x2F;ace-config.js?raw&quot;),        html: import(&quot;..&#x2F;index.html?raw&quot;),        yaml: import(&quot;..&#x2F;pnpm-lock.yaml?raw&quot;),      &#125;[lang]    ).default  &#125;,  &#123; immediate: true &#125;)&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;header &#123;  display: flex;&#125;select &#123;  margin-right: 15px;&#125;main &#123;  flex: 1;  margin-top: 15px;  display: flex;&#125;.vue-ace-editor &#123;  font-size: 16px;  border: 1px solid;  flex: 1;&#125;.outline-tree &#123;  width: 500px;  margin-left: 15px;  border: 1px solid;  font-size: 16px;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ace-config.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> ace <span class="token keyword">from</span> <span class="token string">"ace-builds"</span><span class="token keyword">import</span> modeJsonUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/mode-json?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/mode/json"</span><span class="token punctuation">,</span> modeJsonUrl<span class="token punctuation">)</span><span class="token keyword">import</span> modeJavascriptUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/mode-javascript?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/mode/javascript"</span><span class="token punctuation">,</span> modeJavascriptUrl<span class="token punctuation">)</span><span class="token keyword">import</span> modeHtmlUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/mode-html?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/mode/html"</span><span class="token punctuation">,</span> modeHtmlUrl<span class="token punctuation">)</span><span class="token keyword">import</span> modeYamlUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/mode-yaml?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/mode/yaml"</span><span class="token punctuation">,</span> modeYamlUrl<span class="token punctuation">)</span><span class="token keyword">import</span> themeGithubUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/theme-github?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/theme/github"</span><span class="token punctuation">,</span> themeGithubUrl<span class="token punctuation">)</span><span class="token keyword">import</span> themeChromeUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/theme-chrome?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/theme/chrome"</span><span class="token punctuation">,</span> themeChromeUrl<span class="token punctuation">)</span><span class="token keyword">import</span> themeMonokaiUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/theme-monokai?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/theme/monokai"</span><span class="token punctuation">,</span> themeMonokaiUrl<span class="token punctuation">)</span><span class="token keyword">import</span> workerBaseUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/worker-base?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/mode/base"</span><span class="token punctuation">,</span> workerBaseUrl<span class="token punctuation">)</span><span class="token keyword">import</span> workerJsonUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/worker-json?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/mode/json_worker"</span><span class="token punctuation">,</span> workerJsonUrl<span class="token punctuation">)</span><span class="token keyword">import</span> workerJavascriptUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/worker-javascript?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/mode/javascript_worker"</span><span class="token punctuation">,</span> workerJavascriptUrl<span class="token punctuation">)</span><span class="token keyword">import</span> workerHtmlUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/worker-html?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/mode/html_worker"</span><span class="token punctuation">,</span> workerHtmlUrl<span class="token punctuation">)</span><span class="token keyword">import</span> workerYamlUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/worker-yaml?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/mode/yaml_worker"</span><span class="token punctuation">,</span> workerYamlUrl<span class="token punctuation">)</span><span class="token keyword">import</span> snippetsHtmlUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/snippets/html?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/snippets/html"</span><span class="token punctuation">,</span> snippetsHtmlUrl<span class="token punctuation">)</span><span class="token keyword">import</span> snippetsJsUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/snippets/javascript?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/snippets/javascript"</span><span class="token punctuation">,</span> snippetsJsUrl<span class="token punctuation">)</span><span class="token keyword">import</span> snippetsYamlUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/snippets/yaml?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/snippets/javascript"</span><span class="token punctuation">,</span> snippetsYamlUrl<span class="token punctuation">)</span><span class="token keyword">import</span> snippetsJsonUrl <span class="token keyword">from</span> <span class="token string">"ace-builds/src-noconflict/snippets/json?url"</span>ace<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">setModuleUrl</span><span class="token punctuation">(</span><span class="token string">"ace/snippets/json"</span><span class="token punctuation">,</span> snippetsJsonUrl<span class="token punctuation">)</span><span class="token keyword">import</span> <span class="token string">"ace-builds/src-noconflict/ext-language_tools"</span>ace<span class="token punctuation">.</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">"ace/ext/language_tools"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一组导入和配置代码是用于自定义配置 Ace 编辑器的各个模块,主要包括:</p><ol><li>导入不同语言的语法模式模块,并设置对应 URL:</li></ol><ul><li>json</li><li>javascript</li><li>html</li><li>yaml</li></ul><ol start="2"><li>导入不同的主题模块,并设置对应 URL:</li></ol><ul><li>github</li><li>chrome</li><li>monokai</li></ul><ol start="3"><li>导入基础 worker 和不同语言 worker,并设置对应 URL:</li></ol><ul><li>base worker</li><li>json worker</li><li>javascript worker</li><li>html worker</li><li>yaml worker</li></ul><ol start="4"><li>导入不同语言的代码片段,并设置对应 URL:</li></ol><ul><li>html</li><li>javascript</li><li>yaml</li><li>json</li></ul><ol start="5"><li>导入语言工具扩展模块通过这种方式,可以从 Ace 构建版本中导入所需的模块,并通过 setModuleUrl 方法自定义它们的加载地址。</li></ol><p>这样做的主要优点是:</p><ul><li>可以将这些模块存储在自己的服务器上,而不是从 Ace CDN 加载。</li><li>可以自定义需要加载的模块,只导入应用需要的部分。</li><li>可以避免和其他版本的 Ace 冲突。</li><li>可以自定义模块的路径和名称。</li></ul><p>总而言之,这些配置可以高度自定义 Ace 在该应用中的资源加载方式,做到精简、去冲突和可控。</p><h2 id="API-介绍说明"><a href="#API-介绍说明" class="headerlink" title="API 介绍说明"></a>API 介绍说明</h2><h3 id="语法模式-mode-模块"><a href="#语法模式-mode-模块" class="headerlink" title="语法模式(mode)模块:"></a>语法模式(mode)模块:</h3><p>语法模式模块用于定义不同语言的语法规则,包括语法高亮、代码折叠、缩进等。<br>导入不同语言的 mode 模块可以让 Ace 编辑器支持对应的语言语法。比如导入 json mode 可以高亮 JSON 语法。</p><h3 id="Worker-模块"><a href="#Worker-模块" class="headerlink" title="Worker 模块:"></a>Worker 模块:</h3><p>Worker 模块用于完成语法检查、代码提示、自动补全等代码编辑功能。<br>其中:</p><ul><li>base worker 提供最基本的编辑功能</li><li>语言特定的 worker,如 json worker,可以提供对应的智能语法功能<br>Worker 模块需要结合对应的 mode 模块才能发挥作用。<br>例如 json worker 结合 json mode 才能实现 JSON 文件的智能提示、语法检查等功能。</li></ul><h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><p>在 Ace 编辑器中,导入不同语言的代码片段(snippets)的作用是提供代码自动补全和代码块功能。<br>代码片段为不同语言提供了常用代码块,用户可以通过触发关键字快速插入预定义的代码模板。<br>例如在 JavaScript 代码中输入 “for” 并触发补全,可以自动插入一个 for 循环代码块。<br>主要作用包括:</p><ol><li>提高编程效率,通过代码片段可以快速插入常用代码块,不用每次都重新编写重复代码。</li><li>减少编码错误,代码片段已定义好语法结构,使用后可以避免语法错误。</li><li>标准化代码风格,开发团队可以定义统一的代码片段,维持一致的代码风格。</li><li>支持不同语言,导入 html、js、yaml 等语言的片段可以分别编写对应的文件类型。</li><li>方便新手学习编程语言,可以通过代码片段查看语言代码结构和语法样例。</li><li>可以自定义代码片段,开发者可以根据项目需要自行定义额外的代码片段。</li></ol><h3 id="ext-language-tools-模块"><a href="#ext-language-tools-模块" class="headerlink" title="ext-language_tools 模块"></a>ext-language_tools 模块</h3><p><strong>ext-language_tools 模块:启用自动补全等高级编辑支持。</strong></p><p>它们之间的关系是:</p><ul><li><p>语法模式模块提供基础的语法和编辑能力。</p></li><li><p>Worker 模块基于语法模式实现智能编辑功能。</p></li><li><p>ext-language_tools 模块利用语法模式和 Worker 提供的能力,呈现自动补全等高级功能。</p></li></ul><p>也就是说,语法模式和 Worker 模块为 ext-language_tools 提供了必要的语法树分析和处理能力。<br>而 ext-language_tools 基于它们展示出自动补全、构建语法树等高级功能。</p><h3 id="option-配置"><a href="#option-配置" class="headerlink" title="option 配置"></a>option 配置</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">useWorker</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">enableBasicAutocompletion</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">enableSnippets</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">enableLiveAutocompletion</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>useWorker 是否使用 Worker 线程,启用语法检查和自动补全等功能,默认为 false,应设置为 true 以启用增强编辑功能。</li><li>enableBasicAutocompletion 启用基本自动补全功能,插入匹配的变量、方法名等,默认为 false。</li><li>enableSnippets 启用代码段(snippets)补全功能,允许插入预定义的代码片段,默认为 false。</li><li>enableLiveAutocompletion 实时自动补全,输入代码时即时显示补全建议,默认为 false。</li></ol><p>综合而言:</p><ul><li><p>useWorker 启用语法检查和编辑增强-</p></li><li><p>enableBasicAutocompletion 和 enableSnippets 启用基本补全和代码片段补全</p></li><li><p>enableLiveAutocompletion 实时补全,提供更好的用户体验</p></li></ul><p>建议都设置为 true,启用 Ace 编辑器的智能编辑功能,包括实时自动补全、代码检查、代码段插入等,可以大大提高开发效率。</p><p>需要与导入 language_tools 等模块配合使用,为 Ace 提供必要的语法分析和处理能力,才能发挥最大效果</p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>VAceEditor      ref<span class="token operator">=</span><span class="token string">"aceRef"</span>      v<span class="token operator">-</span>model<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"states.content"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"vue-ace-editor"</span>      <span class="token operator">:</span>lang<span class="token operator">=</span><span class="token string">"states.lang"</span>      <span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"states.theme"</span>      <span class="token operator">:</span>options<span class="token operator">=</span>"<span class="token punctuation">&#123;</span>        <span class="token literal-property property">enableBasicAutocompletion</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">enableSnippets</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">enableLiveAutocompletion</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>"    <span class="token operator">/</span><span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> VAceEditor <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue3-ace-editor'</span><span class="token keyword">import</span> <span class="token string">'ace-builds'</span><span class="token keyword">import</span> <span class="token string">'ace-builds/src-noconflict/mode-json'</span><span class="token keyword">import</span> <span class="token string">'ace-builds/src-noconflict/theme-chrome'</span><span class="token keyword">import</span> <span class="token string">'ace-builds/src-noconflict/snippets/json'</span><span class="token keyword">import</span> <span class="token string">'ace-builds/src-noconflict/ext-language_tools'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git删除本地无用分支</title>
      <link href="/2023/07/12/git-shan-chu-ben-di-wu-yong-fen-zhi/"/>
      <url>/2023/07/12/git-shan-chu-ben-di-wu-yong-fen-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="单个删除"><a href="#单个删除" class="headerlink" title="单个删除"></a>单个删除</h2><ol><li>首先查看所有本地分支的信息:</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-vv</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会列出每个本地分支,以及它们跟踪的远端分支。</p><ol start="2"><li>然后使用grep过滤出没有跟踪远端分支的本地分支:</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch <span class="token parameter variable">-p</span><span class="token function">git</span> branch <span class="token parameter variable">-vv</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'origin/.*: gone]'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>最后删除这些本地分支:</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>branch-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> local-branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以批量删除那些没有跟踪任何远端分支的本地分支了。另外,如果本地分支曾跟踪一个已经被删除的远端分支,也可以使用上述方法将其删除。使用这种方式可以定期清理本地无用的分支,保持仓库的整洁</p><h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><p>对于这个需求,我们可以通过 bash 的循环语句来实现批量删除:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-vv</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'origin/.*: gone]'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">git</span> branch <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解析:</p><ol><li><p>git branch -vv 列出所有分支详情</p></li><li><p>grep 过滤出 gone 的结果</p></li><li><p>awk 打印出第1列,也就是分支名</p></li><li><p>xargs 将分支名作为参数传给 git branch -D 命令这样就可以自动遍历所有无效分支并批量删除了。</p></li></ol><p>或者也可以用一个简单的 <strong>for 循环</strong>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">branch</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> branch <span class="token parameter variable">-vv</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'origin/.*: gone]'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token function">git</span> branch <span class="token parameter variable">-D</span> <span class="token variable">$branch</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果是一样的。需要注意的是,这会无差别删除所有无远程关联的本地分支,请按需求谨慎操作。</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pinia源码实现</title>
      <link href="/2023/07/11/pinia-yuan-ma-shi-xian/"/>
      <url>/2023/07/11/pinia-yuan-ma-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>代码地址：</p><ul><li><p><a href="https://github.com/ghx9908/pinia">https://github.com/ghx9908/pinia</a></p></li><li><p><a href="https://pinia.vuejs.org/">https://pinia.vuejs.org/</a></p></li><li><p><a href="https://github.com/vuejs/pinia">https://github.com/vuejs/pinia</a></p></li></ul><h2 id="一、Pinia-的优势"><a href="#一、Pinia-的优势" class="headerlink" title="一、Pinia 的优势"></a>一、Pinia 的优势</h2><ol><li>更简单的使用方式,通过组合式函数(compose APIs)轻松创建 store。</li><li>模块化 stores,每个页面一个 store,不需要手动注册和注入。</li><li>去中心化状态管理,组件可以直接引用需要的 store。</li><li><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd">支持 Vue devtools</a>调试</li><li>灵活的 store 结构,state 可以是函数或者对象。</li><li>同步或异步的 actions。</li><li>无需手动添加模块,store 自动拆分成多个模块。</li><li>完整的 TypeScript 支持。</li></ol><h2 id="二、Pinia-的基本使用"><a href="#二、Pinia-的基本使用" class="headerlink" title="二、Pinia 的基本使用"></a>二、Pinia 的基本使用</h2><h3 id="1-安装-Pinia"><a href="#1-安装-Pinia" class="headerlink" title="1.安装 Pinia"></a>1.安装 Pinia</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> pinia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-使用插件"><a href="#2-使用插件" class="headerlink" title="2.使用插件"></a>2.使用插件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createPinia <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"pinia"</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span> <span class="token comment">// 使用插件管理所有状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-定义-store"><a href="#3-定义-store" class="headerlink" title="3.定义 store"></a>3.定义 store</h3><blockquote><p>stores/counter.js</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"pinia"</span><span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 容器中的状态</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span> <span class="token comment">// action中更改状态</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-组件使用"><a href="#4-组件使用" class="headerlink" title="4.组件使用"></a>4.组件使用</h3><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &#123;&#123; store.count &#125;&#125;  &lt;button @click&#x3D;&quot;handleClick&quot;&gt;修改状态&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import &#123; useCounterStore &#125; from &quot;@&#x2F;stores&#x2F;counter&quot;const store &#x3D; useCounterStore()const handleClick &#x3D; () &#x3D;&gt; &#123;  store.increment()&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、现核心-Pinia"><a href="#三、现核心-Pinia" class="headerlink" title="三、现核心 Pinia"></a>三、现核心 Pinia</h2><blockquote><p>pinia/index.js</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> createPinia <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./createPinia"</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> defineStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./store"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-实现-createPinia"><a href="#1-实现-createPinia" class="headerlink" title="1.实现 createPinia"></a>1.实现 createPinia</h3><blockquote><p>这是 Pinia 的核心实现,创建 pinia 实例,提供全局状态容器和方法,用于后续创建和管理 stores,实现整个状态管理</p></blockquote><ol><li>创建一个 effect 作用域 scope,用于存储全局状态。</li><li>在 scope 内使用 ref 创建一个空的共享状态 state。</li><li>创建 pinia 实例,包含多个属性和方法。</li><li>install 方法在 app 中注册 pinia,提供全局实例,并设置当前激活的实例。</li><li>state 为全局共享的空状态。</li><li>use 方法用于使用插件。</li><li>_p 存储使用的插件列表。</li><li>_a 存储当前的应用实例。</li><li>_e 存储共享的 effect 作用域。</li><li>_s 存储注册的 stores。</li><li>通过 createPinia 创建出 pinia 实例,并在 app 中注册使用。</li><li>后续通过 defineStore 注册 store 时会往 state 中添加数据。</li><li>通过 provide/inject 方式在全局提供 pinia 实例。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> effectScope <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">const</span> piniaSymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">let</span> activePinia<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setActivePinia</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">pinia</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>activePinia <span class="token operator">=</span> pinia<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> scope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 整个应用的状态稍后defineStore的时候 就会在这里增加状态</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> _p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      pinia<span class="token punctuation">.</span>_a <span class="token operator">=</span> app <span class="token comment">// 当前应用</span>      <span class="token function">setActivePinia</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span> <span class="token comment">// 设置激活pinia</span>      <span class="token comment">// 1.在当前应用中暴露pinia实例</span>      app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span>piniaSymbol<span class="token punctuation">,</span> pinia<span class="token punctuation">)</span>      <span class="token comment">// 2.optionsAPI可以通过this访问到实例</span>      app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$pinia <span class="token operator">=</span> pinia    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    state<span class="token punctuation">,</span>    <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">plugin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//  使用插件</span>      _p<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token comment">//可以链式调用</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    _p<span class="token punctuation">,</span> <span class="token comment">//记录使用的插件</span>    <span class="token literal-property property">_a</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">//记录当前的app</span>    <span class="token literal-property property">_e</span><span class="token operator">:</span> scope<span class="token punctuation">,</span> <span class="token comment">// 当前作用域</span>    <span class="token literal-property property">_s</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 记录有哪些store的</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> pinia<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实现-defineStore"><a href="#2-实现-defineStore" class="headerlink" title="2.实现 defineStore"></a>2.实现 defineStore</h3><blockquote><p>defineStore 是 Pinia 的核心方法，用来定义一个新的 store 并返回获取该 store 的函数。它会在 pinia 中注册该 store，并管理 store 的创建。调用 defineStore 得到的 useStore 函数可以用来在组件中获取并使用该 store。</p><p>这样实现了存储的模块化注册,以及通过 useStore 组合式获取 store 实例。是 Pinia 状态管理的关键。</p></blockquote><ol><li>从参数中提取 store 的 id 和 options。</li><li>定义 useStore 函数,用于获取 store 实例。</li><li>在 useStore 中,通过 pinia 实例获取 store。</li><li>如果 store 未创建,会根据传入的 setup 或 options 创建新的 store。</li><li>createSetupStore 和 createOptionsStore 分别处理 setup store 和 options store。</li><li>创建好的 store 会存入 pinia._s 中。</li><li>useStore 函数返回已经创建的 store 实例。</li><li>给 useStore 添加 $id 属性,绑定 store id。</li><li>defineStore 返回 useStore 函数。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token parameter">idOrOptions<span class="token punctuation">,</span> setup<span class="token punctuation">,</span> setupOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// id从字符串或配置对象中提取</span>  <span class="token keyword">let</span> id  <span class="token keyword">let</span> options  <span class="token keyword">const</span> isSetupStore <span class="token operator">=</span> <span class="token keyword">typeof</span> setup <span class="token operator">===</span> <span class="token string">"function"</span>  <span class="token comment">// 根据情况分别设置id和options</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> idOrOptions <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    id <span class="token operator">=</span> idOrOptions    options <span class="token operator">=</span> isSetupStore <span class="token operator">?</span> setupOptions <span class="token operator">:</span> setup  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    options <span class="token operator">=</span> idOrOptions    id <span class="token operator">=</span> idOrOptions<span class="token punctuation">.</span>id  <span class="token punctuation">&#125;</span>  <span class="token comment">// 定义useStore函数</span>  <span class="token keyword">function</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 判断是否存在pinia上下文环境</span>    <span class="token keyword">const</span> hasContext <span class="token operator">=</span> <span class="token function">hasInjectionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 从context中读取 pinia 实例</span>    <span class="token comment">// 只能在组件中使用</span>    <span class="token keyword">let</span> pinia <span class="token operator">=</span> hasContext <span class="token operator">&amp;&amp;</span> <span class="token function">inject</span><span class="token punctuation">(</span>piniaSymbol<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pinia<span class="token punctuation">)</span> <span class="token function">setActivePinia</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>    pinia <span class="token operator">=</span> activePinia    <span class="token comment">// 如果该store尚未创建</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 根据情况创建store,存储到_s中</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isSetupStore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">createSetupStore</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> setup<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> pinia<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 创建setupStore</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">createOptionsStore</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> options<span class="token punctuation">,</span> pinia<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// 创建选项store</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 取出已创建的store返回</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token keyword">return</span> store  <span class="token punctuation">&#125;</span>  <span class="token comment">// 给函数绑定store的id</span>  useStore<span class="token punctuation">.</span>$id <span class="token operator">=</span> id  <span class="token comment">// 返回useStore函数</span>  <span class="token keyword">return</span> useStore<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建-setupStore"><a href="#3-创建-setupStore" class="headerlink" title="3.创建 setupStore"></a>3.创建 setupStore</h3><blockquote><p>这样通过 effect 作用域和 reactive,实现了 setup 语法的 Pinia store 定义方式,同时添加了 actions 支持。<br>并通过 pinia 管理所有的 stores。这是 Pinia 中实现组件化状态管理的核心机制。</p></blockquote><ol><li>创建一个新的 effect 作用域 scope,用于隔离这个 store 的状态。</li><li>定义一个 wrapAction 方法,用于包装 actions 函数,改变 this 指向 store 本身。</li><li>创建一个 partialStore 对象,包含 pinia 实例和 id 信息。</li><li>使用 reactive 将 partialStore 转换成响应式。</li><li>在 pinia._e 作用域内运行 setup 函数,返回初始化的状态。</li><li>使用 for 循环遍历 setupStore,如果是函数就用 wrapAction 包装成 action。</li><li>使用 Object.assign 将 setupStore 合并到 store 中。</li><li>将定义好的 store 保存到 pinia 的 store 容器 pinia._s 中。</li><li>返回创建好的 store 实例。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createSetupStore</span><span class="token punctuation">(</span><span class="token parameter">$id<span class="token punctuation">,</span> setup<span class="token punctuation">,</span> options<span class="token punctuation">,</span> pinia<span class="token punctuation">,</span> isSetupStore</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> scope  <span class="token keyword">if</span> <span class="token punctuation">(</span>isSetupStore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//处理action 修改this指向</span>  <span class="token keyword">function</span> <span class="token function">wrapAction</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// action</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token function">action</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token comment">// 让this指向store</span>      <span class="token keyword">return</span> ret    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> partialStore <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">_p</span><span class="token operator">:</span> pinia<span class="token punctuation">,</span>    $id<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>partialStore<span class="token punctuation">)</span>  <span class="token keyword">const</span> setupStore <span class="token operator">=</span> pinia<span class="token punctuation">.</span>_e<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    scope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 需要开辟一个空间，来管理此store中的数据</span>    <span class="token keyword">return</span> scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这个setup方法就是用来初始化store中的状态的</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//overwrite existing actions to support $onAction</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> setupStore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> prop <span class="token operator">=</span> setupStore<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token comment">// pinia.state.value[$id] 提取state</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isComputed</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isReactive</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isSetupStore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> prop      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> prop <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 对action进行一次包装</span>      setupStore<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">wrapAction</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> setupStore<span class="token punctuation">)</span> <span class="token comment">// 合并选项</span>  pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>$id<span class="token punctuation">,</span> store<span class="token punctuation">)</span> <span class="token comment">// 放入到容器中</span>  <span class="token keyword">return</span> store<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建-optionsStore"><a href="#4-创建-optionsStore" class="headerlink" title="4.创建 optionsStore"></a>4.创建 optionsStore</h3><ol><li>按照传统的 options 方式定义状态、getter、action。</li><li>在 setup 中合并不同选项到一起。</li><li>通过 createSetupStore 最终创建 store。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createOptionsStore</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> options<span class="token punctuation">,</span> pinia<span class="token punctuation">,</span> isSetupStore</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> store  <span class="token comment">//1. 从 options 中解构出 state、getters、actions。</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> getters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options  <span class="token comment">//2. 定义 setup 函数,用于初始化 store。</span>  <span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//3. 把状态 state 保存到 pinia 的共享状态中。</span>    pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> state <span class="token operator">?</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//4. 使用 toRefs 将state变成响应式</span>    <span class="token keyword">const</span> localState <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 5. state、actions、getters 合并到一起返回。</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>      localState<span class="token punctuation">,</span>      actions<span class="token punctuation">,</span>      <span class="token comment">//6. getters 通过 computed 转换成计算属性访问。</span>      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">gettersObj<span class="token punctuation">,</span> getterName</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        gettersObj<span class="token punctuation">[</span>getterName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> getters<span class="token punctuation">[</span>getterName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> gettersObj      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 7. 使用 createSetupStore 创建 store,传入 setup。</span>  store <span class="token operator">=</span> <span class="token function">createSetupStore</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> setup<span class="token punctuation">,</span> options<span class="token punctuation">,</span> pinia<span class="token punctuation">,</span> isSetupStore<span class="token punctuation">)</span>  <span class="token comment">//8. 返回创建的 store。</span>  <span class="token keyword">return</span> store<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、核心方法和属性"><a href="#四、核心方法和属性" class="headerlink" title="四、核心方法和属性"></a>四、核心方法和属性</h2><ul><li><code>$patch</code>:使用$patch 方法同时应用多个修改</li><li><code>$reset</code>: 使用$reset() 方法将 state 重置为初始值</li><li><code>$subscribe</code>: 通过 store 的 $subscribe() 方法侦听 state 及其变化</li><li><code>$onActions</code>: 通过 store.$onAction() 来监听 action 和它们的结果</li><li><code>$dispose</code>: 停止响应</li><li><code>$state</code>: 替换 state，通过变更 pinia 实例的 state 来设置整个应用的初始 state</li></ul><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const partialStore = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   _p: pinia,</span><span class="token prefix unchanged"> </span><span class="token line">   // _s: scope,</span><span class="token prefix unchanged"> </span><span class="token line">   $id,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   $reset,</span><span class="token prefix inserted">+</span><span class="token line">   $patch,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    $subscribe(callback, options = &#123;&#125;) &#123;</span><span class="token prefix inserted">+</span><span class="token line">      scope.run(() =></span><span class="token prefix inserted">+</span><span class="token line">        watch(</span><span class="token prefix inserted">+</span><span class="token line">          pinia.state.value[$id],</span><span class="token prefix inserted">+</span><span class="token line">         (state) => &#123;</span><span class="token prefix inserted">+</span><span class="token line">            callback(&#123; storeId: $id &#125;, state)</span><span class="token prefix inserted">+</span><span class="token line">          &#125;,</span><span class="token prefix inserted">+</span><span class="token line">          options</span><span class="token prefix inserted">+</span><span class="token line">        )</span><span class="token prefix inserted">+</span><span class="token line">      )</span><span class="token prefix inserted">+</span><span class="token line">    &#125;,</span><span class="token prefix inserted">+</span><span class="token line">    $onAction: addSubscription.bind(null, actionSubscriptions), // 绑定action</span><span class="token prefix inserted">+</span><span class="token line">    $dispose() &#123;</span><span class="token prefix inserted">+</span><span class="token line">      scope.stop() // 停用store</span><span class="token prefix inserted">+</span><span class="token line">      actionSubscriptions = []</span><span class="token prefix inserted">+</span><span class="token line">      pinia._s.delete($id)</span><span class="token prefix inserted">+</span><span class="token line">    &#125;,</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-patch"><a href="#1-patch" class="headerlink" title="1. $patch"></a>1. $patch</h3><blockquote><p>使用$patch 方法同时应用多个修改</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useCounterStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  store<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现</strong></p><blockquote><p>$patch 函数利用这个实现了对 pinia 状态的部分更新。</p></blockquote><ol><li>如果是函数,传入状态执行。</li><li>如果是对象,调用 mergeReactiveObjects 合并。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">$patch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">$patch</span><span class="token punctuation">(</span><span class="token parameter">partialStateOrMutator</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> partialStateOrMutator <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">partialStateOrMutator</span><span class="token punctuation">(</span>pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">mergeReactiveObjects</span><span class="token punctuation">(</span>pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">,</span> partialStateOrMutator<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>mergeReactiveObjects 函数</strong></p><ol><li>如果 target 和 patch 都是 Map,则用 patch 的键值更新 target。</li><li>如果 target 和 patch 都是 Set,则用 patch 的值扩展 target。</li><li>遍历 patch 的键值。</li><li>如果键存在于 target,且都是普通对象,调用自身递归合并。</li><li>否则直接用 patch 的键值覆盖 target。</li><li>返回合并后的 target。</li></ol><p>这样可以深层合并两个响应式对象,并保持响应性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    o <span class="token operator">&amp;&amp;</span>    <span class="token keyword">typeof</span> o <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span>    <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"[object Object]"</span> <span class="token operator">&amp;&amp;</span>    <span class="token keyword">typeof</span> o<span class="token punctuation">.</span>toJSON <span class="token operator">!==</span> <span class="token string">"function"</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mergeReactiveObjects</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> patchToApply</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Handle Map instances</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">Map</span> <span class="token operator">&amp;&amp;</span> patchToApply <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    patchToApply<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> target<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Handle Set instances</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">Set</span> <span class="token operator">&amp;&amp;</span> patchToApply <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    patchToApply<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>add<span class="token punctuation">,</span> target<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// no need to go through symbols because they cannot be serialized anyway</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> patchToApply<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patchToApply<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>    <span class="token keyword">const</span> subPatch <span class="token operator">=</span> patchToApply<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">const</span> targetValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token function">isPlainObject</span><span class="token punctuation">(</span>targetValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token function">isPlainObject</span><span class="token punctuation">(</span>subPatch<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token operator">!</span><span class="token function">isRef</span><span class="token punctuation">(</span>subPatch<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token operator">!</span><span class="token function">isReactive</span><span class="token punctuation">(</span>subPatch<span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mergeReactiveObjects</span><span class="token punctuation">(</span>targetValue<span class="token punctuation">,</span> subPatch<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> subPatch    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> target<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-reset"><a href="#2-reset" class="headerlink" title="2. $reset"></a>2. $reset</h3><blockquote><p>使用$reset() 方法将 state 重置为初始值</p><p>此方法只能在非 setup 语法中使用</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  store<span class="token punctuation">.</span><span class="token function">$reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 此方法只能在非setup语法中使用</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>实现</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> $reset <span class="token operator">=</span> <span class="token operator">!</span>isSetupStore  <span class="token operator">?</span> <span class="token keyword">function</span> <span class="token function">$reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> state <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options      <span class="token keyword">const</span> newState <span class="token operator">=</span> state <span class="token operator">?</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token comment">// we use a patch to group all changes into one single subscription</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>$state<span class="token punctuation">,</span> newState<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">🍍: Store "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>$id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" is built using the setup syntax and does not implement $reset().</span><span class="token template-punctuation string">`</span></span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-subscribe"><a href="#3-subscribe" class="headerlink" title="3. $subscribe"></a>3. $subscribe</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">store<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> storeId <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>storeId<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>监听状态变化，状态发生变化时会执行订阅的函数</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> partialStore <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  $patch<span class="token punctuation">,</span>  <span class="token function">$subscribe</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">watch</span><span class="token punctuation">(</span>        pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">storeId</span><span class="token operator">:</span> $id <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        options      <span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-dispose"><a href="#4-dispose" class="headerlink" title="4. $dispose"></a>4. $dispose</h3><blockquote><p>停止响应</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> partialStore <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  $patch<span class="token punctuation">,</span>  <span class="token function">$dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    scope<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 停用store</span>    actionSubscriptions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>$id<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-state"><a href="#5-state" class="headerlink" title="5.$state"></a>5.$state</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> <span class="token string">"$state"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>$state<span class="token punctuation">,</span> state<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-onActions"><a href="#6-onActions" class="headerlink" title="6. $onActions"></a>6. $onActions</h3><blockquote><p>通过 store.$onAction() 来监听 action 和它们的结果</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  store<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>store<span class="token punctuation">.</span><span class="token function">$onAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>after<span class="token punctuation">,</span>onError<span class="token punctuation">,</span>name<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'action running~~~'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token comment">// action执行完毕后触发</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token comment">// action出错时调用</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现 ：核心发布订阅</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createSetupStore</span><span class="token punctuation">(</span><span class="token parameter">$id<span class="token punctuation">,</span> setup<span class="token punctuation">,</span> options<span class="token punctuation">,</span> pinia<span class="token punctuation">,</span> isSetupStore</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> actionSubscriptions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token comment">//处理action 修改this指向</span>  <span class="token keyword">function</span> <span class="token function">wrapAction</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// increment,action</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> afterCallbackList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// afterList</span>      <span class="token keyword">const</span> onErrorCallbackList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// errList</span>      <span class="token keyword">function</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        afterCallbackList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        onErrorCallbackList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>actionSubscriptions<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> store<span class="token punctuation">,</span> after<span class="token punctuation">,</span> onError <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> ret      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        ret <span class="token operator">=</span> <span class="token function">action</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token comment">// 让this指向store</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>onErrorCallbackList<span class="token punctuation">,</span> error<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 返回值是promise</span>        <span class="token keyword">return</span> ret          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>afterCallbackList<span class="token punctuation">,</span> value<span class="token punctuation">)</span>            <span class="token keyword">return</span> value <span class="token comment">// 成功后触发after</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 失败则触发error</span>            <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>onErrorCallbackList<span class="token punctuation">,</span> error<span class="token punctuation">)</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> ret    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>     <span class="token keyword">const</span> partialStore <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">_p</span><span class="token operator">:</span> pinia<span class="token punctuation">,</span>    $reset<span class="token punctuation">,</span>    $patch<span class="token punctuation">,</span>    <span class="token literal-property property">$onAction</span><span class="token operator">:</span> <span class="token function">addSubscription</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> actionSubscriptions<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 绑定action</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>发布订阅</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">addSubscription</span><span class="token punctuation">(</span><span class="token parameter">subscriptions<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 添加订阅</span>  subscriptions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">removeSubcription</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> idx <span class="token operator">=</span> subscriptions<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      subscriptions<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> removeSubcription<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span><span class="token parameter">subscriptions<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 触发订阅</span>  subscriptions<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a><strong>完整代码</strong></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>  inject<span class="token punctuation">,</span>  hasInjectionContext<span class="token punctuation">,</span>  effectScope<span class="token punctuation">,</span>  toRefs<span class="token punctuation">,</span>  computed<span class="token punctuation">,</span>  isRef<span class="token punctuation">,</span>  reactive<span class="token punctuation">,</span>  isReactive<span class="token punctuation">,</span>  watch<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> piniaSymbol <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./rootStore"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> addSubscription<span class="token punctuation">,</span> triggerSubscriptions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./subscriptions"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> setActivePinia<span class="token punctuation">,</span> activePinia <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./createPinia"</span><span class="token keyword">function</span> <span class="token function">isComputed</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> o<span class="token punctuation">.</span>effect<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    o <span class="token operator">&amp;&amp;</span>    <span class="token keyword">typeof</span> o <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span>    <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"[object Object]"</span> <span class="token operator">&amp;&amp;</span>    <span class="token keyword">typeof</span> o<span class="token punctuation">.</span>toJSON <span class="token operator">!==</span> <span class="token string">"function"</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mergeReactiveObjects</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> patchToApply</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Handle Map instances</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">Map</span> <span class="token operator">&amp;&amp;</span> patchToApply <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    patchToApply<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> target<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Handle Set instances</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">Set</span> <span class="token operator">&amp;&amp;</span> patchToApply <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    patchToApply<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>add<span class="token punctuation">,</span> target<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// no need to go through symbols because they cannot be serialized anyway</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> patchToApply<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>patchToApply<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>    <span class="token keyword">const</span> subPatch <span class="token operator">=</span> patchToApply<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">const</span> targetValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token function">isPlainObject</span><span class="token punctuation">(</span>targetValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token function">isPlainObject</span><span class="token punctuation">(</span>subPatch<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token operator">!</span><span class="token function">isRef</span><span class="token punctuation">(</span>subPatch<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token operator">!</span><span class="token function">isReactive</span><span class="token punctuation">(</span>subPatch<span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mergeReactiveObjects</span><span class="token punctuation">(</span>targetValue<span class="token punctuation">,</span> subPatch<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> subPatch    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> target<span class="token punctuation">&#125;</span><span class="token comment">// id + options</span><span class="token comment">// options =&#123;id:''&#125;</span><span class="token comment">// id + setup</span><span class="token comment">// 定义一个 store 并导出 useStore 函数</span><span class="token comment">// useStore 函数的作用是:</span><span class="token comment">// - 看是否有pinia实例</span><span class="token comment">// - 如果该store尚未创建,则创建</span><span class="token comment">// - 取出已创建的store返回</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token parameter">idOrOptions<span class="token punctuation">,</span> setup<span class="token punctuation">,</span> setupOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// id从字符串或配置对象中提取</span>  <span class="token keyword">let</span> id  <span class="token keyword">let</span> options  <span class="token keyword">const</span> isSetupStore <span class="token operator">=</span> <span class="token keyword">typeof</span> setup <span class="token operator">===</span> <span class="token string">"function"</span>  <span class="token comment">// 根据情况分别设置id和options</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> idOrOptions <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    id <span class="token operator">=</span> idOrOptions    options <span class="token operator">=</span> isSetupStore <span class="token operator">?</span> setupOptions <span class="token operator">:</span> setup  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    options <span class="token operator">=</span> idOrOptions    id <span class="token operator">=</span> idOrOptions<span class="token punctuation">.</span>id  <span class="token punctuation">&#125;</span>  <span class="token comment">// 定义useStore函数</span>  <span class="token keyword">function</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 判断是否存在pinia上下文环境</span>    <span class="token keyword">const</span> hasContext <span class="token operator">=</span> <span class="token function">hasInjectionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 从context中读取 pinia 实例</span>    <span class="token comment">// 只能在组件中使用</span>    <span class="token keyword">let</span> pinia <span class="token operator">=</span> hasContext <span class="token operator">&amp;&amp;</span> <span class="token function">inject</span><span class="token punctuation">(</span>piniaSymbol<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pinia<span class="token punctuation">)</span> <span class="token function">setActivePinia</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>    pinia <span class="token operator">=</span> activePinia    <span class="token comment">// 如果该store尚未创建</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 根据情况创建store,存储到_s中</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isSetupStore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">createSetupStore</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> setup<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> pinia<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 创建setupStore</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">createOptionsStore</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> options<span class="token punctuation">,</span> pinia<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// 创建选项store</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 取出已创建的store返回</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token keyword">return</span> store  <span class="token punctuation">&#125;</span>  <span class="token comment">// 给函数绑定store的id</span>  useStore<span class="token punctuation">.</span>$id <span class="token operator">=</span> id  <span class="token comment">// 返回useStore函数</span>  <span class="token keyword">return</span> useStore<span class="token punctuation">&#125;</span><span class="token comment">// optionsapi</span><span class="token keyword">function</span> <span class="token function">createOptionsStore</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> options<span class="token punctuation">,</span> pinia<span class="token punctuation">,</span> isSetupStore</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> store  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> state<span class="token punctuation">,</span> getters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options  <span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 根据用户的状态将其保存到pinia中</span>    pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> state <span class="token operator">?</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> localState <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>      localState<span class="token punctuation">,</span>      actions<span class="token punctuation">,</span>      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">gettersObj<span class="token punctuation">,</span> getterName</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        gettersObj<span class="token punctuation">[</span>getterName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> getters<span class="token punctuation">[</span>getterName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> gettersObj      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  store <span class="token operator">=</span> <span class="token function">createSetupStore</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> setup<span class="token punctuation">,</span> options<span class="token punctuation">,</span> pinia<span class="token punctuation">,</span> isSetupStore<span class="token punctuation">)</span>  <span class="token keyword">return</span> store<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createSetupStore</span><span class="token punctuation">(</span><span class="token parameter">$id<span class="token punctuation">,</span> setup<span class="token punctuation">,</span> options<span class="token punctuation">,</span> pinia<span class="token punctuation">,</span> isSetupStore</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> scope  <span class="token keyword">let</span> actionSubscriptions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isSetupStore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//处理action 修改this指向</span>  <span class="token keyword">function</span> <span class="token function">wrapAction</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// increment,action</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> afterCallbackList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// afterList</span>      <span class="token keyword">const</span> onErrorCallbackList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// errList</span>      <span class="token keyword">function</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        afterCallbackList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">function</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        onErrorCallbackList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>actionSubscriptions<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> store<span class="token punctuation">,</span> after<span class="token punctuation">,</span> onError <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">let</span> ret      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        ret <span class="token operator">=</span> <span class="token function">action</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token comment">// 让this指向store</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>onErrorCallbackList<span class="token punctuation">,</span> error<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 返回值是promise</span>        <span class="token keyword">return</span> ret          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>afterCallbackList<span class="token punctuation">,</span> value<span class="token punctuation">)</span>            <span class="token keyword">return</span> value <span class="token comment">// 成功后触发after</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 失败则触发error</span>            <span class="token function">triggerSubscriptions</span><span class="token punctuation">(</span>onErrorCallbackList<span class="token punctuation">,</span> error<span class="token punctuation">)</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> ret    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> <span class="token function-variable function">$patch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">$patch</span><span class="token punctuation">(</span><span class="token parameter">partialStateOrMutator</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> partialStateOrMutator <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">partialStateOrMutator</span><span class="token punctuation">(</span>pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">mergeReactiveObjects</span><span class="token punctuation">(</span>pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">,</span> partialStateOrMutator<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> $reset <span class="token operator">=</span> <span class="token operator">!</span>isSetupStore    <span class="token operator">?</span> <span class="token keyword">function</span> <span class="token function">$reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> state <span class="token punctuation">&#125;</span> <span class="token operator">=</span> options        <span class="token keyword">const</span> newState <span class="token operator">=</span> state <span class="token operator">?</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"newState=>"</span><span class="token punctuation">,</span> newState<span class="token punctuation">)</span>        <span class="token comment">// we use a patch to group all changes into one single subscription</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>$state<span class="token punctuation">,</span> newState<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">🍍: Store "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>$id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" is built using the setup syntax and does not implement $reset().</span><span class="token template-punctuation string">`</span></span>        <span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> partialStore <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">_p</span><span class="token operator">:</span> pinia<span class="token punctuation">,</span>    <span class="token comment">// _s: scope,</span>    $id<span class="token punctuation">,</span>    $reset<span class="token punctuation">,</span>    $patch<span class="token punctuation">,</span>    <span class="token function">$subscribe</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>        <span class="token function">watch</span><span class="token punctuation">(</span>          pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">storeId</span><span class="token operator">:</span> $id <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          options        <span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">$onAction</span><span class="token operator">:</span> <span class="token function">addSubscription</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> actionSubscriptions<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 绑定action</span>    <span class="token function">$dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      scope<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 停用store</span>      actionSubscriptions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>$id<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>partialStore<span class="token punctuation">)</span>  <span class="token keyword">const</span> setupStore <span class="token operator">=</span> pinia<span class="token punctuation">.</span>_e<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    scope <span class="token operator">=</span> <span class="token function">effectScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 需要开辟一个空间，来管理此store中的数据</span>    <span class="token keyword">return</span> scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这个setup方法就是用来初始化store中的状态的</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//overwrite existing actions to support $onAction</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> setupStore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> prop <span class="token operator">=</span> setupStore<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isComputed</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isReactive</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isSetupStore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> prop      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> prop <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 对action进行一次包装</span>      setupStore<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">wrapAction</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> setupStore<span class="token punctuation">)</span> <span class="token comment">// 合并选项</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> <span class="token string">"$state"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">[</span>$id<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>$state<span class="token punctuation">,</span> state<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  pinia<span class="token punctuation">.</span>_p<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">extender</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>      store<span class="token punctuation">,</span>      scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">extender</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> store<span class="token punctuation">,</span> <span class="token literal-property property">app</span><span class="token operator">:</span> pinia<span class="token punctuation">.</span>_a<span class="token punctuation">,</span> pinia <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  pinia<span class="token punctuation">.</span>_s<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>$id<span class="token punctuation">,</span> store<span class="token punctuation">)</span> <span class="token comment">// 放入到容器中</span>  <span class="token keyword">return</span> store<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、Plugin插件实现"><a href="#五、Plugin插件实现" class="headerlink" title="五、Plugin插件实现"></a>五、Plugin插件实现</h2><p><strong>案例 ： 持久化存储插件</strong> <code>pinia-plugin-persistedstate</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//  import piniaPluginPersistedstate from "pinia-plugin-persistedstate"</span><span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> store <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> id <span class="token operator">=</span> store<span class="token punctuation">.</span>$id  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"store=>"</span><span class="token punctuation">,</span> store<span class="token punctuation">,</span> store<span class="token punctuation">.</span>$id<span class="token punctuation">)</span>  <span class="token comment">// ... 我要拿到所有的状态， 替换掉默认状态</span>  <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    store<span class="token punctuation">.</span>$state <span class="token operator">=</span> state  <span class="token punctuation">&#125;</span>  store<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> storeId <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 每个插件都会执行订阅操作</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>storeId<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> _p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> pinia <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">plugin</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            _p<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> pinia<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createSetupStore</span><span class="token punctuation">(</span><span class="token parameter">$id<span class="token punctuation">,</span> setup<span class="token punctuation">,</span> options<span class="token punctuation">,</span> pinia<span class="token punctuation">,</span> isSetupStore</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//.....</span>    pinia<span class="token punctuation">.</span>_p<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">extender</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>      store<span class="token punctuation">,</span>      scope<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">extender</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> store<span class="token punctuation">,</span> <span class="token literal-property property">app</span><span class="token operator">:</span> pinia<span class="token punctuation">.</span>_a<span class="token punctuation">,</span> pinia <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//.....</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h2><h3 id="1-storeToRefs"><a href="#1-storeToRefs" class="headerlink" title="1. storeToRefs"></a>1. storeToRefs</h3><p>从 Store 中提取属性同时保持其响应式，需要使用<code>storeToRefs()</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> toRaw<span class="token punctuation">,</span> isRef<span class="token punctuation">,</span> isReactive<span class="token punctuation">,</span> toRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  store <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>  <span class="token keyword">const</span> refs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> store<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> store<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isReactive</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      refs<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> refs<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-mapHelpers"><a href="#2-mapHelpers" class="headerlink" title="2. mapHelpers"></a>2. mapHelpers</h3><p>用法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 状态</span>   <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token comment">// 映射</span>      <span class="token literal-property property">myCount1</span><span class="token operator">:</span><span class="token string">'count'</span><span class="token punctuation">,</span>      <span class="token function-variable function">myCount2</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span><span class="token operator">=></span> store<span class="token punctuation">.</span>count    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'doubleCount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// getters</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token function">mapWritableState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'doubleCount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'increment'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">myIncrement</span><span class="token operator">:</span><span class="token string">'increment'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mapState</span><span class="token punctuation">(</span><span class="token parameter">useStore<span class="token punctuation">,</span> keysOrMapper</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>keysOrMapper<span class="token punctuation">)</span>    <span class="token operator">?</span> keysOrMapper<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reduced<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 数组的写法</span>        reduced<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> reduced      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>keysOrMapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reduced<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对象的写法</span>        reduced<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">const</span> storeKey <span class="token operator">=</span> keysOrMapper<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// 获取store中的值</span>          <span class="token comment">// 对象中函数的写法</span>          <span class="token keyword">return</span> <span class="token keyword">typeof</span> storeKey <span class="token operator">===</span> <span class="token string">"function"</span>            <span class="token operator">?</span> <span class="token function">storeKey</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span>            <span class="token operator">:</span> store<span class="token punctuation">[</span>storeKey<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> reduced      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> mapGetters <span class="token operator">=</span> mapState<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token parameter">useStore<span class="token punctuation">,</span> keysOrMapper</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>keysOrMapper<span class="token punctuation">)</span>    <span class="token operator">?</span> keysOrMapper<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reduced<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        reduced<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> reduced      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>keysOrMapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">reduced<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// @ts-expect-error</span>        reduced<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>keysOrMapper<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> reduced      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>总得来说，Pinia 就是 Vuex 的替代版，可以更好的兼容 Vue2，Vue3以及TypeScript。在Vuex的基础上去掉了 Mutation，只保留了 state, getter和action。Pinia拥有更简洁的语法， 扁平化的代码编排，符合Vue3 的 Composition api</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm常见包</title>
      <link href="/2023/07/07/npm-chang-jian-bao/"/>
      <url>/2023/07/07/npm-chang-jian-bao/</url>
      
        <content type="html"><![CDATA[<p><strong>vue 的拖拽包</strong>: <a href="https://www.npmjs.com/package/vuedraggable">https://www.npmjs.com/package/vuedraggable</a><br><strong>代码编辑器</strong>: <a href="https://www.npmjs.com/package/ace-builds">https://www.npmjs.com/package/ace-builds</a><br><strong>Vue3 代码编辑器</strong> : <a href="https://www.npmjs.com/package/vue3-ace-editor">https://www.npmjs.com/package/vue3-ace-editor</a><br><strong>Vue CodeDiff</strong> : <a href="https://www.npmjs.com/package/v-code-diff">https://www.npmjs.com/package/v-code-diff</a><br><strong>深度 json 解析</strong> : <a href="https://www.npmjs.com/package/deep-parse-json">https://www.npmjs.com/package/deep-parse-json</a><br><strong>sql 格式化</strong> : <a href="https://www.npmjs.com/package/sql-formatter">https://www.npmjs.com/package/sql-formatter</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码风格配置</title>
      <link href="/2023/07/06/dai-ma-feng-ge-pei-zhi/"/>
      <url>/2023/07/06/dai-ma-feng-ge-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p><a href="https://zh-hans.eslint.org/docs/latest/use/getting-started">https://zh-hans.eslint.org/docs/latest/use/getting-started</a></p><ul><li><a href="https://eslint.org/">ESLint</a>是一个插件化并且可配置的 JavaScript 语法规则和代码风格的检查工具<ul><li>代码质量问题：使用方式有可能有问题</li><li>代码风格问题：风格不符合一定规则</li></ul></li></ul><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> init @eslint/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> <span class="token function">install</span>  eslint  eslint-plugin-vue @typescript-eslint/parser @typescript-eslint/eslint-plugin  vue-eslint-parser eslint-define-config <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常见的包</p><table><thead><tr><th align="left">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">eslint</td><td align="left">ESLint 是一个用于识别和报告在 ECMAScript/JavaScript 代码中发现的模式的工具</td></tr><tr><td align="left">eslint-plugin-vue</td><td align="left">Vue 的官方 ESLint 插件</td></tr><tr><td align="left">@typescript-eslint/parser</td><td align="left">一个 ESLint 解析器，它利用 TypeScript-ESTree 允许 ESLint 检查 TypeScript 源代码</td></tr><tr><td align="left">@typescript-eslint/eslint-plugin</td><td align="left">一个 ESLint 插件，为 TypeScript 代码库提供 lint 规则</td></tr><tr><td align="left">@vue/eslint-config-typescript</td><td align="left">Vue 的 eslint-config-typescript</td></tr></tbody></table><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><strong>.eslintrc.js</strong></p><ol><li>案例 1</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"eslint-define-config"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">es2021</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span> <span class="token string">"plugin:@typescript-eslint/recommended"</span><span class="token punctuation">,</span> <span class="token string">"plugin:vue/vue3-essential"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">"vue-eslint-parser"</span><span class="token punctuation">,</span>  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">"@typescript-eslint/parser"</span><span class="token punctuation">,</span>    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@typescript-eslint"</span><span class="token punctuation">,</span> <span class="token string">"vue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TS</span>    <span class="token string-property property">"@typescript-eslint/no-explicit-any"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-debugger"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/explicit-module-boundary-types"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/ban-types"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/ban-ts-comment"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/no-empty-function"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/no-non-null-assertion"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"@typescript-eslint/no-unused-vars"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">argsIgnorePattern</span><span class="token operator">:</span> <span class="token string">"^_"</span><span class="token punctuation">,</span>        <span class="token literal-property property">varsIgnorePattern</span><span class="token operator">:</span> <span class="token string">"^_"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"no-unused-vars"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">argsIgnorePattern</span><span class="token operator">:</span> <span class="token string">"^_"</span><span class="token punctuation">,</span>        <span class="token literal-property property">varsIgnorePattern</span><span class="token operator">:</span> <span class="token string">"^_"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// Vue</span>    <span class="token string-property property">"vue/no-v-html"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/require-default-prop"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/require-explicit-emits"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/multi-word-component-names"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    <span class="token string-property property">"vue/html-self-closing"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">html</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">void</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>          <span class="token literal-property property">normal</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>          <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">svg</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>        <span class="token literal-property property">math</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// Prettier</span>    <span class="token string-property property">"prettier/prettier"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"warn"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">endOfLine</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>.eslintignore</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">*</span><span class="token punctuation">.</span>shnode_modules<span class="token operator">*</span><span class="token punctuation">.</span>md<span class="token operator">*</span><span class="token punctuation">.</span>woff<span class="token operator">*</span><span class="token punctuation">.</span>ttf<span class="token punctuation">.</span>vscode<span class="token punctuation">.</span>ideadist<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>docs<span class="token punctuation">.</span>husky<span class="token punctuation">.</span>local<span class="token operator">/</span>binDockerfilecomponents<span class="token punctuation">.</span>d<span class="token punctuation">.</span>tsauto<span class="token operator">-</span>imports<span class="token punctuation">.</span>d<span class="token punctuation">.</span>ts<span class="token operator">*</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span>js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>package.json</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   "scripts": &#123;</span><span class="token prefix unchanged"> </span><span class="token line">    "dev": "vite",</span><span class="token prefix unchanged"> </span><span class="token line">    "build": "vue-tsc --noEmit &amp;&amp; vite build",</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     "lint:eslint": "eslint --cache --max-warnings 0 \"&#123;src,tests,types&#125;/**/*.&#123;vue,js,jsx,ts,tsx&#125;\" --fix",</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;,</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><ul><li><p><a href="https://eslint.org/">ESLint</a> 主要解决的是代码质量问题</p></li><li><p>代码质量规则</p><ul><li>no-unused-vars 禁止出现未使用过的变量</li><li>no-implicit-globals 禁止在全局范围内使用变量声明和 function 声明</li><li>prefer-promise-reject-errors 要求使用 Error 对象作为 Promise 拒绝的原因</li></ul></li><li><p><a href="https://prettier.io/">prettier </a>主要解决的是代码风格问题</p><ul><li>max-len 最大长度</li><li>no-mixed-spaces-and-tabs 不允许空格和 tab 混合</li><li>keyword-spacing 关键字的空</li><li>comma-style 冒号风格</li></ul></li></ul><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> prettier eslint-plugin-prettier  @vue/eslint-config-prettier pretty-quick <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="left">名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">prettier</td><td align="left">代码格式化</td></tr><tr><td align="left">eslint-plugin-prettier</td><td align="left">作为 ESLint 规则运行得 prettier</td></tr><tr><td align="left">@vue/eslint-config-prettier</td><td align="left">Vue 的 eslint-config-prettier</td></tr></tbody></table><p>其他 ：关闭所有不必要或可能与 Prettier 冲突的规则。</p><p>stylelint-config-prettier</p><h3 id="2-案例"><a href="#2-案例" class="headerlink" title="2. 案例"></a>2. 案例</h3><p>.eslintrc.cjs</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">module.exports = &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> root: true,</span><span class="token prefix unchanged"> </span><span class="token line"> env: &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   browser: true,</span><span class="token prefix unchanged"> </span><span class="token line">   es2021: true,</span><span class="token prefix unchanged"> </span><span class="token line">   node: true</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;,</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> extends: [</span><span class="token prefix unchanged"> </span><span class="token line">   "plugin:vue/vue3-recommended",</span><span class="token prefix unchanged"> </span><span class="token line">   "eslint:recommended",</span><span class="token prefix unchanged"> </span><span class="token line">   "@vue/typescript/recommended",</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  //添加两个插件</span><span class="token prefix inserted">+</span><span class="token line">   "prettier",</span><span class="token prefix inserted">+</span><span class="token line">   "@vue/eslint-config-prettier"</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> ],</span><span class="token prefix unchanged"> </span><span class="token line"> parserOptions: &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   parser: "@typescript-eslint/parser",</span><span class="token prefix unchanged"> </span><span class="token line">   ecmaVersion: 2021</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;,</span><span class="token prefix unchanged"> </span><span class="token line"> rules: &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   //'prettier/prettier': "off",//关闭警告</span><span class="token prefix inserted">+</span><span class="token line">   // 配置规则级别和改正规则</span><span class="token prefix inserted">+</span><span class="token line">   "prettier/prettier": [</span><span class="token prefix inserted">+</span><span class="token line">     "error",</span><span class="token prefix inserted">+</span><span class="token line">     &#123;</span><span class="token prefix inserted">+</span><span class="token line">       singleQuote: true,</span><span class="token prefix inserted">+</span><span class="token line">       tabWidth: 2,</span><span class="token prefix inserted">+</span><span class="token line">       indent: 2,</span><span class="token prefix inserted">+</span><span class="token line">       semi: false,</span><span class="token prefix inserted">+</span><span class="token line">       trailingComma: "none",</span><span class="token prefix inserted">+</span><span class="token line">       endOfLine: "auto"</span><span class="token prefix inserted">+</span><span class="token line">     &#125;</span><span class="token prefix inserted">+</span><span class="token line">   ],</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  "no-unused-vars": "off",</span><span class="token prefix unchanged"> </span><span class="token line">  "vue/no-unused-vars": "off",</span><span class="token prefix unchanged"> </span><span class="token line">  "@typescript-eslint/no-unused-vars": "off"</span></span>&#125;,<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> globals: &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   defineProps: "readonly"</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.prettierrc.cjs</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** 配置项文档：https://prettier.io/docs/en/configuration.html */</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** 每一行的宽度 */</span>  <span class="token literal-property property">printWidth</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span>  <span class="token comment">/** Tab 键的空格数 */</span>  <span class="token literal-property property">tabWidth</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment">/** 在对象中的括号之间是否用空格来间隔 */</span>  <span class="token literal-property property">bracketSpacing</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">/** 箭头函数的参数无论有几个，都要括号包裹 */</span>  <span class="token literal-property property">arrowParens</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>  <span class="token comment">/** 换行符的使用 */</span>  <span class="token literal-property property">endOfLine</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>  <span class="token comment">/** 是否采用单引号 */</span>  <span class="token literal-property property">singleQuote</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">/** 对象或者数组的最后一个元素后面不要加逗号 */</span>  <span class="token literal-property property">trailingComma</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token comment">/** 是否加分号 */</span>  <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">/** 是否使用 Tab 格式化 */</span>  <span class="token literal-property property">useTabs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.prettierignore</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">/</span>dist<span class="token comment">/*.local.output.js/node_modules/****/</span><span class="token operator">*</span><span class="token punctuation">.</span>svg<span class="token operator">**</span><span class="token comment">/*.sh/public/*.npmrcindex.htmlpnpm-lock.yamlcomponents.d.tsauto-imports.d.ts*.min.js</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>package.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"lint:prettier"</span><span class="token operator">:</span> <span class="token string">"prettier --write \"&#123;src,tests,types&#125;/**/*.&#123;vue,js,jsx,ts,tsx,json,css,less,scss,html,md&#125;\""</span><span class="token punctuation">,</span>  <span class="token property">"lint:pretty"</span><span class="token operator">:</span> <span class="token string">"pretty-quick --staged"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-规则"><a href="#3-规则" class="headerlink" title="3.规则"></a>3.规则</h3><p><a href="https://prettier.io/docs/en/options.html">https://prettier.io/docs/en/options.html</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">printWidth</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token comment">//最大列宽为 120 字符</span>  <span class="token literal-property property">tabWidth</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">//使用 2 个空格缩进</span>  <span class="token literal-property property">useTabs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//不使用制表符缩进,使用空格</span>  <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//不使用分号</span>  <span class="token literal-property property">singleQuote</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//使用单引号</span>  <span class="token literal-property property">vueIndentScriptAndStyle</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//不要在 Vue 文件中缩进脚本和样式标签。</span>  <span class="token literal-property property">quoteProps</span><span class="token operator">:</span> <span class="token string">"as-needed"</span><span class="token punctuation">,</span> <span class="token comment">//仅在需要时在对象属性周围添加引号。</span>  <span class="token literal-property property">bracketSpacing</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//对象文字中括号之间的空格。</span>  <span class="token literal-property property">trailingComma</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span> <span class="token comment">//不使用尾随逗号</span>  <span class="token literal-property property">jsxBracketSameLine</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 在 jsx 中和后面的标签处于同一行</span>  <span class="token literal-property property">jsxSingleQuote</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//不在 jsx 中使用单引号</span>  <span class="token literal-property property">arrowParens</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span> <span class="token comment">//在唯一的箭头函数参数周围包含括号</span>  <span class="token literal-property property">insertPragma</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token literal-property property">requirePragma</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token literal-property property">proseWrap</span><span class="token operator">:</span> <span class="token string">"never"</span><span class="token punctuation">,</span>  <span class="token literal-property property">htmlWhitespaceSensitivity</span><span class="token operator">:</span> <span class="token string">"strict"</span><span class="token punctuation">,</span>  <span class="token literal-property property">endOfLine</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span> <span class="token comment">// 自动选择行结束符</span>  <span class="token literal-property property">rangeStart</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token literal-property property">singleAttributePerLine</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//在 HTML、Vue 和 JSX 中强制每行使用单一属性</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="editorconfig"><a href="#editorconfig" class="headerlink" title="editorconfig"></a>editorconfig</h2><ul><li><a href="https://editorconfig.org/">editorconfig</a>帮助开发人员在不同的编辑器和 IDE 之间定义和维护一致的编码样式</li><li>不同的开发人员，不同的编辑器，有不同的编码风格，而 EditorConfig 就是用来协同团队开发人员之间的代码的风格及样式规范化的一个工具，而.editorconfig 正是它的默认配置文件</li><li><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">EditorConfig</a></li><li>vscode 这类编辑器，需要自行安装 editorconfig 插件</li></ul><p>.editorconfig</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置项文档：https://editorconfig.org/</span><span class="token comment"># 告知 EditorConfig 插件，当前即是根文件</span>root <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment"># 适用全部文件</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span><span class="token comment">## 设置字符集</span>charset <span class="token operator">=</span> utf-8<span class="token comment">## 缩进风格 space | tab，建议 space</span>indent_style <span class="token operator">=</span> space<span class="token comment">## 缩进的空格数（修改这里的话需要将 prettier.config.js 和 .vscode -> settings.json 也同步修改）</span>indent_size <span class="token operator">=</span> <span class="token number">2</span><span class="token comment">## 换行符类型 lf | cr | crlf，一般都是设置为 lf</span>end_of_line <span class="token operator">=</span> lf<span class="token comment">## 是否在文件末尾插入空白行</span>insert_final_newline <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment">## 是否删除一行中的前后空格</span>trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment"># 适用 .md 文件</span><span class="token punctuation">[</span>*.md<span class="token punctuation">]</span>insert_final_newline <span class="token operator">=</span> <span class="token boolean">false</span>trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.vscode/setting.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"source.fixAll.eslint"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"[vue]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"[javascript]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"[typescript]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"[json]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"[jsonc]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"[html]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"[css]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"[scss]"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>extensions.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"recommendations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"editorconfig.editorconfig"</span><span class="token punctuation">,</span>    <span class="token string">"dbaeumer.vscode-eslint"</span><span class="token punctuation">,</span>    <span class="token string">"esbenp.prettier-vscode"</span><span class="token punctuation">,</span>    <span class="token string">"vue.vscode-typescript-vue-plugin"</span><span class="token punctuation">,</span>    <span class="token string">"vue.volar"</span><span class="token punctuation">,</span>    <span class="token string">"antfu.unocss"</span><span class="token punctuation">,</span>    <span class="token string">"zixuanchen.vitest-explorer"</span><span class="token punctuation">,</span>    <span class="token string">"wiensss.region-highlighter"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-hooks"><a href="#git-hooks" class="headerlink" title="git hooks"></a>git hooks</h2><ul><li>可以在<code>git commit</code>之前检查代码，保证所有提交到版本库中的代码都是符合规范的</li><li>可以在<code>git push</code>之前执行单元测试,保证所有的提交的代码经过的单元测试</li><li><a href="https://github.com/typicode/husky">husky</a>可以让我们向项目中方便添加<code>git hooks</code>,它会自动在仓库中的 <code>.git/</code> 目录下增加相应的钩子,比如 <code>pre-commit</code> 钩子就会在你执行 <code>git commit</code>命令的时候的触发</li><li><a href="https://www.npmjs.com/package/lint-staged">lint-staged</a>用于实现每次提交只检查本次提交所修改的文件</li><li>Commitlint 可以规范<code>git commit -m &quot;&quot;</code>中的描述信息</li></ul><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.DS_Storenode_modules/screenshots/distdist.zipdist_electron<span class="token comment"># local env files</span>.env.local.env.*.local<span class="token comment"># Log files</span>npm-debug.log*yarn-debug.log*yarn-error.log*pnpm-debug.log*<span class="token comment"># Editor directories and files</span>.idea<span class="token comment"># .vscode</span>*.suo*.ntvs**.njsproj*.sln*.sw?types/auto-imports.d.tstypes/components.d.ts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> husky <span class="token parameter variable">-D</span><span class="token function">npm</span> pkg <span class="token builtin class-name">set</span> <span class="token assign-left variable">scripts.prepare</span><span class="token operator">=</span><span class="token string">"husky install"</span><span class="token function">npm</span> run prepare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>Edit <code>package.json &gt; prepare</code> script and run it once:npm run prepare</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> pkg <span class="token builtin class-name">set</span> <span class="token assign-left variable">scripts.prepare</span><span class="token operator">=</span><span class="token string">"husky install"</span><span class="token function">npm</span> run prepare<span class="token comment"># `npm test` will run every time you commit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="LintStaged"><a href="#LintStaged" class="headerlink" title="LintStaged"></a>LintStaged</h3><p><a href="https://github.com/okonet/lint-staged">https://github.com/okonet/lint-staged</a></p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">npm install lint-staged -Dnpx husky add .husky&#x2F;pre-commit &quot;npx --no-install lint-staged&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Package-json"><a href="#Package-json" class="headerlink" title="Package.json"></a>Package.json</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"*.&#123;vue,js,jsx,ts,tsx&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"eslint --fix"</span><span class="token punctuation">,</span>    <span class="token string">"prettier --write"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"*.&#123;css,less,scss,html,md&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"prettier --write"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"package.json"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"prettier --write"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"> <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"pnpm lint:eslint &amp;&amp; pnpm lint:prettier &amp;&amp; pnpm  lint:styleLint"</span><span class="token punctuation">,</span>   <span class="token property">"lint:eslint"</span><span class="token operator">:</span> <span class="token string">"eslint --max-warnings 0 \"&#123;src,tests,types&#125;/**/*.&#123;vue,js,jsx,ts,tsx&#125;\" --fix --cache --cache-location node_modules/.cache/eslint/"</span><span class="token punctuation">,</span>   <span class="token property">"lint:prettier"</span><span class="token operator">:</span> <span class="token string">"prettier --write \"&#123;src,tests,types&#125;/**/*.&#123;vue,js,jsx,ts,tsx,json,css,less,scss,html,md&#125;\""</span><span class="token punctuation">,</span>   <span class="token property">"lint:stylelint"</span><span class="token operator">:</span> <span class="token string">"stylelint --fix \"**/*.&#123;vue,less,postcss,css,scss&#125;\" --cache --cache-location node_modules/.cache/stylelint/"</span><span class="token punctuation">,</span>   <span class="token property">"lint:lint-staged"</span><span class="token operator">:</span> <span class="token string">"lint-staged"</span><span class="token punctuation">,</span>   <span class="token property">"prepare"</span><span class="token operator">:</span> <span class="token string">"husky install"</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token property">"*.&#123;js,jsx,ts,tsx&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"eslint --fix"</span><span class="token punctuation">,</span>     <span class="token string">"prettier --write"</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token property">"*.json"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"prettier --write"</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token property">"*.vue"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"eslint --fix"</span><span class="token punctuation">,</span>     <span class="token string">"prettier --write"</span><span class="token punctuation">,</span>     <span class="token string">"stylelint --fix"</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token property">"*.&#123;scss,less,styl,html&#125;"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"stylelint --fix"</span><span class="token punctuation">,</span>     <span class="token string">"prettier --write"</span>   <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token property">"*.md"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"prettier --write"</span>   <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="commitlint-配置"><a href="#commitlint-配置" class="headerlink" title="commitlint 配置"></a>commitlint 配置</h2><ul><li><p><a href="https://www.npmjs.com/package/@commitlint/cli">commitlint</a>推荐我们使用<a href="https://www.npmjs.com/package/@commitlint/config-conventional">config-conventional</a>配置去写 <code>commit</code></p></li><li><p>提交格式</p><pre class="line-numbers language-none"><code class="language-none">git commit -m &lt;type&gt;[optional scope]: &lt;description&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>type</code> ：用于表明我们这次提交的改动类型，是新增了功能？还是修改了测试代码？又或者是更新了文档？</li><li><code>optional scope</code>：一个可选的修改范围。用于标识此次提交主要涉及到代码中哪个模块</li><li><code>description</code>：一句话描述此次提交的主要内容，做到言简意赅</li></ul></li></ul><h3 id="1-type"><a href="#1-type" class="headerlink" title="1. type"></a>1. type</h3><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">build</td><td align="left">编译相关的修改，例如发布版本、对项目构建或者依赖的改动</td></tr><tr><td align="left">chore</td><td align="left">其他修改, 比如改变构建流程、或者增加依赖库、工具等</td></tr><tr><td align="left">ci</td><td align="left">持续集成修改</td></tr><tr><td align="left">docs</td><td align="left">文档修改</td></tr><tr><td align="left">feature</td><td align="left">新特性、新功能</td></tr><tr><td align="left">fix</td><td align="left">修改 bug</td></tr><tr><td align="left">perf</td><td align="left">优化相关，比如提升性能、体验</td></tr><tr><td align="left">refactor</td><td align="left">代码重构</td></tr><tr><td align="left">revert</td><td align="left">回滚到上一个版本</td></tr><tr><td align="left">style</td><td align="left">代码格式修改</td></tr><tr><td align="left">test</td><td align="left">测试用例修改</td></tr></tbody></table><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><p><a href="https://commitlint.js.org/#/guides-local-setup?id=install-commitlint">https://commitlint.js.org/#/guides-local-setup?id=install-commitlint</a></p><h4 id="安装-commitlint"><a href="#安装-commitlint" class="headerlink" title="安装 commitlint"></a>安装 commitlint</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> <span class="token function">install</span> @commitlint/cli @commitlint/config-conventional <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="安装-husky"><a href="#安装-husky" class="headerlink" title="安装 husky"></a>安装 husky</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Install Husky v6</span><span class="token function">npm</span> <span class="token function">install</span> husky --save-dev<span class="token comment"># or</span><span class="token function">yarn</span> <span class="token function">add</span> husky <span class="token parameter variable">--dev</span><span class="token comment"># Activate hooks</span>npx husky <span class="token function">install</span><span class="token comment"># or</span><span class="token function">yarn</span> husky <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Add-hook"><a href="#Add-hook" class="headerlink" title="Add hook"></a>Add hook</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx husky <span class="token function">add</span> .husky/commit-msg  <span class="token string">'npx --no-install commitlint --edit $&#123;1&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h3><p><a href="https://commitlint.js.org/#/reference-configuration">https://commitlint.js.org/#/reference-configuration</a></p><p>commitlint.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@commitlint/config-conventional"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"type-enum"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token string">"always"</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"build"</span><span class="token punctuation">,</span> <span class="token string">"chore"</span><span class="token punctuation">,</span> <span class="token string">"ci"</span><span class="token punctuation">,</span> <span class="token string">"docs"</span><span class="token punctuation">,</span> <span class="token string">"feature"</span><span class="token punctuation">,</span> <span class="token string">"fix"</span><span class="token punctuation">,</span> <span class="token string">"perf"</span><span class="token punctuation">,</span> <span class="token string">"refactor"</span><span class="token punctuation">,</span> <span class="token string">"revert"</span><span class="token punctuation">,</span> <span class="token string">"style"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-详细案例"><a href="#4-详细案例" class="headerlink" title="4. 详细案例"></a>4. 详细案例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">ignores</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token parameter">commit</span><span class="token punctuation">)</span> <span class="token operator">=></span> commit<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@commitlint/config-conventional"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">parserPreset</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">parserOpts</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">headerPattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\w*|[\u4e00-\u9fa5]*)(?:[\(\（](.*)[\)\）])?[\:\：] (.*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">headerCorrespondence</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"scope"</span><span class="token punctuation">,</span> <span class="token string">"subject"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">referenceActions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token string">"closes"</span><span class="token punctuation">,</span> <span class="token string">"closed"</span><span class="token punctuation">,</span> <span class="token string">"fix"</span><span class="token punctuation">,</span> <span class="token string">"fixes"</span><span class="token punctuation">,</span> <span class="token string">"fixed"</span><span class="token punctuation">,</span> <span class="token string">"resolve"</span><span class="token punctuation">,</span> <span class="token string">"resolves"</span><span class="token punctuation">,</span> <span class="token string">"resolved"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">issuePrefixes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"#"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">noteKeywords</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"BREAKING CHANGE"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">fieldPattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^-(.*?)-$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">revertPattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^Revert\s"([\s\S]*)"\s*This reverts commit (\w*)\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">revertCorrespondence</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">mergePattern</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token literal-property property">mergeCorrespondence</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"body-leading-blank"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"footer-leading-blank"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"header-max-length"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"subject-empty"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"type-empty"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"type-enum"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token string">"always"</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span>        <span class="token string">"feat"</span><span class="token punctuation">,</span> <span class="token comment">// 新特性</span>        <span class="token string">"fix"</span><span class="token punctuation">,</span> <span class="token comment">// 修复bug</span>        <span class="token string">"perf"</span><span class="token punctuation">,</span> <span class="token comment">// 优化（性能）</span>        <span class="token string">"style"</span><span class="token punctuation">,</span> <span class="token comment">// 样式</span>        <span class="token string">"docs"</span><span class="token punctuation">,</span> <span class="token comment">// 文档</span>        <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token comment">// 单元测试</span>        <span class="token string">"refactor"</span><span class="token punctuation">,</span> <span class="token comment">// 重构</span>        <span class="token string">"build"</span><span class="token punctuation">,</span> <span class="token comment">// 依赖打包相关</span>        <span class="token string">"ci"</span><span class="token punctuation">,</span> <span class="token comment">// 持续集成</span>        <span class="token string">"chore"</span><span class="token punctuation">,</span> <span class="token comment">// 日常</span>        <span class="token string">"revert"</span><span class="token punctuation">,</span> <span class="token comment">// 回滚</span>        <span class="token string">"wip"</span><span class="token punctuation">,</span> <span class="token comment">// 开发中</span>        <span class="token string">"workflow"</span><span class="token punctuation">,</span> <span class="token comment">// 工作流</span>        <span class="token string">"types"</span><span class="token punctuation">,</span> <span class="token comment">// 类型定义</span>        <span class="token string">"release"</span><span class="token punctuation">,</span> <span class="token comment">// 发布</span>        <span class="token string">"improvement"</span><span class="token punctuation">,</span> <span class="token comment">// 改进</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5. 常见问题"></a>5. 常见问题</h3><p><strong>问题 1</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">hint</span><span class="token operator">:</span> The <span class="token string">'.husky/pre-commit'</span> hook was ignored because it's not <span class="token keyword">set</span> <span class="token keyword">as</span> executable<span class="token punctuation">.</span><span class="token literal-property property">hint</span><span class="token operator">:</span> You can disable <span class="token keyword">this</span> warning <span class="token keyword">with</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git config advice.ignoredHook false</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token literal-property property">hint</span><span class="token operator">:</span> The <span class="token string">'.husky/commit-msg'</span> hook was ignored because it's not <span class="token keyword">set</span> <span class="token keyword">as</span> executable<span class="token punctuation">.</span><span class="token literal-property property">hint</span><span class="token operator">:</span> You can disable <span class="token keyword">this</span> warning <span class="token keyword">with</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git config advice.ignoredHook false</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这些提示的意思是：Husky 预提交钩子和提交消息钩子没有被设置为可执行文件，所以 Git 忽略了它们。</p><p>具体原因是:使用 Husky 时，它需要在 .husky 目录下创建一些钩子脚本文件，如:</p><ul><li><p>.husky/pre-commit</p></li><li><p>.husky/commit-msg</p></li></ul><p>但这些文件默认情况下不是可执行的。需要使用以下命令设置为可执行:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置为可执行</span><span class="token function">chmod</span> +x .husky/pre-commit<span class="token function">chmod</span> +x .husky/commit-msg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>毕竟只有可执行文件才能被 Git 用作钩子执行。</p>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>commitlint配置</title>
      <link href="/2023/07/05/commitlint-pei-zhi/"/>
      <url>/2023/07/05/commitlint-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="commitlint-配置"><a href="#commitlint-配置" class="headerlink" title="commitlint 配置"></a>commitlint 配置</h1><ul><li><p><a href="https://www.npmjs.com/package/@commitlint/cli">commitlint</a>推荐我们使用<a href="https://www.npmjs.com/package/@commitlint/config-conventional">config-conventional</a>配置去写 <code>commit</code></p></li><li><p>提交格式</p><pre class="line-numbers language-none"><code class="language-none">git commit -m &lt;type&gt;[optional scope]: &lt;description&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>type</code> ：用于表明我们这次提交的改动类型，是新增了功能？还是修改了测试代码？又或者是更新了文档？</li><li><code>optional scope</code>：一个可选的修改范围。用于标识此次提交主要涉及到代码中哪个模块</li><li><code>description</code>：一句话描述此次提交的主要内容，做到言简意赅</li></ul></li></ul><h2 id="1-type"><a href="#1-type" class="headerlink" title="1. type"></a>1. type</h2><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">build</td><td align="left">编译相关的修改，例如发布版本、对项目构建或者依赖的改动</td></tr><tr><td align="left">chore</td><td align="left">其他修改, 比如改变构建流程、或者增加依赖库、工具等</td></tr><tr><td align="left">ci</td><td align="left">持续集成修改</td></tr><tr><td align="left">docs</td><td align="left">文档修改</td></tr><tr><td align="left">feature</td><td align="left">新特性、新功能</td></tr><tr><td align="left">fix</td><td align="left">修改 bug</td></tr><tr><td align="left">perf</td><td align="left">优化相关，比如提升性能、体验</td></tr><tr><td align="left">refactor</td><td align="left">代码重构</td></tr><tr><td align="left">revert</td><td align="left">回滚到上一个版本</td></tr><tr><td align="left">style</td><td align="left">代码格式修改</td></tr><tr><td align="left">test</td><td align="left">测试用例修改</td></tr></tbody></table><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p><a href="https://commitlint.js.org/#/guides-local-setup?id=install-commitlint">https://commitlint.js.org/#/guides-local-setup?id=install-commitlint</a></p><h4 id="安装-commitlint"><a href="#安装-commitlint" class="headerlink" title="安装 commitlint"></a>安装 commitlint</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> <span class="token function">install</span> @commitlint/cli @commitlint/config-conventional <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装-husky"><a href="#安装-husky" class="headerlink" title="安装 husky"></a>安装 husky</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Install Husky v6</span><span class="token function">npm</span> <span class="token function">install</span> husky --save-dev<span class="token comment"># or</span><span class="token function">yarn</span> <span class="token function">add</span> husky <span class="token parameter variable">--dev</span><span class="token comment"># Activate hooks</span>npx husky <span class="token function">install</span><span class="token comment"># or</span><span class="token function">yarn</span> husky <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Add-hook"><a href="#Add-hook" class="headerlink" title="Add hook"></a>Add hook</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx husky <span class="token function">add</span> .husky/commit-msg  <span class="token string">'npx --no-install commitlint --edit $&#123;1&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8.2.3 配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npx husky add <span class="token punctuation">.</span>husky<span class="token operator">/</span>commit<span class="token operator">-</span>msg <span class="token string">"npx --no-install commitlint --edit $1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><p><a href="https://commitlint.js.org/#/reference-configuration">https://commitlint.js.org/#/reference-configuration</a></p><p>commitlint.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@commitlint/config-conventional"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"type-enum"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token string">"always"</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span>        <span class="token string">"build"</span><span class="token punctuation">,</span>        <span class="token string">"chore"</span><span class="token punctuation">,</span>        <span class="token string">"ci"</span><span class="token punctuation">,</span>        <span class="token string">"docs"</span><span class="token punctuation">,</span>        <span class="token string">"feature"</span><span class="token punctuation">,</span>        <span class="token string">"fix"</span><span class="token punctuation">,</span>        <span class="token string">"perf"</span><span class="token punctuation">,</span>        <span class="token string">"refactor"</span><span class="token punctuation">,</span>        <span class="token string">"revert"</span><span class="token punctuation">,</span>        <span class="token string">"style"</span><span class="token punctuation">,</span>        <span class="token string">"test"</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-详细案例"><a href="#4-详细案例" class="headerlink" title="4. 详细案例"></a>4. 详细案例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">ignores</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token parameter">commit</span><span class="token punctuation">)</span> <span class="token operator">=></span> commit<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@commitlint/config-conventional"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">parserPreset</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">parserOpts</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">headerPattern</span><span class="token operator">:</span>        <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\w*|[\u4e00-\u9fa5]*)(?:[\(\（](.*)[\)\）])?[\:\：] (.*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">headerCorrespondence</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"scope"</span><span class="token punctuation">,</span> <span class="token string">"subject"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">referenceActions</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"close"</span><span class="token punctuation">,</span>        <span class="token string">"closes"</span><span class="token punctuation">,</span>        <span class="token string">"closed"</span><span class="token punctuation">,</span>        <span class="token string">"fix"</span><span class="token punctuation">,</span>        <span class="token string">"fixes"</span><span class="token punctuation">,</span>        <span class="token string">"fixed"</span><span class="token punctuation">,</span>        <span class="token string">"resolve"</span><span class="token punctuation">,</span>        <span class="token string">"resolves"</span><span class="token punctuation">,</span>        <span class="token string">"resolved"</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">issuePrefixes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"#"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">noteKeywords</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"BREAKING CHANGE"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">fieldPattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^-(.*?)-$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">revertPattern</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^Revert\s"([\s\S]*)"\s*This reverts commit (\w*)\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">revertCorrespondence</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"header"</span><span class="token punctuation">,</span> <span class="token string">"hash"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">mergePattern</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token literal-property property">mergeCorrespondence</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"body-leading-blank"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"footer-leading-blank"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"header-max-length"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"always"</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"subject-empty"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"type-empty"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"type-enum"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token string">"always"</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span>        <span class="token string">"feat"</span><span class="token punctuation">,</span> <span class="token comment">// 新特性</span>        <span class="token string">"fix"</span><span class="token punctuation">,</span> <span class="token comment">// 修复bug</span>        <span class="token string">"perf"</span><span class="token punctuation">,</span> <span class="token comment">// 优化（性能）</span>        <span class="token string">"style"</span><span class="token punctuation">,</span> <span class="token comment">// 样式</span>        <span class="token string">"docs"</span><span class="token punctuation">,</span> <span class="token comment">// 文档</span>        <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token comment">// 单元测试</span>        <span class="token string">"refactor"</span><span class="token punctuation">,</span> <span class="token comment">// 重构</span>        <span class="token string">"build"</span><span class="token punctuation">,</span> <span class="token comment">// 依赖打包相关</span>        <span class="token string">"ci"</span><span class="token punctuation">,</span> <span class="token comment">// 持续集成</span>        <span class="token string">"chore"</span><span class="token punctuation">,</span> <span class="token comment">// 日常</span>        <span class="token string">"revert"</span><span class="token punctuation">,</span> <span class="token comment">// 回滚</span>        <span class="token string">"wip"</span><span class="token punctuation">,</span> <span class="token comment">// 开发中</span>        <span class="token string">"workflow"</span><span class="token punctuation">,</span> <span class="token comment">// 工作流</span>        <span class="token string">"types"</span><span class="token punctuation">,</span> <span class="token comment">// 类型定义</span>        <span class="token string">"release"</span><span class="token punctuation">,</span> <span class="token comment">// 发布</span>        <span class="token string">"improvement"</span><span class="token punctuation">,</span> <span class="token comment">// 改进</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5. 常见问题"></a>5. 常见问题</h2><p><strong>问题 1</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">hint</span><span class="token operator">:</span> The <span class="token string">'.husky/pre-commit'</span> hook was ignored because it's not <span class="token keyword">set</span> <span class="token keyword">as</span> executable<span class="token punctuation">.</span><span class="token literal-property property">hint</span><span class="token operator">:</span> You can disable <span class="token keyword">this</span> warning <span class="token keyword">with</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git config advice.ignoredHook false</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token literal-property property">hint</span><span class="token operator">:</span> The <span class="token string">'.husky/commit-msg'</span> hook was ignored because it's not <span class="token keyword">set</span> <span class="token keyword">as</span> executable<span class="token punctuation">.</span><span class="token literal-property property">hint</span><span class="token operator">:</span> You can disable <span class="token keyword">this</span> warning <span class="token keyword">with</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git config advice.ignoredHook false</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这些提示的意思是：Husky 预提交钩子和提交消息钩子没有被设置为可执行文件，所以 Git 忽略了它们。</p><p>具体原因是:使用 Husky 时，它需要在 .husky 目录下创建一些钩子脚本文件，如:</p><ul><li><p>.husky/pre-commit</p></li><li><p>.husky/commit-msg</p><p>但这些文件默认情况下不是可执行的。需要使用以下命令设置为可执行:</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置为可执行</span><span class="token function">chmod</span> +x .husky/pre-commit<span class="token function">chmod</span> +x .husky/commit-msg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>毕竟只有可执行文件才能被 Git 用作钩子执行。</p>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-router源码深度解刨</title>
      <link href="/2023/07/01/react-router-yuan-ma-shi-xian/"/>
      <url>/2023/07/01/react-router-yuan-ma-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>代码地址：</p><ul><li><a href="https://github.com/ghx9908/react-router">https://github.com/ghx9908/react-router</a></li><li><a href="https://github.com/remix-run/react-router">https://github.com/remix-run/react-router</a></li><li><a href="https://create-react-app.dev/">https://create-react-app.dev/</a></li><li><a href="https://reactrouter.com/">https://reactrouter.com/</a></li></ul><h2 id="1-React-路由原理"><a href="#1-React-路由原理" class="headerlink" title="1. React 路由原理"></a>1. React 路由原理</h2><ul><li>不同的路径渲染不同的组件</li><li>有两种实现方式<ul><li>HashRouter:利用 hash 实现路由切换</li><li>BrowserRouter:实现 h5 Api 实现路由的切换</li></ul></li></ul><h3 id="1-1-HashRouter"><a href="#1-1-HashRouter" class="headerlink" title="1.1 HashRouter"></a>1.1 HashRouter</h3><ul><li>利用 hash 实现路由切换</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#/b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"hashchange"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">//把最前面的那个# 删除</span>      <span class="token keyword">let</span> pathname <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      root<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> pathname    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-BrowserRouter"><a href="#1-2-BrowserRouter" class="headerlink" title="1.2 BrowserRouter"></a>1.2 BrowserRouter</h3><ul><li>利用 h5 Api 实现路由的切换</li></ul><h4 id="1-2-1-history"><a href="#1-2-1-history" class="headerlink" title="1.2.1 history"></a>1.2.1 history</h4><ul><li>HTML5 规范给我们提供了一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/history">history</a>接口</li><li>HTML5 History API 包括 2 个方法：<code>history.pushState()</code>和<code>history.replaceState()</code>，和 1 个事件<code>window.onpopstate</code></li></ul><h5 id="1-2-1-1-pushState"><a href="#1-2-1-1-pushState" class="headerlink" title="1.2.1.1 pushState"></a>1.2.1.1 pushState</h5><ul><li>history.pushState(stateObject, title, url)，包括三个参数<ul><li>第一个参数用于存储该 url 对应的状态对象，该对象可在 onpopstate 事件中获取，也可在 history 对象中获取</li><li>第二个参数是标题，目前浏览器并未实现</li><li>第三个参数则是设定的 url</li></ul></li><li>pushState 函数向浏览器的历史堆栈压入一个 url 为设定值的记录，并改变历史堆栈的当前指针至栈顶</li></ul><h5 id="1-2-1-2-replaceState"><a href="#1-2-1-2-replaceState" class="headerlink" title="1.2.1.2 replaceState"></a>1.2.1.2 replaceState</h5><ul><li>该接口与 pushState 参数相同，含义也相同</li><li>唯一的区别在于<code>replaceState</code>是替换浏览器历史堆栈的当前历史记录为设定的 url</li><li>需要注意的是<code>replaceState</code>不会改动浏览器历史堆栈的当前指针</li></ul><h5 id="1-2-1-3-onpopstate"><a href="#1-2-1-3-onpopstate" class="headerlink" title="1.2.1.3 onpopstate"></a>1.2.1.3 onpopstate</h5><ul><li>该事件是 window 的属性</li><li>该事件会在调用浏览器的前进、后退以及执行<code>history.forward</code>、<code>history.back</code>、和<code>history.go</code>触发，因为这些操作有一个共性，即<strong>修改了历史堆栈的当前指针</strong></li><li>在不改变 document 的前提下，一旦当前指针改变则会触发<code>onpopstate</code>事件</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">go</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>/a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">go</span><span class="token punctuation">(</span><span class="token string">'/b'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>/b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">go</span><span class="token punctuation">(</span><span class="token string">'/c'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>/c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>前进<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>后退<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      root<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname    <span class="token punctuation">&#125;</span>    <span class="token comment">//只有当你前进后退的时候会触发，pushState不会触发</span>    window<span class="token punctuation">.</span>onpopstate <span class="token operator">=</span> render    <span class="token keyword">let</span> historyObj <span class="token operator">=</span> window<span class="token punctuation">.</span>history    <span class="token keyword">let</span> oldPushState <span class="token operator">=</span> historyObj<span class="token punctuation">.</span>pushState    historyObj<span class="token punctuation">.</span><span class="token function-variable function">pushState</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> title<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">oldPushState</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>history<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      historyObj<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      historyObj<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment">//historyObj.forward();</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">back</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      historyObj<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment">//historyObj.back();</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-使用基本路由"><a href="#2-使用基本路由" class="headerlink" title="2.使用基本路由"></a>2.使用基本路由</h2><ul><li><code>HashRouter</code> 是一个使用 URL 的哈希部分（# 之后的部分）来实现客户端路由的路由器。它的主要优势是可以在不需要服务器端配置的情况下支持浏览器的历史记录功能。这在一些特定场景下（例如 GitHub Pages）非常实用</li><li><code>BrowserRouter</code> 是一个使用 HTML5 历史记录 API（pushState、replaceState 和 popstate 事件）的路由器。它可以帮助你创建更美观的 URL（没有哈希部分）以及更好地支持服务器端渲染的单页面应用（SPA）</li><li><code>Routes</code>组件是一个重要的组成部分，它负责定义和组织路由规则</li><li><code>Route</code> 组件用于定义应用程序的路由规则。Route 组件需要指定一个 URL 路径（通过 path 属性）和与该路径关联的组件（通过 element 属性）。当用户访问与某个 Route 定义的路径相匹配的 URL 时，React Router 会渲染与该路径关联的组件,如果您希望为嵌套路由提供支持，可以在 Route 的 element 属性中使用 Outlet 组件。当子路由匹配时，Outlet 组件将被替换为对应的子路由组件</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Routes</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Home</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">User</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/profile<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Profile</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Routes</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-实现基本路由"><a href="#3-实现基本路由" class="headerlink" title="3.实现基本路由"></a>3.实现基本路由</h2><p>-</p><p><img src="https://raw.githubusercontent.com/ghx9908/image-hosting/master/img20230630164132.png"></p><h3 id="3-1BrowserRouter组件的实现"><a href="#3-1BrowserRouter组件的实现" class="headerlink" title="3.1BrowserRouter组件的实现"></a>3.1<strong>BrowserRouter</strong>组件的实现</h3><ul><li>创建一个 history 对象保存路由历史记录</li><li>存储 history 的 location 和 action 信息到状态 state 中</li><li>当 history 发生变化时,监听更新状态</li><li>最终将状态 state 和 history 作为 props 传递给 <Router> 组件</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 使用 useRef 缓存 history 对象,避免重复创建</span><span class="token comment">// 状态 state 存储 location 和 action</span><span class="token comment">// 在 useLayoutEffect 中监听 history 变化,并更新状态</span><span class="token comment">// 将状态和 history 对象作为 Router 组件的 props 传递</span><span class="token comment">// 以达到与 Router 组件高效同步的目的</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">BrowserRouter</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 使用 Ref 存取 history 对象,只在第一次渲染时创建</span>  <span class="token keyword">const</span> historyRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>historyRef<span class="token punctuation">.</span>current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    historyRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">createBrowserHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> history <span class="token operator">=</span> historyRef<span class="token punctuation">.</span>current  <span class="token comment">// 状态 state 存储 location 和 action 信息</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">location</span><span class="token operator">:</span> history<span class="token punctuation">.</span>location<span class="token punctuation">,</span>    <span class="token literal-property property">action</span><span class="token operator">:</span> history<span class="token punctuation">.</span>action<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 在 useLayoutEffect 中监听 history 变化,并更新状态</span>  <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>setState<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>history<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 返回 Router 组件,并使用状态及 history 对象作为 props</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Router</span></span>      <span class="token attr-name">children</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span></span>      <span class="token attr-name">location</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>state<span class="token punctuation">.</span>location<span class="token punctuation">&#125;</span></span>      <span class="token attr-name">navigator</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>history<span class="token punctuation">&#125;</span></span>      <span class="token attr-name">navigationType</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>state<span class="token punctuation">.</span>action<span class="token punctuation">&#125;</span></span>    <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2HashRouter组件的实现"><a href="#3-2HashRouter组件的实现" class="headerlink" title="3.2HashRouter组件的实现"></a>3.2<strong>HashRouter</strong>组件的实现</h3><ul><li>通过 createHashHistory() 创建一个保存 hash 变化记录的 history 对象</li><li>使用 useRef 来缓存 history 对象,避免重复创建</li><li>状态 state 中存储 location 和 action 信息</li><li>在 useLayoutEffect 中监听 history 变化,更新状态</li><li>将状态 state 和 history 对象作为 props 传给 <Router/>组件,从而实现 hash 路由功能</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">HashRouter</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//  使用 Ref 缓存 history 对象,只在第一次渲染时创建</span>  <span class="token keyword">const</span> historyRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>historyRef<span class="token punctuation">.</span>current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    historyRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token function">createHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> history <span class="token operator">=</span> historyRef<span class="token punctuation">.</span>current  <span class="token comment">//   状态 state 存储 location 和 action 信息</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">location</span><span class="token operator">:</span> history<span class="token punctuation">.</span>location<span class="token punctuation">,</span>    <span class="token literal-property property">action</span><span class="token operator">:</span> history<span class="token punctuation">.</span>action<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//   在 useLayoutEffect 中监听 history 变化,并更新状态</span>  <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>setState<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>history<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">//  返回 Router 组件,并使用状态及 history 对象作为 props</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Router</span></span>      <span class="token attr-name">children</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span></span>      <span class="token attr-name">location</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>state<span class="token punctuation">.</span>location<span class="token punctuation">&#125;</span></span>      <span class="token attr-name">navigator</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>history<span class="token punctuation">&#125;</span></span>      <span class="token attr-name">navigationType</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>state<span class="token punctuation">.</span>action<span class="token punctuation">&#125;</span></span>    <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用 useRef 来缓存 history 对象,避免重复创建</span><span class="token comment">// 状态 state 存储 location 和 action 保存历史记录信息</span><span class="token comment">// 在 useLayoutEffect 中监听 history 变化,并更新状态</span><span class="token comment">// 将状态和 history对象作为 props 传递给&lt;Router />组件,实现hash路由</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-Router-的实现"><a href="#3-3-Router-的实现" class="headerlink" title="3.3 Router 的实现"></a>3.3 Router 的实现</h3><p><strong>创建三个全局上下文:</strong></p><ol><li><p>NavigationContext : 提供 history 对象</p></li><li><p>LocationContext : 提供 location(地址)信息</p></li><li><p>RouteContext : 提供与当前路由有关的信息</p></li></ol><p><strong>Router 组件:</strong></p><ul><li>从 props 中获取 children(子路由)、location 和 history</li><li>分别将 history 和 location 信息放入 NavigationContext 和 LocationContext 中</li><li>从而让后代组件都可以通过 context 获取这两个变量</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 创建 NavigationContext,存储 history 对象</span><span class="token keyword">export</span> <span class="token keyword">const</span> NavigationContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">// 创建 LocationContext,存储 location 信息</span><span class="token keyword">export</span> <span class="token keyword">const</span> LocationContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">// 创建 RouteContext,存储与当前路由相关的上下文</span><span class="token keyword">export</span> <span class="token keyword">const</span> RouteContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">outlet</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token literal-property property">matches</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/** * 路由器组件  @param &#123;&#125; children  子路由组件    @param &#123;&#125; location  当前地址  @param &#123;&#125; navigator history 对象 * @returns */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Router</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children<span class="token punctuation">,</span> location<span class="token punctuation">,</span> navigator<span class="token punctuation">,</span> navigationType <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 往全局上下文中分别提供 history 对象和 location 信息</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavigationContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>navigator<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LocationContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>location<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">LocationContext.Provider</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavigationContext.Provider</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-Routes-组件的实现"><a href="#3-4-Routes-组件的实现" class="headerlink" title="3.4 Routes 组件的实现"></a>3.4 Routes 组件的实现</h3><p>Routes 组件做了以下工作:</p><ol><li>从 children 中遍历所有的 Route 组件</li><li>根据每个 Route 的 path 属性,生成一个路由表 routes</li><li>调用 useRoutes(routes) ,根据当前路径,匹配出对应的 Route</li><li>渲染匹配的 Route 组件</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"> <span class="token comment">/** * 读取当前的路径，和每一个孩子的path做匹配，渲染匹配的组件 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Routes</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 从子节点 Route 中创建路由表</span>  <span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token function">createRoutesFromChildren</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span>  <span class="token comment">// 调用 useRoutes,根据当前路径匹配路由</span>  <span class="token comment">// 核心</span>  <span class="token keyword">return</span> <span class="token function">useRoutes</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Route</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createRoutesFromChildren</span><span class="token punctuation">(</span><span class="token parameter">children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  React<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> route <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> element<span class="token punctuation">.</span>props<span class="token punctuation">.</span>path<span class="token punctuation">,</span>      <span class="token literal-property property">element</span><span class="token operator">:</span> element<span class="token punctuation">.</span>props<span class="token punctuation">.</span>element<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果有子节点 Route,则递归创建路由</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      route<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">createRoutesFromChildren</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    routes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> routes<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-useRoutes简单版的实现"><a href="#3-5-useRoutes简单版的实现" class="headerlink" title="3.5 useRoutes简单版的实现"></a>3.5 <strong>useRoutes</strong>简单版的实现</h3><p><strong>useRoutes 函数的作用是:</strong></p><ol><li>获取当前 URL 地址</li><li>遍历路由表 routes</li><li>如果有匹配的路由,则渲染该路由对应的组件</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useRoutes</span><span class="token punctuation">(</span><span class="token parameter">routes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 从 LocationContext 中获取当前地址</span>  <span class="token keyword">let</span> location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取 pathname</span>  <span class="token keyword">let</span> pathname <span class="token operator">=</span> location<span class="token punctuation">.</span>pathname <span class="token operator">||</span> <span class="token string">"/"</span><span class="token punctuation">;</span><span class="token comment">// 遍历路由表</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> routes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">let</span> route <span class="token operator">=</span> routes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 如果当前路径匹配路由</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>path <span class="token operator">===</span> pathname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 渲染该路由的组件</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>           route<span class="token punctuation">.</span>element        <span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6-useLocation-的实现"><a href="#3-6-useLocation-的实现" class="headerlink" title="3.6 useLocation 的实现"></a>3.6 useLocation 的实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取 LocationContext 中的 location 对象</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> location <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useContext</span><span class="token punctuation">(</span>LocationContext<span class="token punctuation">)</span>  <span class="token keyword">return</span> location<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-实现-history"><a href="#4-实现-history" class="headerlink" title="4.实现 history"></a>4.实现 history</h2><h3 id="4-1-createBrowserHistory-的实现"><a href="#4-1-createBrowserHistory-的实现" class="headerlink" title="4.1 createBrowserHistory 的实现"></a>4.1 createBrowserHistory 的实现</h3><ol><li>定义了获取 location 信息的函数 getBrowserLocation()</li><li>定义创建路由 href 的函数 createBrowserHref()</li><li>调用 getUrlBashHistory() 来实现具体的 history 对象</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createBrowserHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取当前 location 信息的函数</span>  <span class="token keyword">function</span> <span class="token function">getBrowserLocation</span><span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span> globalHistory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> pathname <span class="token punctuation">&#125;</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>location    <span class="token keyword">const</span> state <span class="token operator">=</span> globalHistory<span class="token punctuation">.</span>state <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> pathname<span class="token punctuation">,</span> <span class="token literal-property property">state</span><span class="token operator">:</span> state<span class="token punctuation">.</span>usr <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 创建具体 href 的函数</span>  <span class="token keyword">function</span> <span class="token function">createBrowserHref</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> to  <span class="token punctuation">&#125;</span>  <span class="token comment">// 调用封装函数创建 history 对象</span>  <span class="token keyword">return</span> <span class="token function">getUrlBashHistory</span><span class="token punctuation">(</span>getBrowserLocation<span class="token punctuation">,</span> createBrowserHref<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-createHashHistory-的实现"><a href="#4-2-createHashHistory-的实现" class="headerlink" title="4.2 createHashHistory 的实现"></a>4.2 createHashHistory 的实现</h3><ol><li>如果没有 hash 初始为</li><li>定义了获取 location 信息的函数 getHashLocation()</li><li>定义创建路由 href 的函数 createHashHref(). 调用 getUrlBashHistory() 来实现具体的 history 对象</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createHashHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 如果没有hash,初始化为#/</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">"/"</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 获取当前 hash 信息的函数</span>  <span class="token keyword">function</span> <span class="token function">getHashLocation</span><span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span> globalHistory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> pathname <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> state <span class="token operator">=</span> globalHistory<span class="token punctuation">.</span>state <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> pathname<span class="token punctuation">,</span> <span class="token literal-property property">state</span><span class="token operator">:</span> state<span class="token punctuation">.</span>usr <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 创建具体hash href的函数</span>  <span class="token keyword">function</span> <span class="token function">createHashHref</span><span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href    <span class="token keyword">let</span> hashIndex <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span>    <span class="token comment">// 对url做处理,获得#之前的部分</span>    <span class="token keyword">let</span> href <span class="token operator">=</span> hashIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> url <span class="token operator">:</span> url<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> hashIndex<span class="token punctuation">)</span>    <span class="token comment">// 然后添加#</span>    <span class="token keyword">return</span> href <span class="token operator">+</span> <span class="token string">"#"</span> <span class="token operator">+</span> to  <span class="token punctuation">&#125;</span>  <span class="token comment">// 调用封装函数创建 history 对象</span>  <span class="token keyword">return</span> <span class="token function">getUrlBashHistory</span><span class="token punctuation">(</span>getHashLocation<span class="token punctuation">,</span> createHashHref<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-getUrlBashHistory-的实现"><a href="#4-3-getUrlBashHistory-的实现" class="headerlink" title="4.3 getUrlBashHistory 的实现"></a>4.3 getUrlBashHistory 的实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 创建路由history * @param &#123;*&#125; getLocation  获取当前 location 信息的函数 * @param &#123;*&#125; createHarf 创建具体 href 的函数 * @returns */</span><span class="token keyword">function</span> <span class="token function">getUrlBashHistory</span><span class="token punctuation">(</span><span class="token parameter">getLocation<span class="token punctuation">,</span> createHarf</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取全局history对象</span>  <span class="token keyword">const</span> globalHistory <span class="token operator">=</span> window<span class="token punctuation">.</span>history  <span class="token comment">// 存储监听函数</span>  <span class="token keyword">let</span> listener <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment">// 当前索引</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 如果index为空,初始化为0</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">// 使用replaceState初始化</span>    globalHistory<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">usr</span><span class="token operator">:</span> globalHistory<span class="token punctuation">.</span>state<span class="token punctuation">,</span>        <span class="token literal-property property">idx</span><span class="token operator">:</span> index<span class="token punctuation">,</span> <span class="token comment">// 在原来的基础上添加一个索引</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">""</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 获取索引的函数</span>  <span class="token keyword">function</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> state <span class="token operator">=</span> globalHistory<span class="token punctuation">.</span>state <span class="token operator">||</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">idx</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>idx  <span class="token punctuation">&#125;</span>  <span class="token comment">// popstate事件(也就是路由变化)时调用监听函数</span>  <span class="token keyword">function</span> <span class="token function">handlePop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 设置action类型为 Pop</span>    action <span class="token operator">=</span> Action<span class="token punctuation">.</span>Pop    <span class="token comment">// 获取最新索引</span>    <span class="token keyword">let</span> nextIndex <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 计算索引变化量</span>    <span class="token keyword">let</span> delta <span class="token operator">=</span> nextIndex <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> nextIndex <span class="token operator">-</span> index    <span class="token comment">// 更新索引</span>    index <span class="token operator">=</span> nextIndex    <span class="token comment">// 调用监听函数,传递action、location和索引变化量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        action<span class="token punctuation">,</span>        <span class="token literal-property property">location</span><span class="token operator">:</span> history<span class="token punctuation">.</span>location<span class="token punctuation">,</span>        delta<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   *  通过pushState()方法改变路由历史记录 调用监听函数,传入变更信息   * @param &#123;*&#125; to   * @param &#123;*&#125; state   */</span>  <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将索引 +1</span>    index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment">// 设置action为Push类型</span>    action <span class="token operator">=</span> Action<span class="token punctuation">.</span>Push    <span class="token comment">// 根据路径创建url</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">createHarf</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>    <span class="token comment">// 使用pushState方法改变历史</span>    globalHistory<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">idx</span><span class="token operator">:</span> index<span class="token punctuation">,</span> <span class="token literal-property property">usr</span><span class="token operator">:</span> state <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 调用监听函数,传递action、location和变更索引(delta为1)</span>      <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> action<span class="token punctuation">,</span> <span class="token literal-property property">location</span><span class="token operator">:</span> history<span class="token punctuation">.</span>location<span class="token punctuation">,</span> <span class="token literal-property property">delta</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 设置action为Replace类型</span>    action <span class="token operator">=</span> Action<span class="token punctuation">.</span>Replace    <span class="token comment">// 获取当前索引</span>    index <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 根据路径创建URL</span>    <span class="token keyword">let</span> url <span class="token operator">=</span> history<span class="token punctuation">.</span><span class="token function">createHref</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>    <span class="token comment">// 使用replaceState()替换历史记录</span>    globalHistory<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">idx</span><span class="token operator">:</span> index<span class="token punctuation">,</span>        <span class="token literal-property property">usr</span><span class="token operator">:</span> state<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">""</span><span class="token punctuation">,</span>      url    <span class="token punctuation">)</span>    <span class="token comment">// 如果有监听函数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 传递变更信息给监听函数</span>      <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        action<span class="token punctuation">,</span>        <span class="token literal-property property">location</span><span class="token operator">:</span> history<span class="token punctuation">.</span>location<span class="token punctuation">,</span>        <span class="token literal-property property">delta</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> history <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">get</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> index    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> action    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">location</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">getLocation</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> globalHistory<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    push<span class="token punctuation">,</span>    replace<span class="token punctuation">,</span>    <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 订阅popstate事件</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>PopstateEventType<span class="token punctuation">,</span> handlePop<span class="token punctuation">)</span>      <span class="token comment">// 存储监听函数</span>      listener <span class="token operator">=</span> fn      <span class="token comment">// 返回移除监听功能的函数</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 移除事件监听</span>        window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>PopstateEventType<span class="token punctuation">,</span> handlePop<span class="token punctuation">)</span>        <span class="token comment">// 清空监听函数</span>        listener <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">go</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> globalHistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> history<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="push-函数"><a href="#push-函数" class="headerlink" title="push()函数:"></a><strong>push()函数</strong>:</h4><ul><li>通过 pushState()方法改变路由历史记录</li><li>调用监听函数,传入变更信息<ul><li>action 类型</li><li>最新 location 信息</li><li>索引变化量(delta 为 1)</li></ul></li></ul><p>当调用 push()方法导航到新的路由时,会触发监听函数,我们可以在函数内进行相关的路由切换操作。</p><h4 id="replace-函数"><a href="#replace-函数" class="headerlink" title="replace()函数"></a><strong>replace()函数</strong></h4><ul><li><p>通过 replaceState()方法替换路由历史记录</p></li><li><p>调用监听函数,传入变更信息</p><ul><li><p>action 类型</p></li><li><p>最新 location 信息</p></li><li><p>索引变化量(delta 为 0)</p></li></ul></li></ul><p>当调用 replace()方法导航到新的路由时,会触发监听函数,我们可以在函数内进行相关的路由切换操作。</p><h4 id="listen-方法"><a href="#listen-方法" class="headerlink" title="listen()方法"></a><strong>listen()方法</strong></h4><p>作用</p><ul><li>订阅 popstate 事件,监听路由变化</li><li>接收一个回调函数 fn ,用作监听函数</li><li>返回一个销毁监听器的函数</li></ul><p>整体流程是：</p><ol><li>调用 listen() 订阅事件</li><li>封装 fn 函数来处理路由变化逻辑</li><li>调用 remover() 移除事件监听</li></ol><h2 id="5-路径参数"><a href="#5-路径参数" class="headerlink" title="5. 路径参数"></a>5. 路径参数</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/post/:id<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-1useRoutes"><a href="#5-1useRoutes" class="headerlink" title="5.1useRoutes"></a>5.1useRoutes</h3><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">// 根据 routes 配置的路由表匹配当前 location,并渲染匹配的路由元素export function useRoutes(routes) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const location = useLocation() // 获取当前 location 对象</span><span class="token prefix unchanged"> </span><span class="token line"> let pathname = location.pathname || "/" // 取 pathname,如果不存在则默认为 /</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> let matches = matchRoutes(routes, &#123; pathname &#125;) // 使用 pathname 匹配 routes 路由表</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> console.log("matches=>", matches)</span><span class="token prefix unchanged"> </span><span class="token line"> if (matches) return match.route.element // 匹配成功则渲染路由组件</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2matchRoutes"><a href="#5-2matchRoutes" class="headerlink" title="5.2matchRoutes"></a>5.2matchRoutes</h3><ul><li>根据 location 和 routes 获取当前应该匹配的具体路由</li></ul><p>匹配信息包含:</p><ul><li>路径匹配的参数值</li><li>匹配成功的具体路由</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//根据 location 和 routes获取当前应该匹配的具体路由</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">matchRoutes</span><span class="token punctuation">(</span><span class="token parameter">routes<span class="token punctuation">,</span> location</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取地址中的路径</span>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> pathname <span class="token punctuation">&#125;</span> <span class="token operator">=</span> location  <span class="token comment">// 最终匹配结果</span>  <span class="token keyword">let</span> match <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment">// 遍历路由表</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> routes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 尝试使用 matchPath 匹配路径</span>    match <span class="token operator">=</span> <span class="token function">matchPath</span><span class="token punctuation">(</span>routes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">,</span> pathname<span class="token punctuation">)</span>    <span class="token comment">// 如果匹配成功</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 设置匹配的路由信息</span>      match<span class="token punctuation">.</span>route <span class="token operator">=</span> routes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token comment">// 返回匹配结果</span>      <span class="token keyword">return</span> match    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//根据提供的路由模式和路径尝试匹配路径,</span><span class="token comment">//如果匹配成功则返回:匹配路由的参数对象 params</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">matchPath</span><span class="token punctuation">(</span><span class="token parameter">pattern<span class="token punctuation">,</span> pathname</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 使用 compilePath 解析路由模式</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>matcher<span class="token punctuation">,</span> paramNames<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">compilePath</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">// 使用 matcher 尝试匹配路径</span>  <span class="token keyword">let</span> match <span class="token operator">=</span> pathname<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span>  <span class="token comment">// 如果不匹配则返回 null</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token comment">// 获取匹配后的组团</span>  <span class="token keyword">let</span> captureGroups <span class="token operator">=</span> match<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 创建params对象</span>  <span class="token keyword">let</span> params <span class="token operator">=</span> paramNames<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">memo<span class="token punctuation">,</span> paramName<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    memo<span class="token punctuation">[</span>paramName<span class="token punctuation">]</span> <span class="token operator">=</span> captureGroups<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">return</span> memo  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 返回匹配结果,包括params</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    params<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 根据一个路径字符串,构建一个匹配该路径的正则表达式。</span><span class="token comment">// 同时记录路径定义的参数名称</span><span class="token keyword">function</span> <span class="token function">compilePath</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// paramNames 用于存储匹配的参数</span>  <span class="token keyword">let</span> paramNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">//  构建正则表达式的源码 regexpSource</span>  <span class="token comment">// 通过调用 .replace() 处理 path</span>  <span class="token keyword">let</span> regexpSource <span class="token operator">=</span>    <span class="token string">"^"</span> <span class="token operator">+</span>    path      <span class="token comment">// 处理path</span>      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/\?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\/*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/:(\w+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> paramName</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 当匹配到 :param 时,将其替换为捕获组</span>        <span class="token comment">// 同时 push 到 paramNames</span>        paramNames<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>paramName<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"/([^\\/]+)"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 如果是完整匹配</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    regexpSource <span class="token operator">+=</span> <span class="token string">"$"</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 编译 regexpSource 成RegExp对象</span>  <span class="token keyword">let</span> matcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>regexpSource<span class="token punctuation">)</span>  <span class="token comment">// 返回匹配器和参数名list</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>matcher<span class="token punctuation">,</span> paramNames<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="matchPath-函数"><a href="#matchPath-函数" class="headerlink" title="matchPath 函数"></a>matchPath 函数</h4><p>根据提供的路由模式和路径尝试匹配路径,如果匹配成功则返回:</p><ul><li>匹配路由的参数对象 params</li></ul><p>params 对象包含:</p><ul><li>路由路径中定义的参数的值</li></ul><p>所以,通过调用这个函数,我们可以获得:</p><ul><li>路径是否匹配</li><li>匹配路由的参数</li></ul><p>从而可以提取匹配到的路由的参数,用于后续操作。</p><h4 id="compilePath-函数"><a href="#compilePath-函数" class="headerlink" title="compilePath 函数"></a>compilePath 函数</h4><p>通过调用这个函数,我们可以获得: <strong>[matcher, paramNames]</strong></p><ul><li><p>matcher:匹配路径的正则表达式</p></li><li><p>paramNames:路径定义的参数名称列表</p></li></ul><p>从而我们可以根据 matcher 来匹配路径,根据 paramNames 来提取匹配到的参数。</p><h2 id="6-Link-导航"><a href="#6-Link-导航" class="headerlink" title="6. Link 导航"></a>6. Link 导航</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">首页</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">用户管理</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/profile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">个人中心</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-Link-组件的实现"><a href="#6-1-Link-组件的实现" class="headerlink" title="6.1 Link 组件的实现"></a>6.1 Link 组件的实现</h3><p>Link 组件就是一个包装好点击跳转行为的 a 标签。</p><ul><li>捕获点击事件</li><li>阻止默认行为</li><li>调用 navigate(to, state)跳转到指定路由</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Link</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 提取 to 和 state 属性</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> to<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props  <span class="token comment">//使用useNavigate获取navigate函数</span>  <span class="token keyword">const</span> navigate <span class="token operator">=</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 点击时触发 navigate</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">navigate</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回a标签,绑定点击事件</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>a <span class="token punctuation">&#123;</span><span class="token operator">...</span>rest<span class="token punctuation">&#125;</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-useNavigate-的实现"><a href="#6-2-useNavigate-的实现" class="headerlink" title="6.2 useNavigate 的实现"></a>6.2 useNavigate 的实现</h3><p>返回一个 navigate() 函数</p><p>navigate() 内部会调用 <code>navigator.push()</code>来实现路由跳转</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 从 NavigationContext中读取路由导航器</span>  <span class="token keyword">let</span> navigator <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useContext</span><span class="token punctuation">(</span>NavigationContext<span class="token punctuation">)</span>  <span class="token comment">// 定义navigate函数</span>  <span class="token keyword">let</span> navigate <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useCallback</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 调用navigator的push方法</span>      navigator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 使navigate依赖navigator,只在它改变时更新</span>    <span class="token punctuation">[</span>navigator<span class="token punctuation">]</span>  <span class="token punctuation">)</span>  <span class="token comment">// 返回navigate函数</span>  <span class="token keyword">return</span> navigate<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-嵌套路由（核心）"><a href="#7-嵌套路由（核心）" class="headerlink" title="7. 嵌套路由（核心）"></a>7. 嵌套路由（核心）</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">User</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserAdd</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserList</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>detail/:id<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserDetail</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">></span></span><span class="token comment">//User -----</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">用户列表</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">添加用户</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Outlet</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-数据结构"><a href="#7-1-数据结构" class="headerlink" title="7.1 数据结构"></a>7.1 数据结构</h3><h4 id="7-1-1-routes"><a href="#7-1-1-routes" class="headerlink" title="7.1.1 routes"></a>7.1.1 routes</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Home <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>    <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token operator">&lt;</span>User <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token operator">&lt;</span>UserAdd <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token operator">&lt;</span>UserList <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"detail/:id"</span><span class="token punctuation">,</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token operator">&lt;</span>UserDetail <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token operator">&lt;</span>NotFound <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-1branches"><a href="#7-1-1branches" class="headerlink" title="7.1.1branches"></a>7.1.1branches</h4><p>简介版</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> branches <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user/*/add"</span><span class="token punctuation">,</span> <span class="token literal-property property">routesMeta</span><span class="token operator">:</span> <span class="token punctuation">[</span>user <span class="token operator">*</span> Meta<span class="token punctuation">,</span> addMeta<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user/*/list"</span><span class="token punctuation">,</span> <span class="token literal-property property">routesMeta</span><span class="token operator">:</span> <span class="token punctuation">[</span>user <span class="token operator">*</span> Meta<span class="token punctuation">,</span> listMeta<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user/*/detail"</span><span class="token punctuation">,</span> <span class="token literal-property property">routesMeta</span><span class="token operator">:</span> <span class="token punctuation">[</span>user <span class="token operator">*</span> Meta<span class="token punctuation">,</span> detailMeta<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user/*"</span><span class="token punctuation">,</span> <span class="token literal-property property">routesMeta</span><span class="token operator">:</span> <span class="token punctuation">[</span>user <span class="token operator">*</span> Meta<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复杂版</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> branches <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user/detail/:id"</span><span class="token punctuation">,</span>    <span class="token literal-property property">routesMeta</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">relativePath</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>        <span class="token literal-property property">childrenIndex</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>          <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>            <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"add"</span><span class="token punctuation">,</span>              <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>              <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"detail/:id"</span><span class="token punctuation">,</span>              <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">relativePath</span><span class="token operator">:</span> <span class="token string">"detail/:id"</span><span class="token punctuation">,</span>        <span class="token literal-property property">childrenIndex</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"detail/:id"</span><span class="token punctuation">,</span>          <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>            <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user/add"</span><span class="token punctuation">,</span>    <span class="token literal-property property">routesMeta</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">relativePath</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>        <span class="token literal-property property">childrenIndex</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>          <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>            <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"add"</span><span class="token punctuation">,</span>              <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>              <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"detail/:id"</span><span class="token punctuation">,</span>              <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">relativePath</span><span class="token operator">:</span> <span class="token string">"add"</span><span class="token punctuation">,</span>        <span class="token literal-property property">childrenIndex</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"add"</span><span class="token punctuation">,</span>          <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>            <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user/list"</span><span class="token punctuation">,</span>    <span class="token literal-property property">routesMeta</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">relativePath</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>        <span class="token literal-property property">childrenIndex</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>          <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>            <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"add"</span><span class="token punctuation">,</span>              <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>              <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"detail/:id"</span><span class="token punctuation">,</span>              <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">relativePath</span><span class="token operator">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>        <span class="token literal-property property">childrenIndex</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>          <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>            <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user"</span><span class="token punctuation">,</span>    <span class="token literal-property property">routesMeta</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">relativePath</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>        <span class="token literal-property property">childrenIndex</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>          <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>            <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"add"</span><span class="token punctuation">,</span>              <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>              <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"detail/:id"</span><span class="token punctuation">,</span>              <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    <span class="token literal-property property">routesMeta</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">relativePath</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>        <span class="token literal-property property">childrenIndex</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>          <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>            <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/*"</span><span class="token punctuation">,</span>    <span class="token literal-property property">routesMeta</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">relativePath</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>        <span class="token literal-property property">childrenIndex</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>          <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>            <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-2-matches"><a href="#7-1-2-matches" class="headerlink" title="7.1.2 matches"></a>7.1.2 matches</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> matches <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">"/user"</span><span class="token punctuation">,</span>    <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> User<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">"/user/list"</span><span class="token punctuation">,</span>    <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> UserList<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-1-3-renderMatches"><a href="#7-1-3-renderMatches" class="headerlink" title="7.1.3 renderMatches"></a>7.1.3 renderMatches</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">outlet</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>provider<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">outlet</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>            <span class="token literal-property property">matches</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">&#123;</span>                <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">"/user"</span><span class="token punctuation">,</span>                <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                  <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> User<span class="token punctuation">,</span>                    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user"</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#123;</span>                <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">"/user/list"</span><span class="token punctuation">,</span>                <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                  <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token literal-property property">type</span><span class="token operator">:</span> User<span class="token punctuation">,</span>                    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">matches</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">"/user"</span><span class="token punctuation">,</span>          <span class="token literal-property property">route</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>react<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token literal-property property">type</span><span class="token operator">:</span> User<span class="token punctuation">,</span>              <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/user"</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2useRoutes（完整版）"><a href="#7-2useRoutes（完整版）" class="headerlink" title="7.2useRoutes（完整版）"></a>7.2useRoutes（完整版）</h3><ul><li>根据当前地址</li><li>从路由表中匹配路径</li><li>如果匹配成功则渲染匹配的路由</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useRoutes</span><span class="token punctuation">(</span><span class="token parameter">routes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 从 LocationContext 中读取地址</span>  <span class="token keyword">let</span> location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 获取路径</span>  <span class="token keyword">let</span> pathname <span class="token operator">=</span> location<span class="token punctuation">.</span>pathname <span class="token operator">||</span> <span class="token string">"/"</span>  <span class="token comment">// 调用matchRoutes匹配路径</span>  <span class="token keyword">let</span> matches <span class="token operator">=</span> <span class="token function">matchRoutes</span><span class="token punctuation">(</span>routes<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> pathname <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 如果匹配成功</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>matches<span class="token punctuation">)</span>    <span class="token comment">// 渲染匹配结果</span>    <span class="token keyword">return</span> <span class="token function">renderMatches</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="matchRoutes"><a href="#matchRoutes" class="headerlink" title="matchRoutes"></a>matchRoutes</h4><blockquote><p>根据提供的 location 和 routes，将路由扁平化并分级为多个分支，遍历每个分支尝试匹配，返回第一个匹配成功的结果</p></blockquote><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">matchRoutes</span><span class="token punctuation">(</span><span class="token parameter">routes<span class="token punctuation">,</span> location</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 从地址中获取路径</span>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> pathname <span class="token punctuation">&#125;</span> <span class="token operator">=</span> location  <span class="token comment">// 将嵌套路由扁平化为一个数组</span>  <span class="token keyword">let</span> branches <span class="token operator">=</span> <span class="token function">flattenRoutes</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span>  <span class="token comment">// 给路由分级</span>  <span class="token function">rankRouteBranches</span><span class="token punctuation">(</span>branches<span class="token punctuation">)</span>  <span class="token comment">// 初始化matches为null</span>  <span class="token keyword">let</span> matches <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment">// 遍历扁平后的路由数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> matches <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> branches<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 尝试匹配当前分支</span>    matches <span class="token operator">=</span> <span class="token function">matchRouteBranch</span><span class="token punctuation">(</span>branches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pathname<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回匹配结果</span>  <span class="token keyword">return</span> matches<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3flattenRoutes"><a href="#7-3flattenRoutes" class="headerlink" title="7.3flattenRoutes"></a>7.3flattenRoutes</h3><ul><li>将一个嵌套的路由数组:扁平化为一个单层的路由数组,同时记录每个路由的元数据(子路由索引、完整路径等)</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">joinPaths</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">paths</span><span class="token punctuation">)</span> <span class="token operator">=></span> paths<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/\/+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token comment">// 定义一个函数，将嵌套的路由数组扁平化</span><span class="token keyword">function</span> <span class="token function">flattenRoutes</span><span class="token punctuation">(</span>  routes<span class="token punctuation">,</span>  branches <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  parentsMeta <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  parentPath <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义一个内部函数，处理单个路由对象</span>  <span class="token keyword">let</span> <span class="token function-variable function">flattenRoute</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">route<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义一个元数据对象，存储路由相关信息</span>    <span class="token keyword">let</span> meta <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">relativePath</span><span class="token operator">:</span> route<span class="token punctuation">.</span>path<span class="token punctuation">,</span>      <span class="token literal-property property">childrenIndex</span><span class="token operator">:</span> index<span class="token punctuation">,</span>      route<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用 joinPaths 函数将父路径与当前相对路径组合，生成完整路径</span>    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">joinPaths</span><span class="token punctuation">(</span><span class="token punctuation">[</span>parentPath<span class="token punctuation">,</span> meta<span class="token punctuation">.</span>relativePath<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 将当前路由元数据添加到父级元数据数组中</span>    <span class="token keyword">let</span> routesMeta <span class="token operator">=</span> parentsMeta<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span>    <span class="token comment">// 如果当前路由对象有子路由，则递归处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> route<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">flattenRoutes</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>children<span class="token punctuation">,</span> branches<span class="token punctuation">,</span> routesMeta<span class="token punctuation">,</span> path<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 将路径和元数据对象添加到结果数组中</span>    branches<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path<span class="token punctuation">,</span> routesMeta<span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token function">computeScore</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> route<span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 遍历路由数组，调用内部函数处理每个路由对象</span>  routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">route<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">flattenRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> index<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 返回扁平化后的路由数组</span>  <span class="token keyword">return</span> branches<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="computeScore"><a href="#computeScore" class="headerlink" title="computeScore"></a>computeScore</h4><p>根据 path 计算一个分数主要根据路径中的静态片断、参数、通配符等根据这些特征来给予不同的”分数”分数较高的路径匹配程度较好</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 如果路径中有通配符*就减少2分</span><span class="token keyword">const</span> splatPenalty <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token comment">// 作为indexRoute增加2分</span><span class="token keyword">const</span> indexRouteValue <span class="token operator">=</span> <span class="token number">2</span><span class="token comment">// 定义参数正则</span><span class="token keyword">const</span> paramRegexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^:\w+$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 动态片断增加3分</span><span class="token keyword">const</span> dynamicSegmentValue <span class="token operator">=</span> <span class="token number">3</span><span class="token comment">// 空片断增加1分</span><span class="token keyword">const</span> emptySegmentValue <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">// 静态片断增加10分</span><span class="token keyword">const</span> staticSegmentValue <span class="token operator">=</span> <span class="token number">10</span><span class="token comment">// 判断是否有*</span><span class="token keyword">const</span> <span class="token function-variable function">isSplat</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> s <span class="token operator">===</span> <span class="token string">"*"</span><span class="token keyword">function</span> <span class="token function">computeScore</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始分数</span>  <span class="token keyword">let</span> initialScore <span class="token operator">=</span> segments<span class="token punctuation">.</span>length  <span class="token comment">// 如果有*,减少2分</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>segments<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isSplat<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    initialScore <span class="token operator">+=</span> splatPenalty  <span class="token punctuation">&#125;</span>  <span class="token comment">// 如果是indexRoute,增加2分</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> index <span class="token operator">!==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    initialScore <span class="token operator">+=</span> indexRouteValue  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回每个片断计算后的分数</span>  <span class="token keyword">return</span> segments<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isSplat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">score<span class="token punctuation">,</span> segment</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当前片断的分数</span>    <span class="token keyword">let</span> currentScope <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">// 如果是路径参数,增加3分</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>paramRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>segment<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      currentScope <span class="token operator">+=</span> dynamicSegmentValue    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果是空片断,增加1分</span>    <span class="token comment">// 如果是静态片断,增加10分</span>    <span class="token comment">// ...</span>    <span class="token comment">// 总分+当前片断的分数</span>    score <span class="token operator">+=</span> currentScope    <span class="token comment">// 返回总分</span>    <span class="token keyword">return</span> score  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> initialScore<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="rankRouteBranches"><a href="#rankRouteBranches" class="headerlink" title="rankRouteBranches"></a>rankRouteBranches</h4><p>将路由数组根据 score 进行排序，score 高的分支排在前面，如果 score 相同则根据子路由 index 排序</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">rankRouteBranches</span><span class="token punctuation">(</span><span class="token parameter">branches</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 根据 score 排序 branches</span>  branches<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 比较 score</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>score <span class="token operator">!==</span> b<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> b<span class="token punctuation">.</span>score <span class="token operator">-</span> a<span class="token punctuation">.</span>score    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果 score 相同</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 比较子路由的 index</span>      <span class="token keyword">return</span> <span class="token function">compareIndexes</span><span class="token punctuation">(</span>        a<span class="token punctuation">.</span>routesMeta<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">meta</span><span class="token punctuation">)</span> <span class="token operator">=></span> meta<span class="token punctuation">.</span>childrenIndex<span class="token punctuation">)</span><span class="token punctuation">,</span>        b<span class="token punctuation">.</span>routesMeta<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">meta</span><span class="token punctuation">)</span> <span class="token operator">=></span> meta<span class="token punctuation">.</span>childrenIndex<span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-matchRouteBranch"><a href="#7-4-matchRouteBranch" class="headerlink" title="7.4 matchRouteBranch"></a>7.4 matchRouteBranch</h3><blockquote><p>根据提供的 branch 和 pathname，遍历 branch 中的路由元数据，尝试匹配每个路由路径，如果匹配成功则收集匹配信息，最终返回所有匹配成功的结果</p></blockquote><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">/** * 定义matchRouteBranch函数，用于匹配路由分支和路径名 * @param &#123;*&#125; branch 分支 * @param &#123;*&#125; pathname 路径名 * @returns */</span><span class="token keyword">function</span> <span class="token function">matchRouteBranch</span><span class="token punctuation">(</span><span class="token parameter">branch<span class="token punctuation">,</span> pathname</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 从branch中解构routesMeta</span>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> routesMeta <span class="token punctuation">&#125;</span> <span class="token operator">=</span> branch  <span class="token comment">// 初始化匹配参数、匹配路径名、匹配数组</span>  <span class="token keyword">let</span> matchedParams <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> matchedPathname <span class="token operator">=</span> <span class="token string">"/"</span>  <span class="token keyword">let</span> matches <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 遍历routesMeta</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> routesMeta<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取当前元素的meta</span>    <span class="token keyword">let</span> meta <span class="token operator">=</span> routesMeta<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment">// 判断是否为最后一个元素</span>    <span class="token keyword">let</span> end <span class="token operator">=</span> i <span class="token operator">===</span> routesMeta<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token comment">// 获取剩余路径名</span>    <span class="token keyword">let</span> remainingPathname <span class="token operator">=</span>      matchedPathname <span class="token operator">===</span> <span class="token string">"/"</span>        <span class="token operator">?</span> pathname        <span class="token operator">:</span> pathname<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>matchedPathname<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"/"</span>    <span class="token comment">// 获取当前路径匹配结果</span>    <span class="token keyword">let</span> match <span class="token operator">=</span> <span class="token function">matchPath</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> meta<span class="token punctuation">.</span>relativePath<span class="token punctuation">,</span> end <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> remainingPathname<span class="token punctuation">)</span>    <span class="token comment">// 若没有匹配结果，返回null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token comment">// 将当前匹配参数合并到matchedParams</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>matchedParams<span class="token punctuation">,</span> match<span class="token punctuation">.</span>params<span class="token punctuation">)</span>    <span class="token comment">// 获取当前路由</span>    <span class="token keyword">let</span> route <span class="token operator">=</span> meta<span class="token punctuation">.</span>route    <span class="token comment">// 将匹配结果添加到matches数组</span>    matches<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">params</span><span class="token operator">:</span> matchedParams<span class="token punctuation">,</span>      <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token function">joinPaths</span><span class="token punctuation">(</span><span class="token punctuation">[</span>matchedPathname<span class="token punctuation">,</span> match<span class="token punctuation">.</span>pathname<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      route<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 更新匹配路径名</span>    matchedPathname <span class="token operator">=</span> <span class="token function">joinPaths</span><span class="token punctuation">(</span><span class="token punctuation">[</span>matchedPathname<span class="token punctuation">,</span> match<span class="token punctuation">.</span>pathname<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回匹配结果数组</span>  <span class="token keyword">return</span> matches<span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">joinPaths</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">paths</span><span class="token punctuation">)</span> <span class="token operator">=></span> paths<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/\/+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="matchPath"><a href="#matchPath" class="headerlink" title="matchPath"></a>matchPath</h4><h5 id="matchPath-函数-1"><a href="#matchPath-函数-1" class="headerlink" title="matchPath 函数"></a>matchPath 函数</h5><p>根据提供的路由模式和路径尝试匹配路径,如果匹配成功则返回:</p><ul><li>匹配路由的参数对象 params</li></ul><p>params 对象包含:</p><ul><li>路由路径中定义的参数的值</li></ul><p>所以,通过调用这个函数,我们可以获得:</p><ul><li>路径是否匹配</li><li>匹配路由的参数</li></ul><p>从而可以提取匹配到的路由的参数,用于后续操作。</p><h5 id="compilePath-函数-1"><a href="#compilePath-函数-1" class="headerlink" title="compilePath 函数"></a>compilePath 函数</h5><p>通过调用这个函数,我们可以获得: <strong>[matcher, paramNames]</strong></p><ul><li><p>matcher:匹配路径的正则表达式</p></li><li><p>paramNames:路径定义的参数名称列表</p></li></ul><p>从而我们可以根据 matcher 来匹配路径,根据 paramNames 来提取匹配到的参数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//根据提供的路由模式和路径尝试匹配路径,</span><span class="token comment">//如果匹配成功则返回:匹配路由的参数对象 params</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">matchPath</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> path<span class="token punctuation">,</span> end <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> pathname</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 调用compilePath解析路由</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>matcher<span class="token punctuation">,</span> paramNames<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">compilePath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> end<span class="token punctuation">)</span>  <span class="token comment">// 使用 matcher 尝试匹配路径</span>  <span class="token keyword">let</span> match <span class="token operator">=</span> pathname<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span>  <span class="token comment">// 如果不匹配则返回null</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token comment">// 获取已匹配的路径</span>  <span class="token keyword">let</span> matchedPathname <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">// 获取匹配组团</span>  <span class="token keyword">let</span> captureGroups <span class="token operator">=</span> match<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 创建params对象</span>  <span class="token keyword">let</span> params <span class="token operator">=</span> paramNames<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">memo<span class="token punctuation">,</span> paramName<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    memo<span class="token punctuation">[</span>paramName<span class="token punctuation">]</span> <span class="token operator">=</span> captureGroups<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">return</span> memo  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 返回匹配结果</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    params<span class="token punctuation">,</span>    <span class="token literal-property property">pathname</span><span class="token operator">:</span> matchedPathname<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">compilePath</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 保存路径参数名称</span>  <span class="token keyword">let</span> paramNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 保存正则表达式源码</span>  <span class="token keyword">let</span> regexpSource <span class="token operator">=</span>    <span class="token string">"^"</span> <span class="token operator">+</span>    path      <span class="token comment">// 去掉路径末尾的 *、**</span>      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/\?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>      <span class="token comment">// 确保路径以/开始</span>      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\/*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span>      <span class="token comment">// 当匹配 :param 时,将其替换为捕获组</span>      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/:(\w+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> paramName</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        paramNames<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>paramName<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"/([^\\/]+)"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 如果路径为*时,将*加入名称列表,并使正则匹配任意内容</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">===</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    paramNames<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>    regexpSource <span class="token operator">+=</span> <span class="token string">"(.*)$"</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 如果需要完整匹配,添加$</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    regexpSource <span class="token operator">+=</span> <span class="token string">"$"</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 编译正则表达式</span>  <span class="token keyword">let</span> matcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>regexpSource<span class="token punctuation">)</span>  <span class="token comment">// 返回匹配器和参数名称</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>matcher<span class="token punctuation">,</span> paramNames<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5renderMatches-函数的实现"><a href="#7-5renderMatches-函数的实现" class="headerlink" title="7.5renderMatches 函数的实现"></a>7.5renderMatches 函数的实现</h3><ol><li>创建了一个 RouteContext</li><li>renderMatches 函数的作用是:</li></ol><p>将匹配结果数组从右向左渲染，为 每个 match 渲染对应路由时，通过 RouteContext.Provider 提供完整的 matches 及 outlet 给下级组件，通过这种方式，下一级组件就可以访问完整的 matches 数组和 outlet。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 创建RouteContext这个context</span><span class="token keyword">export</span> <span class="token keyword">const</span> RouteContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">outlet</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token literal-property property">matches</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 定义渲染匹配结果的函数</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">renderMatches</span><span class="token punctuation">(</span><span class="token parameter">renderedMatches</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 使用 reduceRight 从右向左遍历数组</span>  <span class="token keyword">return</span> renderedMatches<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">outlet<span class="token punctuation">,</span> match<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取当前元素匹配结果之前的数组</span>    <span class="token keyword">let</span> matches <span class="token operator">=</span> renderedMatches<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// 返回RouteContext.Provider组件</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouteContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> outlet<span class="token punctuation">,</span> matches <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        // 渲染当前match对应的route        </span><span class="token punctuation">&#123;</span>match<span class="token punctuation">.</span>route<span class="token punctuation">.</span>element<span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">RouteContext.Provider</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-6-useOutlet-的实现"><a href="#7-6-useOutlet-的实现" class="headerlink" title="7.6 useOutlet 的实现"></a>7.6 useOutlet 的实现</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useOutlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> outlet <span class="token punctuation">&#125;</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useContext</span><span class="token punctuation">(</span>RouteContext<span class="token punctuation">)</span>  <span class="token keyword">return</span> outlet<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-7-useParams-的实现"><a href="#7-7-useParams-的实现" class="headerlink" title="7.7 useParams 的实现"></a>7.7 useParams 的实现</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> matches <span class="token punctuation">&#125;</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useContext</span><span class="token punctuation">(</span>RouteContext<span class="token punctuation">)</span>  <span class="token keyword">let</span> routeMatch <span class="token operator">=</span> matches<span class="token punctuation">[</span>matches<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token keyword">return</span> routeMatch <span class="token operator">?</span> routeMatch<span class="token punctuation">.</span>params <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-实现-NavLink"><a href="#8-实现-NavLink" class="headerlink" title="8. 实现 NavLink"></a>8. 实现 NavLink</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> activeStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'green'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> activeClassName <span class="token operator">=</span> <span class="token string">'active'</span><span class="token punctuation">;</span><span class="token keyword">const</span> activeNavProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">style</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> isActive <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> isActive <span class="token operator">?</span> activeStyle <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">className</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> isActive <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> isActive <span class="token operator">?</span> activeClassName <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>NavLink end<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span> to<span class="token operator">=</span><span class="token string">"/"</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>activeNavProps<span class="token punctuation">&#125;</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/user/list"</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>activeNavProps<span class="token punctuation">&#125;</span><span class="token operator">></span>用户管理<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/profile"</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>activeNavProps<span class="token punctuation">&#125;</span><span class="token operator">></span>个人中心<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>创建一个自动高亮的链接组件，当被点击且匹配路径时,会自动添加 active 类名</p></blockquote><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">NavLink</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 样式名</span>  <span class="token literal-property property">className</span><span class="token operator">:</span> classNameProp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token comment">// 是否完整匹配</span>  end <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 样式对象</span>  <span class="token literal-property property">style</span><span class="token operator">:</span> styleProp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 跳转路径</span>  to<span class="token punctuation">,</span>  <span class="token comment">// 子元素</span>  children<span class="token punctuation">,</span>  <span class="token operator">...</span>rest<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 从context获取location</span>  <span class="token keyword">let</span> location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 需要跳转的路径</span>  <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">pathname</span><span class="token operator">:</span> to <span class="token punctuation">&#125;</span>  <span class="token comment">// 当前的路径</span>  <span class="token keyword">let</span> locationPathname <span class="token operator">=</span> location<span class="token punctuation">.</span>pathname  <span class="token comment">// 跳转的路径</span>  <span class="token keyword">let</span> toPathname <span class="token operator">=</span> path<span class="token punctuation">.</span>pathname  <span class="token comment">// 判断是否高亮</span>  <span class="token keyword">let</span> isActive <span class="token operator">=</span>    locationPathname <span class="token operator">===</span> toPathname <span class="token operator">||</span>    <span class="token punctuation">(</span><span class="token operator">!</span>end <span class="token operator">&amp;&amp;</span>      locationPathname<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>toPathname<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      locationPathname<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>toPathname<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"/"</span><span class="token punctuation">)</span>  <span class="token comment">// 根据样式名 参数获取最终的 className</span>  <span class="token keyword">let</span> className  <span class="token comment">// 根据样式对象(函数|对象)获取最终的 style</span>  <span class="token keyword">let</span> style  <span class="token comment">// 返回Link组件,绑定className和style</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>rest<span class="token punctuation">&#125;</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>to<span class="token punctuation">&#125;</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>className<span class="token punctuation">&#125;</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>style<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-实现-Navigate"><a href="#9-实现-Navigate" class="headerlink" title="9.实现 Navigate"></a>9.实现 Navigate</h2><p><strong>实现路由跳转和重定向</strong></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Navigate</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Navigate</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> to<span class="token punctuation">,</span> state <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> navigate <span class="token operator">=</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">navigate</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-受保护路由（权限）"><a href="#10-受保护路由（权限）" class="headerlink" title="10. 受保护路由（权限）"></a>10. 受保护路由（权限）</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/profile<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Protected</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>Profile<span class="token punctuation">&#125;</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/profile<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token attr-name">element</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Login</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Protected</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Navigate <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../react-router-dom"</span><span class="token keyword">function</span> <span class="token function">Protected</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">component</span><span class="token operator">:</span> RouteComponent<span class="token punctuation">,</span> path <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props  <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouteComponent</span></span> <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Navigate</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token attr-name">state</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">from</span><span class="token operator">:</span> path <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Protected<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-配置式路由和懒加载"><a href="#13-配置式路由和懒加载" class="headerlink" title="13. 配置式路由和懒加载"></a>13. 配置式路由和懒加载</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom/client"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>  BrowserRouter<span class="token punctuation">,</span>  Routes<span class="token punctuation">,</span>  Route<span class="token punctuation">,</span>  NavLink<span class="token punctuation">,</span>  Navigate<span class="token punctuation">,</span>  useRoutes<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./react-router-dom"</span><span class="token keyword">import</span> routesConfig <span class="token keyword">from</span> <span class="token string">"./routesConfig"</span><span class="token keyword">const</span> LazyPost <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./components/Post"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>routes<span class="token punctuation">,</span> setRoutes<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span>routesConfig<span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">addRoute</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setRoutes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token operator">...</span>routes<span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/post"</span><span class="token punctuation">,</span>        <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LazyPost</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.Suspense</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span><span class="token function">useRoutes</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>addRoute<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">addRoute</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> activeStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">"green"</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> activeClassName <span class="token operator">=</span> <span class="token string">"active"</span><span class="token keyword">const</span> activeNavProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">style</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> isActive <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>isActive <span class="token operator">?</span> activeStyle <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">className</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> isActive <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>isActive <span class="token operator">?</span> activeClassName <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token attr-name">end</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>activeNavProps<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          首页        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/list<span class="token punctuation">"</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>activeNavProps<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          用户管理        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/profile<span class="token punctuation">"</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>activeNavProps<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          个人中心        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/post<span class="token punctuation">"</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>activeNavProps<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          post        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">BrowserRouter</span></span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src\routesConfig.js</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"./components/Home"</span><span class="token keyword">import</span> User <span class="token keyword">from</span> <span class="token string">"./components/User"</span><span class="token keyword">import</span> Profile <span class="token keyword">from</span> <span class="token string">"./components/Profile"</span><span class="token keyword">import</span> UserAdd <span class="token keyword">from</span> <span class="token string">"./components/UserAdd"</span><span class="token keyword">import</span> UserDetail <span class="token keyword">from</span> <span class="token string">"./components/UserDetail"</span><span class="token keyword">import</span> UserList <span class="token keyword">from</span> <span class="token string">"./components/UserList"</span><span class="token keyword">import</span> NotFound <span class="token keyword">from</span> <span class="token string">"./components/NotFound"</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"./components/Login"</span><span class="token keyword">import</span> Protected <span class="token keyword">from</span> <span class="token string">"./components/Protected"</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Home</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/profile"</span><span class="token punctuation">,</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Profile</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>    <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">User</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserAdd</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserList</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"detail/:id"</span><span class="token punctuation">,</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserDetail</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/profile"</span><span class="token punctuation">,</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Protected</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>Profile<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Login</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NotFound</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">default</span> routes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新安排行程-332</title>
      <link href="/2023/06/19/chong-xin-an-pai-xing-cheng-332/"/>
      <url>/2023/06/19/chong-xin-an-pai-xing-cheng-332/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/combination-sum/">https://leetcode.cn/problems/combination-sum/</a></p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;string[][]&#125; tickets * @return &#123;string[]&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">findItinerary</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tickets</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'JFK'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//获得map</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> ticket <span class="token keyword">of</span> tickets<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">[</span>from<span class="token punctuation">,</span> to<span class="token punctuation">]</span> <span class="token operator">=</span> ticket<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        map<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对到达地进行字典排序</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> city <span class="token keyword">in</span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token punctuation">[</span>city<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token function-variable function">backtracking</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//result元素数量与机票数加1相等表示找到有效行程</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>length <span class="token operator">===</span> tickets<span class="token punctuation">.</span>length <span class="token operator">+</span>　<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//没有从result[result.length - 1]出发的机票</span>        <span class="token comment">//或者从result[result.length - 1]出发的机票已被使用过</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">[</span>result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> map<span class="token punctuation">[</span>result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> map<span class="token punctuation">[</span>result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> city <span class="token operator">=</span> map<span class="token punctuation">[</span>result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//删除已被获取的到达地</span>            map<span class="token punctuation">[</span>result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//回溯</span>            result<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span>result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全排列-46</title>
      <link href="/2023/06/19/quan-pai-lie-46/"/>
      <url>/2023/06/19/quan-pai-lie-46/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/permutations/">https://leetcode.cn/problems/permutations/</a></p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums * @return &#123;number[][]&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">permute</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">set1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">continue</span>      <span class="token punctuation">&#125;</span>      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token function">bfs</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">bfs</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">debugger</span><span class="token function">permute</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合总和-39</title>
      <link href="/2023/06/15/zu-he-zong-he-39/"/>
      <url>/2023/06/15/zu-he-zong-he-39/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/combination-sum/">https://leetcode.cn/problems/combination-sum/</a></p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; candidates * @param &#123;number&#125; target * @return &#123;number[][]&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">combinationSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  candidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> sum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>      <span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>      i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> target <span class="token operator">-</span> sum <span class="token operator">>=</span> candidates<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>      i<span class="token operator">++</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p><strong>如果不给 start 开始索引会怎么样？</strong></p><p>会出现重复数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">combinationSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">candidates<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  candidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">sum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>      <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> target <span class="token operator">-</span> sum <span class="token operator">>=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      i<span class="token operator">++</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token function">combinationSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token comment">// 错误答案  [[2,2,3],[3,2,2],[7]]</span><span class="token comment">// 正确答案  [[2,2,3],[7]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电话号码的字母组合-17</title>
      <link href="/2023/06/14/dian-hua-hao-ma-de-zi-mu-zu-he-17/"/>
      <url>/2023/06/14/dian-hua-hao-ma-de-zi-mu-zu-he-17/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">https://leetcode.cn/problems/letter-combinations-of-a-phone-number/</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;string&#125; digits * @return &#123;string[]&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">letterCombinations</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">digits</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token number">2</span><span class="token operator">:</span> <span class="token string">"abc"</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token operator">:</span> <span class="token string">"def"</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token operator">:</span> <span class="token string">"ghi"</span><span class="token punctuation">,</span>    <span class="token number">5</span><span class="token operator">:</span> <span class="token string">"jkl"</span><span class="token punctuation">,</span>    <span class="token number">6</span><span class="token operator">:</span> <span class="token string">"mno"</span><span class="token punctuation">,</span>    <span class="token number">7</span><span class="token operator">:</span> <span class="token string">"pqrs"</span><span class="token punctuation">,</span>    <span class="token number">8</span><span class="token operator">:</span> <span class="token string">"tuv"</span><span class="token punctuation">,</span>    <span class="token number">9</span><span class="token operator">:</span> <span class="token string">"wxyz"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>digits<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">start</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> digits<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> curStr <span class="token operator">=</span> map<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> curStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token function">bfs</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合总和-216</title>
      <link href="/2023/06/13/zu-he-zong-he-iii-216/"/>
      <url>/2023/06/13/zu-he-zong-he-iii-216/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/combination-sum-iii/">https://leetcode.cn/problems/combination-sum-iii/</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number&#125; k * @param &#123;number&#125; n * @return &#123;number[][]&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">combinationSum3</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> sum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> n <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span>length <span class="token operator">===</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> n <span class="token operator">-</span> sum <span class="token operator">>=</span> i <span class="token operator">&amp;&amp;</span> <span class="token number">9</span> <span class="token operator">-</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> path<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> i<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token function">bfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">+</span> i<span class="token punctuation">)</span>      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法思路</title>
      <link href="/2023/06/12/hui-su-suan-fa-si-lu/"/>
      <url>/2023/06/12/hui-su-suan-fa-si-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>递归函数的返回值以及参数</li><li>回溯函数终止条件</li><li>单层搜索的过程</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">combine</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">start</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//终止条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>终止条件<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//单层的比遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 处理节点</span>      <span class="token function">bfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 递归处理</span>      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 回溯，撤销处理的节点</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token parameter">参数</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>终止条件<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        存放结果<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>选择：本层集合中元素（树中节点孩子的数量就是集合的大小）<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        处理节点<span class="token punctuation">;</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>路径，选择列表<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归</span>        回溯，撤销处理结果    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合-77</title>
      <link href="/2023/06/12/zu-he-77/"/>
      <url>/2023/06/12/zu-he-77/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/combinations/discussion/">https://leetcode.cn/problems/combinations/discussion/</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>递归函数的返回值以及参数</li><li>回溯函数终止条件</li><li>单层搜索的过程</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token parameter">参数</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>终止条件<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        存放结果<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>选择：本层集合中元素（树中节点孩子的数量就是集合的大小）<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        处理节点<span class="token punctuation">;</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>路径，选择列表<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归</span>        回溯，撤销处理结果    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number&#125; n * @param &#123;number&#125; k * @return &#123;number[][]&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">combine</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">start</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>length <span class="token operator">===</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> path<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 处理节点</span>      <span class="token function">bfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 递归处理</span>      path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 回溯，撤销处理的节点</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>柱状图中最大的矩形-84</title>
      <link href="/2023/06/06/zhu-zhuang-tu-zhong-zui-da-de-ju-xing-84/"/>
      <url>/2023/06/06/zhu-zhuang-tu-zhong-zui-da-de-ju-xing-84/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/">https://leetcode.cn/problems/largest-rectangle-in-histogram/</a></p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; heights * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">largestRectangleArea</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">heights</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> maxArea <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  heights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span>heights<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 数组头部加入元素0 数组尾部加入元素0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heights<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 当前bar比栈顶bar矮</span>        <span class="token keyword">const</span> stackTopIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 栈顶元素出栈，并保存栈顶bar的索引</span>        <span class="token keyword">let</span> w <span class="token operator">=</span> i <span class="token operator">-</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">let</span> h <span class="token operator">=</span> heights<span class="token punctuation">[</span>stackTopIndex<span class="token punctuation">]</span>        <span class="token comment">// 计算面积，并取最大面积</span>        maxArea <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxArea<span class="token punctuation">,</span> w <span class="token operator">*</span> h<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 当前bar比栈顶bar高了，入栈</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> maxArea<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接雨水-42</title>
      <link href="/2023/06/05/jie-yu-shui-42/"/>
      <url>/2023/06/05/jie-yu-shui-42/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/trapping-rain-water/">https://leetcode.cn/problems/trapping-rain-water/</a></p><h2 id="详细版本"><a href="#详细版本" class="headerlink" title="详细版本"></a>详细版本</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; height * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">trap</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> height<span class="token punctuation">.</span>length  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> mid <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> h <span class="token operator">=</span>            Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>          <span class="token keyword">let</span> w <span class="token operator">=</span> i <span class="token operator">-</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span>          res <span class="token operator">+=</span> h <span class="token operator">*</span> w        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简化版"><a href="#简化版" class="headerlink" title="简化版"></a>简化版</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//单调栈 简洁版本 只处理情况三</span><span class="token keyword">var</span> <span class="token function-variable function">trap</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> height<span class="token punctuation">.</span>length  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token comment">// 可以不加</span>  <span class="token keyword">const</span> st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 存着下标，计算的时候用下标对应的柱子高度</span>  st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 只处理的情况三，其实是把情况一和情况二融合了</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> height<span class="token punctuation">[</span>st<span class="token punctuation">[</span>st<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 注意这里是while</span>      <span class="token keyword">let</span> mid <span class="token operator">=</span> st<span class="token punctuation">[</span>st<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>      st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>st<span class="token punctuation">[</span>st<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>mid<span class="token punctuation">]</span>        <span class="token keyword">let</span> w <span class="token operator">=</span> i <span class="token operator">-</span> st<span class="token punctuation">[</span>st<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// 注意减一，只求中间宽度</span>        sum <span class="token operator">+=</span> h <span class="token operator">*</span> w      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">trap</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> height<span class="token punctuation">.</span>length  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 第一个柱子和最后一个柱子不接雨水</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">==</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>    <span class="token keyword">let</span> rHeight <span class="token operator">=</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">// 记录右边柱子的最高高度</span>    <span class="token keyword">let</span> lHeight <span class="token operator">=</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">// 记录左边柱子的最高高度</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> r <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> rHeight<span class="token punctuation">)</span> rHeight <span class="token operator">=</span> height<span class="token punctuation">[</span>r<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> l <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> l <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> l<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> lHeight<span class="token punctuation">)</span> lHeight <span class="token operator">=</span> height<span class="token punctuation">[</span>l<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>lHeight<span class="token punctuation">,</span> rHeight<span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> h  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">trap</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> height<span class="token punctuation">.</span>length  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token keyword">const</span> maxLeft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> maxRight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 记录每个柱子左边柱子最大高度</span>  maxLeft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    maxLeft<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> maxLeft<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 记录每个柱子右边柱子最大高度</span>  maxRight<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    maxRight<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> maxRight<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 求和</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxLeft<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> maxRight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> count  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下一个更大元素II-503</title>
      <link href="/2023/06/05/xia-yi-ge-geng-da-yuan-su-ii-503/"/>
      <url>/2023/06/05/xia-yi-ge-geng-da-yuan-su-ii-503/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/next-greater-element-ii/">https://leetcode.cn/problems/next-greater-element-ii/</a></p><h2 id="普通拼接-nums"><a href="#普通拼接-nums" class="headerlink" title="普通拼接 nums"></a>普通拼接 nums</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; temperatures * @return &#123;number[]&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">dailyTemperatures</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">temperatures</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> length <span class="token operator">=</span> temperatures<span class="token punctuation">.</span>length  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temperatures<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>        stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>        temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> temperatures<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> resIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        res<span class="token punctuation">[</span>resIndex<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> resIndex      <span class="token punctuation">&#125;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不扩充-nums-模拟遍历"><a href="#不扩充-nums-模拟遍历" class="headerlink" title="不扩充 nums,模拟遍历"></a>不扩充 nums,模拟遍历</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums * @return &#123;number[]&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">nextGreaterElements</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i <span class="token operator">%</span> len<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> curIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      res<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">%</span> len<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i <span class="token operator">%</span> len<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token function">nextGreaterElements</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下一个更大元素I-496</title>
      <link href="/2023/06/01/xia-yi-ge-geng-da-yuan-su-496/"/>
      <url>/2023/06/01/xia-yi-ge-geng-da-yuan-su-496/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/next-greater-element-i/">https://leetcode.cn/problems/next-greater-element-i/</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums1 * @param &#123;number[]&#125; nums2 * @return &#123;number[]&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">nextGreaterElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> nums2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len1 <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length  <span class="token keyword">const</span> len2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>len1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums2<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> curIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>curIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token function">nextGreaterElement</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日温度-739</title>
      <link href="/2023/05/30/mei-ri-wen-du-739/"/>
      <url>/2023/05/30/mei-ri-wen-du-739/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/daily-temperatures/">https://leetcode.cn/problems/daily-temperatures/</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>通常是一维数组，要寻找任一个元素的右边或者左边第一个比自己大或者小的元素的位置，此时我们就要想到可以用单调栈了。</strong>时间复杂度为 O(n)。</p><ol><li>单调栈里存放的元素是什么？</li></ol><p>单调栈里只需要存放元素的下标 i 就可以了，如果需要使用对应的元素，直接 T[i]就可以获取。</p><ol start="2"><li>单调栈里元素是递增呢？ 还是递减呢？</li></ol><p>这里我们要使用递增循序（再强调一下是指从<strong>栈头到栈底的顺序</strong>），因为只有递增的时候，栈里要加入一个元素 i 的时候，才知道栈顶元素在数组中右面第一个比栈顶元素大的元素是 i。</p><p>即：<strong>如果求一个元素右边第一个更大元素，单调栈就是递增的，如果求一个元素右边第一个更小元素，单调栈就是递减的。</strong></p><p>使用单调栈主要有三个判断条件。</p><ul><li><p>当前遍历的元素 T[i]大于栈顶元素 T[st.top()]的情况</p><p>我们要保持一个递增单调栈（从栈头到栈底），所以将 T[st.top()]弹出，T[i]加入，此时 result 数组可以记录了，result[st.top()] = i- st.top()</p></li><li><p>当前遍历的元素 T[i]等于栈顶元素 T[st.top()]的情况</p><p>将 T[i]加入单调栈 <code> st.push(i)</code></p></li><li><p>当前遍历的元素 T[i]大于栈顶元素 T[st.top()]的情况</p><p>将 T[i]加入单调栈 <code> st.push(i)</code></p></li></ul><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 版本一</span><span class="token keyword">var</span> <span class="token function-variable function">dailyTemperatures</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">temperatures</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> length <span class="token operator">=</span> temperatures<span class="token punctuation">.</span>length  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span>      temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temperatures<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>        stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>        temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> temperatures<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>      <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> resIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        res<span class="token punctuation">[</span>resIndex<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> resIndex      <span class="token punctuation">&#125;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token comment">// 版本二</span><span class="token keyword">var</span> <span class="token function-variable function">dailyTemperatures</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">temperatures</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> n <span class="token operator">=</span> temperatures<span class="token punctuation">.</span>length  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 递增栈：用于存储元素右面第一个比他大的元素下标</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>      stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>      temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> temperatures<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      res<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> top    <span class="token punctuation">&#125;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES2023,学习走起</title>
      <link href="/2023/05/29/es2023-xue-xi-zou-qi/"/>
      <url>/2023/05/29/es2023-xue-xi-zou-qi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ES6 是 2015 年提出的，按照这个逻辑 ES2023 应该叫做 ES14，为了避免混淆，我们就用年份来命名。为了赶上 ES 标准迭代的步伐，我们一起来看看 2023 年又加入了哪些新特性。</p></blockquote><h2 id="一、从尾部查找"><a href="#一、从尾部查找" class="headerlink" title="一、从尾部查找"></a>一、从尾部查找</h2><blockquote><p>涉及到两个函数 <code>findLast / findLastIndex</code></p></blockquote><p><strong>findLast / findLastIndex 基本用法</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment">// findLast</span>array<span class="token punctuation">.</span><span class="token function">findLast</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n<span class="token punctuation">.</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &#123; value: 3 &#125;</span><span class="token comment">// findLastIndex</span>array<span class="token punctuation">.</span><span class="token function">findLastIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n<span class="token punctuation">.</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>array<span class="token punctuation">.</span><span class="token function">findLastIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token comment">// -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>find 和 findIndex 的基本用法</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment">//find和findIndex的基本用法</span>array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n<span class="token punctuation">.</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &#123; value: 1 &#125;</span>array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n<span class="token punctuation">.</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>以前的想要从后往前查的方案和痛点</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment">// find</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token operator">...</span>array<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n<span class="token punctuation">.</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &#123; value: 3 &#125;</span><span class="token comment">// findIndex</span>array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">...</span>array<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n<span class="token punctuation">.</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">...</span>array<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token comment">// should be -1, but 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、Hashbang-语法"><a href="#二、Hashbang-语法" class="headerlink" title="二、Hashbang 语法"></a>二、Hashbang 语法</h2><p>Hashbang 也叫 Shebang，是一个由井号和叹号构成的字符序列 #!，用来指定使用哪种解释器执行此文件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token hashbang comment">#!/usr/bin/env node</span><span class="token string">"use strict"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在终端执行，没有 <strong>Hashbang</strong> 时，需要使用 <strong>node</strong> 指令才能执行<code>node xxx</code></p><p>有 <strong>Hashbang</strong> 时，可以直接<code>./xxxxx</code>执行</p><h2 id="三、WeakMap-支持-Symbol-作为-key"><a href="#三、WeakMap-支持-Symbol-作为-key" class="headerlink" title="三、WeakMap 支持 Symbol 作为 key"></a>三、WeakMap 支持 Symbol 作为 key</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> weak <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// Pun not intended: being a symbol makes it become a more symbolic key</span><span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"my ref"</span><span class="token punctuation">)</span><span class="token keyword">const</span> someObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* data data data */</span><span class="token punctuation">&#125;</span>weak<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> someObject<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、通过复制更改-Array"><a href="#四、通过复制更改-Array" class="headerlink" title="四、通过复制更改 Array"></a>四、通过复制更改 Array</h2><ul><li><code>Array.prototype.toReversed() -&gt; Array</code></li><li><code>Array.prototype.toSorted(compareFn) -&gt; Array</code></li><li><code>Array.prototype.toSpliced(start, deleteCount, ...items) -&gt; Array</code></li><li><code>Array.prototype.with(index, value) -&gt; Array</code></li></ul><h4 id="toSorted"><a href="#toSorted" class="headerlink" title="toSorted"></a>toSorted</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a> 实例的 <strong><code>toSorted()</code></strong> 方法是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"><code>sort()</code></a> 方法的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#%E5%A4%8D%E5%88%B6%E6%96%B9%E6%B3%95%E5%92%8C%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95">复制方法</a>版本。它返回一个新数组，其元素按升序排列。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> months <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Mar"</span><span class="token punctuation">,</span> <span class="token string">"Jan"</span><span class="token punctuation">,</span> <span class="token string">"Feb"</span><span class="token punctuation">,</span> <span class="token string">"Dec"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> sortedMonths <span class="token operator">=</span> months<span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sortedMonths<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['Dec', 'Feb', 'Jan', 'Mar']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['Mar', 'Jan', 'Feb', 'Dec']</span><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> sortedValues <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sortedValues<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 10, 21]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 10, 21, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ['a', 'b', 'c', undefined]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ["a", "b", undefined, undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token literal-property property">unrelated</span><span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toSorted</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// [4, 5, undefined]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="toSpliced"><a href="#toSpliced" class="headerlink" title="toSpliced()"></a>toSpliced()</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a> 实例的 <strong><code>toSpliced()</code></strong> 方法是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"><code>splice()</code></a> 方法的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#%E5%A4%8D%E5%88%B6%E6%96%B9%E6%B3%95%E5%92%8C%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95">复制</a>版本。它返回一个新数组，并在给定的索引处删除和/或替换了一些元素。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">toSpliced</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token function">toSpliced</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> deleteCount<span class="token punctuation">)</span><span class="token function">toSpliced</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> deleteCount<span class="token punctuation">,</span> item1<span class="token punctuation">)</span><span class="token function">toSpliced</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> deleteCount<span class="token punctuation">,</span> item1<span class="token punctuation">,</span> item2<span class="token punctuation">,</span> itemN<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> months <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Jan"</span><span class="token punctuation">,</span> <span class="token string">"Mar"</span><span class="token punctuation">,</span> <span class="token string">"Apr"</span><span class="token punctuation">,</span> <span class="token string">"May"</span><span class="token punctuation">]</span><span class="token comment">// 在索引 1 处添加一个元素</span><span class="token keyword">const</span> months2 <span class="token operator">=</span> months<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Feb"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>months2<span class="token punctuation">)</span> <span class="token comment">// ["Jan", "Feb", "Mar", "Apr", "May"]</span><span class="token comment">// 从第 2 个索引开始删除两个元素</span><span class="token keyword">const</span> months3 <span class="token operator">=</span> months2<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>months3<span class="token punctuation">)</span> <span class="token comment">// ["Jan", "Feb", "May"]</span><span class="token comment">// 在索引 1 处用两个新元素替换一个元素</span><span class="token keyword">const</span> months4 <span class="token operator">=</span> months3<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Feb"</span><span class="token punctuation">,</span> <span class="token string">"Mar"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>months4<span class="token punctuation">)</span> <span class="token comment">// ["Jan", "Feb", "Mar", "May"]</span><span class="token comment">// 原数组不会被修改</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>months<span class="token punctuation">)</span> <span class="token comment">// ["Jan", "Mar", "Apr", "May"]</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1, 4, undefined, 6]</span><span class="token keyword">const</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token literal-property property">unrelated</span><span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toSpliced</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// [2, 3, undefined, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="toReversed"><a href="#toReversed" class="headerlink" title="toReversed"></a>toReversed</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a> 实例的 <strong><code>toReversed()</code></strong> 方法是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse"><code>reverse()</code></a> 方法对应的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#%E5%A4%8D%E5%88%B6%E6%96%B9%E6%B3%95%E5%92%8C%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95">复制</a>版本。它返回一个元素顺序相反的新数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3]</span><span class="token keyword">const</span> reversedItems <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reversedItems<span class="token punctuation">)</span> <span class="token comment">// [3, 2, 1]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [3, undefined, 1]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [4, 3, undefined, 1]</span><span class="token keyword">const</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token literal-property property">unrelated</span><span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// [4, undefined, undefined]</span><span class="token comment">// '0' 和 '1' 两个索引不存在，所以它们会变成 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="with"><a href="#with" class="headerlink" title="with()"></a>with()</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a> 实例的 <strong><code>with()</code></strong> 方法是使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Property_accessors#%E6%96%B9%E6%8B%AC%E5%8F%B7%E8%A1%A8%E7%A4%BA%E6%B3%95">方括号表示法</a>修改指定索引值的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array#%E5%A4%8D%E5%88%B6%E6%96%B9%E6%B3%95%E5%92%8C%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95">复制方法</a>版本。它会返回一个新数组，其指定索引处的值会被新值替换。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 6, 4, 5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5]</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [1, 4, 36, 16, 25]</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [2, undefined, 3, 4, undefined, 6]</span><span class="token keyword">const</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token literal-property property">unrelated</span><span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// [ 1, undefined, 4 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li><p>此次发布的新方法不仅适用于常规的数组对象。可以在任意 TypedArray 上使用 toSorted、toReversed 和 with 方法，包括 Int8Array 到 BigUint64Array 等各种类型。但因为 TypedArrays 没有 splice 方法，因此无法使用 toSpliced 方法。</p></li><li><p>Array 的 map、filter 和 concat 等方法也都采取先复制再更改的思路，但这些方法与新的复制方法间仍有不同。如果对内置的 Array 对象进行扩展，并在实例上使用 map、flatMap、filter 或 concat，则会返回相同类型的新实例。但如果您扩展一个 Array 并使用 toSorted、toReversed、toSpliced 或者 with，则返回的仍是普通 Array。</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyArray</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> languages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArray</span><span class="token punctuation">(</span><span class="token string">"JavaScript"</span><span class="token punctuation">,</span> <span class="token string">"TypeScript"</span><span class="token punctuation">,</span> <span class="token string">"CoffeeScript"</span><span class="token punctuation">)</span><span class="token keyword">const</span> upcase <span class="token operator">=</span> languages<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">language</span><span class="token punctuation">)</span> <span class="token operator">=></span> language<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>upcase <span class="token keyword">instanceof</span> <span class="token class-name">MyArray</span><span class="token punctuation">)</span><span class="token comment">// => true</span><span class="token keyword">const</span> reversed <span class="token operator">=</span> languages<span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reversed <span class="token keyword">instanceof</span> <span class="token class-name">MyArray</span><span class="token punctuation">)</span><span class="token comment">// => false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用 MyArray.from 将其转回您的自定义 Array：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyArray</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> languages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArray</span><span class="token punctuation">(</span><span class="token string">"JavaScript"</span><span class="token punctuation">,</span> <span class="token string">"TypeScript"</span><span class="token punctuation">,</span> <span class="token string">"CoffeeScript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> reversed <span class="token operator">=</span> MyArray<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>languages<span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reversed instance <span class="token keyword">of</span> MyArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/tc39/proposals/blob/HEAD/finished-proposals.md">https://github.com/tc39/proposals/blob/HEAD/finished-proposals.md</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yaml的使用</title>
      <link href="/2023/05/26/yaml/"/>
      <url>/2023/05/26/yaml/</url>
      
        <content type="html"><![CDATA[<h2 id="1-YAML"><a href="#1-YAML" class="headerlink" title="1.YAML"></a>1.YAML</h2><ul><li>YAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便</li><li><a href="http://nodeca.github.io/js-yaml/">JS 在线验证器</a></li></ul><h2 id="2-基本规则"><a href="#2-基本规则" class="headerlink" title="2.基本规则"></a>2.基本规则</h2><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用 Tab 键，只允许使用空格。</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li>井号表示注释，从这个字符一直到行尾，都会被解析器忽略。</li></ul><h2 id="3-YAML-支持的数据结构"><a href="#3-YAML-支持的数据结构" class="headerlink" title="3. YAML 支持的数据结构"></a>3. YAML 支持的数据结构</h2><ul><li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li><li>纯量（scalars）：单个的、不可再分的值</li></ul><h3 id="3-1-对象"><a href="#3-1-对象" class="headerlink" title="3.1 对象"></a>3.1 对象</h3><p>对象的一组键值对，使用冒号结构表示。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> ghx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转为 JavaScript 如下。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"ghx"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-2-数组"><a href="#3-2-数组" class="headerlink" title="3.2 数组"></a>3.2 数组</h3><p>一组连词线开头的行，构成一个数组。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> apple<span class="token punctuation">-</span> banana<span class="token punctuation">-</span> orange<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>转为 JavaScript 如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-复合结构"><a href="#3-3-复合结构" class="headerlink" title="3.3 复合结构"></a>3.3 复合结构</h3><p>对象和数组可以结合使用，形成复合结构。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"ghx"</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token key atrule">score</span><span class="token punctuation">:</span>  <span class="token key atrule">chinese</span><span class="token punctuation">:</span> <span class="token number">80</span>  <span class="token key atrule">math</span><span class="token punctuation">:</span> <span class="token number">90</span>  <span class="token key atrule">english</span><span class="token punctuation">:</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ghx'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token literal-property property">score</span><span class="token operator">:</span>    <span class="token punctuation">&#123;</span>        <span class="token literal-property property">chinese</span><span class="token operator">:</span><span class="token number">80</span><span class="token punctuation">,</span>        <span class="token literal-property property">math</span><span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">,</span>        <span class="token literal-property property">english</span><span class="token operator">:</span><span class="token number">100</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-纯量"><a href="#3-4-纯量" class="headerlink" title="3.4 纯量"></a>3.4 纯量</h3><p>纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量。</p><ul><li>字符串</li><li>布尔值</li><li>整数</li><li>浮点数</li><li>Null</li><li>时间</li><li>日期</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"ghx"</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token key atrule">score</span><span class="token punctuation">:</span> <span class="token number">99.99</span><span class="token key atrule">married</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">parent</span><span class="token punctuation">:</span> <span class="token null important">~</span><span class="token key atrule">now</span><span class="token punctuation">:</span> <span class="token datetime number">1982-09-03T22:22:22.10-09:00</span><span class="token key atrule">birthday</span><span class="token punctuation">:</span> <span class="token datetime number">1982-09-03</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/nodeca/js-yaml">js-yaml</a></li><li><a href="http://nodeca.github.io/js-yaml/">在线 DEMO</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">yaml</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快排</title>
      <link href="/2023/05/25/kuai-pai/"/>
      <url>/2023/05/25/kuai-pai/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>  <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span>    j <span class="token operator">=</span> right  <span class="token keyword">let</span> base <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> base <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> j<span class="token operator">--</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> base <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> i<span class="token operator">++</span>    <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">return</span> i<span class="token punctuation">&#125;</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"res=>"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考：为什么先移动右指针</p><ul><li>为了后面交换位置，使 arr[i]小于 arr[left]</li></ul><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 快速排序入口</span><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义递归边界，若数组只有一个元素，则没有排序必要</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// lineIndex表示下一次划分左右子数组的索引位</span>    <span class="token keyword">const</span> lineIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token comment">// 如果左边子数组的长度不小于1，则递归快排这个子数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> lineIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 左子数组以 lineIndex-1 为右边界</span>      <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> lineIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果右边子数组的长度不小于1，则递归快排这个子数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lineIndex <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 右子数组以 lineIndex 为左边界</span>      <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> lineIndex<span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span class="token comment">// 以基准值为轴心，划分左右子数组的过程</span><span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 基准值默认取中间位置的元素</span>  <span class="token keyword">let</span> pivotValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment">// 初始化左右指针</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> left  <span class="token keyword">let</span> j <span class="token operator">=</span> right  <span class="token comment">// 当左右指针不越界时，循环执行以下逻辑</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 左指针所指元素若小于基准值，则右移左指针</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivotValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 右指针所指元素大于基准值，则左移右指针</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> pivotValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      j<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 若i&lt;=j，则意味着基准值左边存在较大元素或右边存在较小元素，交换两个元素确保左右两侧有序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>      i<span class="token operator">++</span>      j<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回左指针索引作为下一次划分左右子数组的依据</span>  <span class="token keyword">return</span> i<span class="token punctuation">&#125;</span><span class="token comment">// 快速排序中使用 swap 的地方比较多，我们提取成一个独立的函数</span><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2023/05/25/gui-bing-pai-xu/"/>
      <url>/2023/05/25/gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ul><li>分解子问题：将需要被排序的数组从中间分割为两半，然后再将分割出来的每个子数组各分割为两半，重复以上操作，直到单个子数组只有一个元素为止。</li><li>求解每个子问题：从粒度最小的子数组开始，两两合并、确保每次合并出来的数</li></ul><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token comment">// 处理边界情况</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr  <span class="token punctuation">&#125;</span>  <span class="token comment">// 计算分割点</span>  <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 递归分割左子数组，然后合并为有序数组</span>  <span class="token keyword">const</span> leftArr <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 递归分割右子数组，然后合并为有序数组</span>  <span class="token keyword">const</span> rightArr <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 合并左右两个有序数组</span>  arr <span class="token operator">=</span> <span class="token function">mergeArr</span><span class="token punctuation">(</span>leftArr<span class="token punctuation">,</span> rightArr<span class="token punctuation">)</span>  <span class="token comment">// 返回合并后的结果</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mergeArr</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化两个指针，分别指向 arr1 和 arr2</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// 初始化结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 缓存arr1的长度</span>  <span class="token keyword">const</span> len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length  <span class="token comment">// 缓存arr2的长度</span>  <span class="token keyword">const</span> len2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length  <span class="token comment">// 合并两个子数组</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      i<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      j<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若其中一个子数组首先被合并完全，则直接拼接另一个子数组的剩余部分</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>我们把每一次切分+归并看做是一轮。对于规模为 n 的数组来说，需要切分 log(n) 次，因此就有 log(n) 轮。</li><li>单次合并的时间复杂度为 O(n)</li><li>log(n) 轮对应 log(n) 次合并操作，因此归并排序的时间复杂度就是 O(nlog(n))。</li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并两个有序数组-88</title>
      <link href="/2023/05/25/he-bing-liang-ge-you-xu-shu-zu-88/"/>
      <url>/2023/05/25/he-bing-liang-ge-you-xu-shu-zu-88/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/merge-sorted-array/description/">https://leetcode.cn/problems/merge-sorted-array/description/</a></p><h2 id="空间复杂度-O（1）"><a href="#空间复杂度-O（1）" class="headerlink" title="空间复杂度 O（1）"></a>空间复杂度 O（1）</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> l <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>    r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>  <span class="token keyword">let</span> tail <span class="token operator">=</span> n <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span>  <span class="token keyword">let</span> cur  <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> r <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cur <span class="token operator">=</span> nums2<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cur <span class="token operator">=</span> nums1<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cur <span class="token operator">=</span> nums1<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      cur <span class="token operator">=</span> nums2<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    nums1<span class="token punctuation">[</span>tail<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="额外空间"><a href="#额外空间" class="headerlink" title="额外空间"></a>额外空间</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> cur  <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    r <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cur <span class="token operator">=</span> nums2<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      cur <span class="token operator">=</span> nums1<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>nums2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="合并两个数组"><a href="#合并两个数组" class="headerlink" title="合并两个数组"></a>合并两个数组</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergeArr</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化两个指针，分别指向 arr1 和 arr2</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// 初始化结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 缓存arr1的长度</span>  <span class="token keyword">const</span> len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length  <span class="token comment">// 缓存arr2的长度</span>  <span class="token keyword">const</span> len2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length  <span class="token comment">// 合并两个子数组</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      i<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      j<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若其中一个子数组首先被合并完全，则直接拼接另一个子数组的剩余部分</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和为s的两个数字</title>
      <link href="/2023/05/24/he-wei-s-de-liang-ge-shu-zi/"/>
      <url>/2023/05/24/he-wei-s-de-liang-ge-shu-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入一个递增排序的数组和一个数字 s，在数组中查找两个数，使得它们的和正好是 s。如果有多对数字的和等于 s，则输出任意一对即可。</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 通过双指针解决</span><span class="token keyword">function</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      right<span class="token operator">--</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      left<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除链表的倒数第N个节点-19</title>
      <link href="/2023/05/24/shan-chu-lian-biao-de-dao-shu-di-n-ge-jie-dian-19/"/>
      <url>/2023/05/24/shan-chu-lian-biao-de-dao-shu-di-n-ge-jie-dian-19/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/discussion/">https://leetcode.cn/problems/remove-nth-node-from-end-of-list/discussion/</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">removeNthFromEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>  <span class="token keyword">let</span> slow <span class="token operator">=</span> dummy  <span class="token keyword">let</span> fast <span class="token operator">=</span> dummy  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next  <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表的中间结点-876</title>
      <link href="/2023/05/24/lian-biao-de-zhong-jian-jie-dian-876/"/>
      <url>/2023/05/24/lian-biao-de-zhong-jian-jie-dian-876/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/middle-of-the-linked-list/discussion/">https://leetcode.cn/problems/middle-of-the-linked-list/discussion/</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">middleNode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> slow <span class="token operator">=</span> head  <span class="token keyword">let</span> fast <span class="token operator">=</span> head  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> slow<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除数组中的重复项-26</title>
      <link href="/2023/05/24/shan-chu-shu-zu-zhong-de-chong-fu-xiang/"/>
      <url>/2023/05/24/shan-chu-shu-zu-zhong-de-chong-fu-xiang/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/discussion/">https://leetcode.cn/problems/remove-duplicates-from-sorted-array/discussion/</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">removeDuplicates</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> slow <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!==</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      slow<span class="token operator">++</span>      nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    fast<span class="token operator">++</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动零</title>
      <link href="/2023/05/24/yi-dong-ling/"/>
      <url>/2023/05/24/yi-dong-ling/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/move-zeroes/">https://leetcode.cn/problems/move-zeroes/</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">moveZeroes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> slow <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      nums<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    fast<span class="token operator">++</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    nums<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> nums<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动元素-283</title>
      <link href="/2023/05/24/yi-dong-yuan-su/"/>
      <url>/2023/05/24/yi-dong-yuan-su/</url>
      
        <content type="html"><![CDATA[<p>力扣（LeetCode） 链接：<a href="https://leetcode.cn/problems/remove-element/">https://leetcode.cn/problems/remove-element/</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> slow <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当快指针等于对应值时，则跳过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>      slow<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 快指针每次都前进一步</span>    fast<span class="token operator">++</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> slow<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS输出</title>
      <link href="/2023/05/10/js-shu-chu/"/>
      <url>/2023/05/10/js-shu-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h3><p>输出是什么</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> rej</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是异步执行的函数"</span><span class="token punctuation">)</span>      <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span class="token keyword">return</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arr1=>"</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="考察点："><a href="#考察点：" class="headerlink" title="考察点："></a>考察点：</h3><p>这段代码考察了JavaScript中异步编程的概念，同时涉及到了异步函数和Promise对象的使用。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在代码中，首先定义了一个常量<code>arr</code>，表示一个整数数组；定义了一个异步函数<code>wait</code>，该函数接受一个参数<code>time</code>，表示等待时间，然后返回一个Promise对象，在等待时间结束后resolve该Promise对象。</p><p>接下来，定义了一个常量<code>arr1</code>，使用<code>Array.map</code>方法对<code>arr</code>进行了遍历，对每一个元素都调用了异步函数<code>wait</code>。在异步函数中，使用<code>await</code>等待<code>wait</code>函数返回的Promise对象，然后打印当前元素并返回其乘以2的结果。</p><p>最后，使用<code>console.dir</code>方法打印<code>arr1</code>。</p><p>由于<code>wait</code>函数是异步执行的，因此打印<code>arr1</code>时，<code>arr1</code>中的每一个元素都是一个Promise对象。这些Promise对象的状态可能是pending，也可能是fulfilled。如果当前运行环境（例如浏览器或Node.js环境）支持异步函数和Promise对象，那么在等待一段时间后，会分别打印每一个元素的值，以及一条消息”我是异步执行的函数”。</p><h3 id="核心："><a href="#核心：" class="headerlink" title="核心："></a><strong>核心：</strong></h3><ul><li>await 后面的同步代码会立即执行</li><li>forEach和map的源码中实际上核心功能是依赖的一个while循环，没有对异步做处理</li></ul><h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>  Promise <span class="token punctuation">&#123;</span> <span class="token operator">&lt;</span>pending<span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  Promise <span class="token punctuation">&#123;</span> <span class="token operator">&lt;</span>pending<span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  Promise <span class="token punctuation">&#123;</span> <span class="token operator">&lt;</span>pending<span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，一秒钟后，依次输出如下内容：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">我是异步执行的函数<span class="token number">1</span>我是异步执行的函数<span class="token number">2</span>我是异步执行的函数<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四秒后</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token punctuation">[</span>  Promise <span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>fulfilled<span class="token operator">></span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>Promise <span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>fulfilled<span class="token operator">></span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>Promise <span class="token punctuation">&#123;</span><span class="token operator">&lt;</span>fulfilled<span class="token operator">></span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像和容器</title>
      <link href="/2023/05/09/docker-jing-xiang-he-rong-qi/"/>
      <url>/2023/05/09/docker-jing-xiang-he-rong-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-image-镜像"><a href="#1-image-镜像" class="headerlink" title="1. image 镜像"></a>1. image 镜像</h2><table><thead><tr><th align="left">命令</th><th align="left">含义</th><th align="left">语法</th><th align="left">案例</th></tr></thead><tbody><tr><td align="left">ls</td><td align="left">查看全部镜像</td><td align="left">docker image ls</td><td align="left"></td></tr><tr><td align="left">search</td><td align="left">查找镜像</td><td align="left">docker search [imageName]</td><td align="left"></td></tr><tr><td align="left">history</td><td align="left">查看镜像历史</td><td align="left">docker history [imageName]</td><td align="left"></td></tr><tr><td align="left">inspect</td><td align="left">显示一个或多个镜像详细信息</td><td align="left">docker inspect [imageName]</td><td align="left"></td></tr><tr><td align="left">pull</td><td align="left">拉取镜像</td><td align="left">docker pull [imageName]</td><td align="left"></td></tr><tr><td align="left">push</td><td align="left">推送一个镜像到镜像仓库</td><td align="left">docker push [imageName]</td><td align="left"></td></tr><tr><td align="left">rmi</td><td align="left">删除镜像</td><td align="left">docker rmi [imageName] docker image rmi 2</td><td align="left"></td></tr><tr><td align="left">prune</td><td align="left">移除未使用的镜像，没有标记或补任何容器引用</td><td align="left">docker image prune</td><td align="left">docker image prune</td></tr><tr><td align="left">tag</td><td align="left">标记本地镜像，将其归入某一仓库</td><td align="left">docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]</td><td align="left">docker tag centos:7 zhangrenyang/centos:v1</td></tr><tr><td align="left">export</td><td align="left">将容器文件系统作为一个 tar 归档文件导出到 STDOUT</td><td align="left">docker export [OPTIONS] CONTAINER</td><td align="left">docker export -o hello-world.tar b2712f1067a3</td></tr><tr><td align="left">import</td><td align="left">导入容器快照文件系统 tar 归档文件并创建镜像</td><td align="left">docker import [OPTIONS] file/URL/- [REPOSITORY[:TAG]]</td><td align="left">docker import hello-world.tar</td></tr><tr><td align="left">save</td><td align="left">将指定镜像保存成<code>tar</code>文件</td><td align="left">docker save [OPTIONS] IMAGE [IMAGE…]</td><td align="left">docker save -o hello-world.tar hello-world:latest</td></tr><tr><td align="left">load</td><td align="left">加载 tar 文件并创建镜像</td><td align="left"></td><td align="left">docker load -i hello-world.tar</td></tr><tr><td align="left">build</td><td align="left">根据 Dockerfile 构建镜像</td><td align="left">docker build [OPTIONS] PATH / URL / -</td><td align="left">docker build -t zf/ubuntu:v1 .</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token comment">#查看镜像</span><span class="token function">docker</span> search ubuntu <span class="token comment">#查找镜像</span><span class="token function">docker</span>  pull docker.io/hello-world <span class="token comment"># 拉取镜像</span><span class="token function">docker</span> image pull  docker.io/hello-world <span class="token comment"># 拉取镜像</span><span class="token function">docker</span> rmi  hello-world <span class="token comment">#  删除镜像</span><span class="token function">docker</span> <span class="token builtin class-name">export</span> <span class="token parameter variable">-o</span> <span class="token punctuation">[</span>新输入镜像的名称<span class="token punctuation">]</span> <span class="token punctuation">[</span>容器ID<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-container-容器"><a href="#2-container-容器" class="headerlink" title="2. container 容器"></a>2. container 容器</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token parameter variable">--help</span><span class="token comment"># 启动容器</span><span class="token comment"># -i --interactive交互式</span><span class="token comment"># -t --tty分配一个伪终端</span><span class="token comment"># -d --detach运行容器到后台</span><span class="token comment"># -a --attach list附加到运行的容器</span><span class="token comment"># -e --env list设置环境变量</span><span class="token comment"># -p --publish list发布容器端口到主机</span><span class="token comment"># -P--publish-all 自己分配端口</span><span class="token comment"># --name Assign a name to the container</span><span class="token function">docker</span> run ubuntu /bin/echo <span class="token string">"Hello world"</span># Docker以ubuntu镜像创建一个新容器，然后在容器里执行 bin/echo <span class="token string">"Hello world"</span>，然后输出结果<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">1010</span>:80 <span class="token parameter variable">-e</span> <span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token string">"ghx"</span> <span class="token parameter variable">--name</span> ghx-nginx nginx<span class="token function">docker</span> container <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 3695dc5b9c2d /bin/bash <span class="token comment">#进入容器 </span><span class="token comment"># 查看容器</span><span class="token comment">## -q, --quiet        Only display container IDs</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token comment"># 查看当前运行的容器</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token comment">#显示所有的容器，包括已停止的</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-l</span> <span class="token comment">#显示最新的那个容器</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span> <span class="token comment">#显示所有的容器ID</span><span class="token function">docker</span> inspect <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span> <span class="token comment">#显示一个或多个容器详细信息</span><span class="token comment"># 运行交互式的容器</span><span class="token comment">## -t, --tty 在新容器内指定一个伪终端或终端。</span><span class="token comment">## -i, --interactive 允许你对容器内的标准输入 (STDIN) 进行交互。</span><span class="token comment">## -p --port 端口映射</span><span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> ubuntu /bin/bash<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 nginx <span class="token builtin class-name">exit</span><span class="token comment"># 后台运行容器</span><span class="token comment">## -d, --detach Run container in background and print container ID</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> centos <span class="token function">ping</span> www.baidu.com<span class="token function">docker</span> logs <span class="token parameter variable">--follow</span> <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span><span class="token comment"># 杀死容器</span><span class="token comment">## kill是不管容器同不同意，直接执行kill，强行终止；</span><span class="token function">docker</span> <span class="token function">kill</span> <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span><span class="token comment"># #删除容器</span><span class="token function">docker</span> <span class="token function">rm</span>  <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span> <span class="token comment">#删除容器</span><span class="token function">docker</span> rmi <span class="token punctuation">[</span>imageId<span class="token punctuation">]</span>  <span class="token comment">#删除镜像</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span> <span class="token comment"># 删除所有容器</span><span class="token comment">#启动容器</span><span class="token function">docker</span> start <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span><span class="token comment"># 停止容器</span><span class="token comment">## stop，首先给容器发送一个TERM信号，让容器做一些退出前必须的保护性、安全性操作，然后让容器自动停止运行，如果在一段时间内，容器还是没有停止，再进行kill，强行终止</span><span class="token function">docker</span> stop <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span><span class="token comment"># 进入一个容器</span><span class="token function">docker</span> attach <span class="token punctuation">[</span>containerID<span class="token punctuation">]</span> <span class="token comment"># 要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">[</span>containerID<span class="token punctuation">]</span> /bin/bash <span class="token comment">#进入一个正在运行中的容器</span><span class="token comment">#拷贝文件</span><span class="token comment">##从正在运行的 Docker 容器里面，将文件拷贝到本机</span><span class="token function">docker</span> container <span class="token function">cp</span> f6a53629488b:/root/root.txt <span class="token builtin class-name">.</span><span class="token comment">#自动删除</span><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> ubuntu /bin/bash<span class="token function">docker</span> container stats<span class="token comment">#显示一个容器运行的进程</span><span class="token function">docker</span> update <span class="token parameter variable">-m</span> 500m  <span class="token punctuation">[</span>containerID<span class="token punctuation">]</span> <span class="token comment">#更新一个或多个容器配置</span><span class="token comment">#端口映射</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 nginx <span class="token function">docker</span> container port containerID<span class="token comment"># 查看 docker 容器的输出</span><span class="token comment">## -f, --follow         Follow log outpu</span><span class="token function">docker</span> logs <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token punctuation">[</span>containerId<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS输出</title>
      <link href="/2023/05/08/js-shu-chu-1/"/>
      <url>/2023/05/08/js-shu-chu-1/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h3><p>输出是什么</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token comment">// 2.</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="考察点："><a href="#考察点：" class="headerlink" title="考察点："></a>考察点：</h3><ul><li>变量提升</li><li>暂时性死区</li><li>块级作用域</li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>第一题提升后的代码为</strong></p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var aa&#x3D; 1;if (true) &#123;    console.log(a);    a &#x3D; 2;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变量提升会提升到最近的函数的作用域内而非最近的块级 if 作用域内</p><p><strong>第二题</strong></p><p>因为存在块级作用域和 let 语法，提前调用了 let 声明变量触发暂时性死区，所以报错</p><h3 id="核心："><a href="#核心：" class="headerlink" title="核心："></a><strong>核心：</strong></h3><ol><li><p>变量提升提升到哪</p><p>函数顶层而非块级作用域顶层</p></li><li><p>暂时性死区的真正理解，</p><p>如果内部块级作用域内使用了 let，即使外部作用域也声明了该变量也不能提前使用该变量</p></li></ol><h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>Uncaught ReferenceError<span class="token operator">:</span> Cannot access <span class="token string">'a'</span> before initialization<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS输出</title>
      <link href="/2023/05/08/js-shu-chu/"/>
      <url>/2023/05/08/js-shu-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h3><p>输出是什么</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token keyword">var</span> b <span class="token operator">=</span> aa<span class="token punctuation">.</span>x <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>n<span class="token punctuation">,</span> b<span class="token punctuation">.</span>n<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span> b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="考察点："><a href="#考察点：" class="headerlink" title="考察点："></a>考察点：</h3><p><strong>在浏览器中，对象属性的赋值操作会先于变量赋值操作执行</strong></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li>首先创建了一个对象 a，其 n 属性值为 1。</li><li>变量 b 被赋值为对象 a 的引用。</li><li>执行 <code>a.x = (a = &#123; n: 2 &#125;)</code> 时，会先将 <code>a</code> 的属性 <code>x</code> 赋值为 <code>undefined</code>，然后再将 <code>a</code> 的值更新为 <code>&#123; n: 2 &#125;</code>。此时变量 a 指向新的对象<code> &#123; n: 2 &#125;</code>，但 b 仍然指向旧的对象 <code>&#123; n: 1 ,x:&#123;n:2&#125;&#125;</code>。</li></ol><h3 id="核心："><a href="#核心：" class="headerlink" title="核心："></a><strong>核心：</strong></h3><p>a.x = (a = { n: 2 })先将 a.x 赋值为 undefined，再从右向左执行代码。</p><h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">2</span> <span class="token number">1</span><span class="token keyword">undefined</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作Dockerfile</title>
      <link href="/2023/05/06/zhi-zuo-dockerfile/"/>
      <url>/2023/05/06/zhi-zuo-dockerfile/</url>
      
        <content type="html"><![CDATA[<h2 id="制作-Dockerfile"><a href="#制作-Dockerfile" class="headerlink" title="制作 Dockerfile"></a>制作 Dockerfile</h2><p><a href="https://docs.docker.com/engine/reference/commandline/build/">https://docs.docker.com/engine/reference/commandline/build/</a></p><ul><li>Docker 的镜像是用一层一层的文件组成的</li><li>Layers 就是镜像的层文件，只读不能修改。基于镜像创建的容器会共享这些文件层</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token comment"># 列出所有镜像</span><span class="token function">docker</span> inspect centos <span class="token operator">|</span>  <span class="token function">docker</span> image inspect centos <span class="token comment"># 查看镜像或者容器详细信息</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> express-demo:1.0.0 <span class="token builtin class-name">.</span> <span class="token comment"># 创建镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-编写-Dockerfile"><a href="#1-编写-Dockerfile" class="headerlink" title="1 编写 Dockerfile"></a>1 编写 Dockerfile</h3><p><a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">FROM</td><td align="left">构建的新镜像是基于哪个镜像</td><td align="left">FROM centos:6</td></tr><tr><td align="left">MAINTAINER(废弃)</td><td align="left">镜像维护者姓名或邮箱地址</td><td align="left">MAINTAINER zhufengjiagou</td></tr><tr><td align="left">RUN</td><td align="left">构建镜像时运行的 shell 命令</td><td align="left">RUN yum install httpd</td></tr><tr><td align="left">CMD</td><td align="left">CMD 设置容器启动后默认执行的命令及其参数，但 CMD 能够被 docker run 后面跟的命令行参数替换</td><td align="left">CMD /usr/sbin/sshd -D</td></tr><tr><td align="left">EXPOSE</td><td align="left">声明容器运行的服务器端口</td><td align="left">EXPOSE 80 443</td></tr><tr><td align="left">ENV</td><td align="left">设置容器内的环境变量</td><td align="left">ENV MYSQL_ROOT_PASSWORD 123456</td></tr><tr><td align="left">ADD</td><td align="left">拷贝文件或目录到镜像中，如果是 URL 或者压缩包会自动下载和解压</td><td align="left">ADD ,ADD <a href="https://xxx.com/html.tar.gz">https://xxx.com/html.tar.gz</a> /var/<a href="http://www.html/">www.html</a>, ADD html.tar.gz /var/www/html</td></tr><tr><td align="left">COPY</td><td align="left">拷贝文件或目录到镜像</td><td align="left">COPY ./start.sh /start.sh</td></tr><tr><td align="left">ENTRYPOINT</td><td align="left">配置容器启动时运行的命令</td><td align="left">ENTRYPOINT /bin/bash -c ‘/start.sh’</td></tr><tr><td align="left">VOLUME</td><td align="left">指定容器挂载点到宿主自动生成的目录或其它容器</td><td align="left">VOLUME [“/var/lib/mysql”]</td></tr><tr><td align="left">USER</td><td align="left">为 RUN CMD 和 ENTRYPOINT 执行命令指定运行用户</td><td align="left">USER zhufengjiagou</td></tr><tr><td align="left">WORKDIR</td><td align="left">为 RUN CMD ENTRYPOINT COPY ADD 设置工作目录</td><td align="left">WORKDIR /data</td></tr><tr><td align="left">HEALTHCHECK</td><td align="left">健康检查</td><td align="left">HEALTHCHECK –interval=5m –timeout=3s –retries=3 CMS curl -f htp://localhost</td></tr><tr><td align="left">ARG</td><td align="left">在构建镜像时指定一些参数</td><td align="left">ARG user</td></tr></tbody></table><ul><li>cmd 给出的是一个容器的默认的可执行体。也就是容器启动以后，默认的执行的命令。重点就是这个”默认”。意味着，如果<code>docker run</code>没有指定任何的执行命令或者<code>dockerfile</code>里面也没有<code>entrypoint</code>，那么，就会使用 cmd 指定的默认的执行命令执行。同时也从侧面说明了<code>entrypoint</code>的含义，它才是真正的容器启动以后要执行命令</li></ul><h3 id="2-dockerignore"><a href="#2-dockerignore" class="headerlink" title="2 .dockerignore"></a>2 .dockerignore</h3><p>表示要排除，不要打包到 image 中的文件路径</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span>gitnode_modules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-Dockerfile"><a href="#3-Dockerfile" class="headerlink" title="3 Dockerfile"></a>3 Dockerfile</h3><h4 id="3-1-安装-node"><a href="#3-1-安装-node" class="headerlink" title="3.1 安装 node"></a>3.1 <a href="https://cloud.tencent.com/developer/beta/article/1886344">安装 node</a></h4><h4 id="2-安装-express-项目生成器"><a href="#2-安装-express-项目生成器" class="headerlink" title="2 安装 express 项目生成器"></a>2 安装 express 项目生成器</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install express<span class="token operator">-</span>generator <span class="token operator">-</span>gexpress app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-Dockerfile-1"><a href="#3-Dockerfile-1" class="headerlink" title="3 Dockerfile"></a>3 Dockerfile</h4><ul><li><code>vi Dockerfile</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">FROM</span> node<span class="token constant">COPY</span> <span class="token punctuation">.</span><span class="token operator">/</span>app <span class="token operator">/</span>app<span class="token constant">WORKDIR</span> <span class="token operator">/</span>app<span class="token constant">RUN</span> npm install<span class="token constant">EXPOSE</span> <span class="token number">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>FROM 表示该镜像继承的镜像 :表示标签</li><li>COPY 是将当前目录下的 app 目录下面的文件都拷贝到 image 里的/app 目录中</li><li>WORKDIR 指定工作路径，类似于执行 <code>cd</code> 命令</li><li>RUN npm install 在/app 目录下安装依赖，安装后的依赖也会打包到 image 目录中</li><li>EXPOSE 暴露 3000 端口，允许外部连接这个端口</li></ul><h3 id="4-创建-image"><a href="#4-创建-image" class="headerlink" title="4 创建 image"></a>4 创建 image</h3><ul><li>-t –tag list 镜像名称</li><li>-f –file string 指定 Dockerfile 文件的位置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> express-demo <span class="token builtin class-name">.</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> express-demo:1.0.0 <span class="token builtin class-name">.</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> express-demo:1.0.0 <span class="token parameter variable">-f</span> ./Dockerfile <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>-t 用来指定 image 镜像的名称，后面还可以加冒号指定标签，如果不指定默认就是 latest</li><li><code>.</code>就表示当前路径</li></ul><h3 id="5-使用新的镜像运行容器"><a href="#5-使用新的镜像运行容器" class="headerlink" title="5 使用新的镜像运行容器"></a>5 使用新的镜像运行容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> container run <span class="token parameter variable">-p</span> <span class="token number">3333</span>:3000 <span class="token parameter variable">-it</span> express-demo /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-p</code> 参数是将容器的3000端口映射为本机的3333端口</li><li><code>-it</code> 参数是将容器的shell容器映射为当前的shell,在本机容器中执行的命令都会发送到容器当中执行</li><li><code>express-demo</code> image的名称</li><li>/bin/bash 容器启动后执行的第一个命令,这里是启动了bash容器以便执行脚本</li><li><code>--rm</code> 在容器终止运行后自动删除容器文件</li></ul><h3 id="6-CMD"><a href="#6-CMD" class="headerlink" title="6 CMD"></a>6 CMD</h3><p>Dockerfile</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> CMD npm start</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新制作镜像</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">docker build <span class="token operator">-</span>t express<span class="token operator">-</span>demo <span class="token punctuation">.</span>docker container run <span class="token operator">-</span>p <span class="token number">3333</span><span class="token operator">:</span><span class="token number">3000</span> express<span class="token operator">-</span>demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>RUN命令在 image 文件的构建阶段执行，执行结果都会打包进入 image 文件；CMD命令则是在容器启动后执行</li><li>一个 Dockerfile 可以包含多个RUN命令，但是只能有一个CMD命令</li><li>指定了CMD命令以后，docker container run命令就不能附加命令了（比如前面的/bin/bash），否则它会覆盖CMD命令</li></ul><h3 id="7-发布image"><a href="#7-发布image" class="headerlink" title="7 发布image"></a>7 发布image</h3><ul><li><a href="https://hub.docker.com/">注册账户</a></li><li>docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 登陆</span><span class="token function">docker</span> login<span class="token comment"># 生成镜像</span><span class="token function">docker</span> image tag <span class="token punctuation">[</span>imageName<span class="token punctuation">]</span> <span class="token punctuation">[</span>username<span class="token punctuation">]</span>/<span class="token punctuation">[</span>repository<span class="token punctuation">]</span>:<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token function">docker</span> image build <span class="token parameter variable">-t</span> <span class="token punctuation">[</span>username<span class="token punctuation">]</span>/<span class="token punctuation">[</span>repository<span class="token punctuation">]</span>:<span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token builtin class-name">.</span><span class="token function">docker</span> image tag  hello-world:latest gaohongxiangi/hello-world:1.0.1<span class="token comment"># 推送</span><span class="token function">docker</span> push gaohongxiangi/hello-world:1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置案例</title>
      <link href="/2023/04/25/nginx-pei-zhi-an-li/"/>
      <url>/2023/04/25/nginx-pei-zhi-an-li/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-配置案例"><a href="#nginx-配置案例" class="headerlink" title="nginx 配置案例"></a>nginx 配置案例</h1><p><strong>案例 1</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#user  nobody; # 运行用户（启动者用户名），默认即是nginx，可以不进行设置</span>worker_processes  <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">#工作进程数,一般和CPU数量相同</span>worker_rlimit_nofile <span class="token number">10240</span><span class="token punctuation">;</span> <span class="token comment">#配置Nginx worker进程最大打开文件数</span>error_log  /home/work/nginx/logs/error_log  notice<span class="token punctuation">;</span> <span class="token comment"># Nginx 的错误日志存放目录</span>pid        /home/work/nginx/var/nginx.pid<span class="token punctuation">;</span> <span class="token comment"># Nginx 服务启动时的 pid 存放位置</span>events <span class="token punctuation">&#123;</span>    use epoll<span class="token punctuation">;</span><span class="token comment"># 工作模型：使用epoll的I/O模型(如果你不设置、不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的)</span>    worker_connections  <span class="token number">10240</span><span class="token punctuation">;</span>  <span class="token comment">#单个进程允许的客户端最大连接数 | 并发数（打开的文件数限制）</span><span class="token punctuation">&#125;</span><span class="token comment"># 配置使用最频繁的部分，代理、缓存、日志定义等绝大多数功能和第三方模块的配置都在这里设置</span>http <span class="token punctuation">&#123;</span>    include       mime.types<span class="token punctuation">;</span> <span class="token comment"># 文件扩展名与类型映射表</span>    default_type  application/octet-stream<span class="token punctuation">;</span>  <span class="token comment"># 默认文件类型  二进制流</span>    ignore_invalid_headers  off<span class="token punctuation">;</span><span class="token comment"># 忽略不合法的http头部</span>    <span class="token comment"># 设置日志模式</span>    log_format  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>            <span class="token string">'$status $body_bytes_sent "$http_referer" "$http_user_agent" '</span>            <span class="token string">'$request_time $http_x_bd_logid $http_x_bd_routerip $server_addr $upstream_addr $host '</span>            <span class="token string">'"$http_x_forwarded_for" $msec'</span><span class="token punctuation">;</span>    access_log  <span class="token string">"/home/work/nginx/logs/access_log"</span>  main<span class="token punctuation">;</span> <span class="token comment"># 指定写入的文件名和日志格式</span>    client_body_temp_path /home/work/nginx/cache/client_body<span class="token punctuation">;</span><span class="token comment"># 设置用于存储包含客户端请求正文的临时文件的目录</span>    proxy_temp_path /home/work/nginx/cache/proxy<span class="token punctuation">;</span> <span class="token comment"># 定义proxy的临时文件存在目录以及目录的层级。</span>    uwsgi_temp_path /home/work/nginx/cache/uwsgi<span class="token punctuation">;</span><span class="token comment"># 用于存储带有从 uwsgi 服务器接收到的数据的临时文件</span>    scgi_temp_path /home/work/nginx/cache/scgi<span class="token punctuation">;</span><span class="token comment">#存储包含从 SCGI 服务器接收到的数据的临时文件</span>    fastcgi_temp_path /home/work/nginx/cache/fastcgi<span class="token punctuation">;</span> <span class="token comment">#fastcgi临时文件存放路径</span><span class="token comment">#用于设置服务器名的哈希桶大小，用于提高服务器名的查找速度。该参数的值越大，哈希桶的数量越多，查找速度也越快，但是需要消耗更多的内存。默认值为 32，可以根据实际情况适当调整。</span>    server_names_hash_bucket_size <span class="token number">128</span><span class="token punctuation">;</span>    client_header_buffer_size 4k<span class="token punctuation">;</span><span class="token comment">#客户端请求头缓冲区的大小</span>    large_client_header_buffers <span class="token number">4</span> 32k<span class="token punctuation">;</span>    client_max_body_size 4m<span class="token punctuation">;</span> <span class="token comment">#限制请求体的大小，若超过所设定的大小，返回413错误。</span>    client_body_buffer_size 513k<span class="token punctuation">;</span> <span class="token comment">#设置客户端请求体缓冲区的大小</span>    client_body_timeout <span class="token number">15</span><span class="token punctuation">;</span><span class="token comment">#用于设置客户端请求体（即请求的数据）超时时间</span>    client_header_timeout <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment"># 用于等待客户端发送HTTP请求头的时间</span>    send_timeout <span class="token number">240</span><span class="token punctuation">;</span> <span class="token comment">#客户端的响应超时时间</span>    resolver xx.xxx.xxx.xxx<span class="token punctuation">;</span> <span class="token comment">#设置公共的DNS或者公司内部的DNS都可以</span>    sendfile        on<span class="token punctuation">;</span><span class="token comment"># 开启高效传输模式</span>    <span class="token comment"># 减少网络报文段的数量</span>    tcp_nopush      on<span class="token punctuation">;</span>    tcp_nodelay     on<span class="token punctuation">;</span>    fastcgi_connect_timeout <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">#连接超时时间，默认60秒</span>    fastcgi_send_timeout <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">#nginx 进程向 fastcgi 进程发送请求过程的超时时间，默认值60秒</span>    fastcgi_read_timeout <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">#  nginx 进程向 fastcgi 进程读取输出过程的超时时间，默认值60秒</span>    <span class="token comment">#读取fastcgi应答第一部分需要多大缓冲区，该值表示使用1个64kb的缓冲区读取应答第一部分(应答头),可以设置为fastcgi_buffers选项缓冲区大小</span>    fastcgi_buffer_size 64k<span class="token punctuation">;</span>    <span class="token comment">#指定本地需要多少和多大的缓冲区来缓冲fastcgi应答请求，假设一个php或java脚本所产生页面大小为256kb,那么会为其分配4个64kb的缓冲来缓存；若页面大于256kb,那么大于的256kb的部分会缓存到fastcgi_temp指定路径中，这并非是个好办法，内存数据处理快于硬盘，一般该值应该为站点中php/java脚本所产生页面大小中间值，如果站点大部分脚本所产生的页面大小为256kb，那么可把值设置为16 16k,4 64k等</span>    fastcgi_buffers <span class="token number">4</span> 64k<span class="token punctuation">;</span>    <span class="token comment"># 指定本地需要用多少和多大的缓冲区来缓冲FastCGI的应答。默认值是fastcgi_buffer的2倍</span>    fastcgi_busy_buffers_size 128k<span class="token punctuation">;</span>    <span class="token comment">#写入缓存文件使用多大的数据块，默认值是fastcgi_buffer的2倍</span>    fastcgi_temp_file_write_size 128k<span class="token punctuation">;</span>    <span class="token comment">#是否传递4xx和5xx错误信息到客户端</span>    fastcgi_intercept_errors on<span class="token punctuation">;</span>    keepalive_timeout  <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment"># 保持连接的时间，也叫超时时间，单位秒</span>    <span class="token comment">#keepalive_timeout  65;</span><span class="token comment">#压缩文件可以节约带宽和提高网络传输效率</span>    <span class="token function">gzip</span> on<span class="token punctuation">;</span> <span class="token comment">#开启gzip压缩</span>    gzip_min_length 10k<span class="token punctuation">;</span>  <span class="token comment">#只压缩超过10K的文件</span>    gzip_buffers <span class="token number">4</span> 16k<span class="token punctuation">;</span> <span class="token comment">#设置Gzip压缩文件使用缓存空间的大小</span>    gzip_http_version <span class="token number">1.1</span><span class="token punctuation">;</span><span class="token comment">#启用gzip压缩所需的HTTP最低版本</span>    gzip_comp_level <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">#压缩级别，压缩比率越高文件被压缩的体积越小 包括级别1到级别9</span>    gzip_types text/plain application/x-javascript text/css application/xml<span class="token punctuation">;</span><span class="token comment">#进行压缩的文件类型</span>    gzip_vary on<span class="token punctuation">;</span><span class="token comment"># 开启后的效果是在响应头部添加了Accept-Encoding: gzip</span>    proxy_connect_timeout 15s<span class="token punctuation">;</span><span class="token comment">#默认超时时间</span>    proxy_read_timeout 24s<span class="token punctuation">;</span> <span class="token comment"># 读取超时</span>    proxy_send_timeout 10s<span class="token punctuation">;</span><span class="token comment"># 发送超时</span>    <span class="token comment">#Nginx使用该大小申请read_buf，用来存储upstream端response的header。 即大小指定了 upstream header 最大长度，如果响应头超过了这个长度，Nginx会报upstream sent too big header错误，然后client收到的是502。</span>    proxy_buffer_size 64k<span class="token punctuation">;</span>    <span class="token comment">#设置存储被代理服务器响应的body所占用的buffer个数和每个buffer大小。。总的大小为number*size</span>    proxy_buffers <span class="token number">4</span> 64k<span class="token punctuation">;</span>    <span class="token comment"># proxy_busy_buffers_size不是独立的空间，他是proxy_buffers和proxy_buffer_size的一部分。</span>    <span class="token comment"># 如果完整数据大小不小于busy_buffer大小，则装满busy_buffer后，马上传给客户端；</span>    proxy_busy_buffers_size 128k<span class="token punctuation">;</span>    <span class="token comment">#设置同时写入临时文件的数据量的总大小。通常设置为8k或者16k。</span>    proxy_temp_file_write_size 128k<span class="token punctuation">;</span>    proxy_set_header Host <span class="token variable">$http_host</span><span class="token punctuation">;</span><span class="token comment">#charset GBK;</span>    uninitialized_variable_warn off<span class="token punctuation">;</span> <span class="token comment">#控制是否记录 有关未初始化变量的警告。</span>    server <span class="token punctuation">&#123;</span>        <span class="token comment"># List port</span>        listen <span class="token number">8080</span><span class="token punctuation">;</span>        server_name baidu.com<span class="token punctuation">;</span>        proxy_next_upstream_tries <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">#重试次数</span>        proxy_redirect off<span class="token punctuation">;</span> <span class="token comment">#重定向</span>        location /service/    <span class="token punctuation">&#123;</span>            <span class="token builtin class-name">set</span> <span class="token variable">$upstream</span> <span class="token string">'baidu.com:8080'</span><span class="token punctuation">;</span>            proxy_pass http://<span class="token variable">$upstream</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        location /sTokenBackendValidate    <span class="token punctuation">&#123;</span>            <span class="token builtin class-name">set</span> <span class="token variable">$upstream</span> <span class="token string">'baidu.com:8080'</span><span class="token punctuation">;</span>            proxy_pass http://<span class="token variable">$upstream</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        location / <span class="token punctuation">&#123;</span>            root /home/work/webroot/<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例二</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#COPY ./nginx.conf /etc/nginx/conf.d/</span><span class="token function">gzip</span> on<span class="token punctuation">;</span>gzip_min_length  1k<span class="token punctuation">;</span>gzip_buffers     <span class="token number">4</span> 16k<span class="token punctuation">;</span>gzip_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>gzip_comp_level <span class="token number">2</span><span class="token punctuation">;</span>gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/xml+rss<span class="token punctuation">;</span>gzip_vary on<span class="token punctuation">;</span>gzip_proxied   expired no-cache no-store private auth<span class="token punctuation">;</span><span class="token comment">#Nginx做为反向代理的时候启用：</span>gzip_disable   <span class="token string">"MSIE [1-6]\."</span><span class="token punctuation">;</span> <span class="token comment">#通过表达式，表明哪些UA头不使用gzip压缩</span>server    <span class="token punctuation">&#123;</span>        listen <span class="token number">8080</span><span class="token punctuation">;</span>        <span class="token comment">#listen [::]:8080;</span>        index index.html<span class="token punctuation">;</span>        root  /opt/run/dist<span class="token punctuation">;</span>        location / <span class="token punctuation">&#123;</span>            try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment"># 静态资源强缓存</span>        location ~.*<span class="token punctuation">\</span>.<span class="token punctuation">(</span>css<span class="token operator">|</span>js<span class="token operator">|</span>jpg<span class="token operator">|</span>png<span class="token operator">|</span>gif<span class="token operator">|</span>woff<span class="token operator">|</span>woff2<span class="token operator">|</span>eot<span class="token operator">|</span>svg<span class="token operator">|</span>ttf<span class="token operator">|</span>otf<span class="token operator">|</span>mp3<span class="token operator">|</span>m4a<span class="token operator">|</span>aac<span class="token punctuation">)</span>$ <span class="token punctuation">&#123;</span>        expires 15d<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>client_body_buffer_size</strong></li></ul><p>client_body_buffer_size 是 Nginx 配置指令之一，用于设置客户端请求体缓冲区的大小。当客户端向 Nginx 发送请求时，请求体（例如 POST 请求中的表单数据）会被存储在缓冲区中，然后再传递给后端服务器进行处理。通过设置 client_body_buffer_size，可以控制缓冲区的大小，从而影响 Nginx 的性能和稳定性。默认情况下，client_body_buffer_size 的值为 8k。</p><ul><li><strong>client_body_timeout</strong></li></ul><p>这是一个配置 nginx 的指令，用于设置客户端请求体（即请求的数据）超时时间。当客户端请求体的传输时间超过设定的超时时间时，nginx 会自动关闭连接。</p><ul><li><strong>client_header_timeout</strong></li></ul><p>Client_header_timeout 通常是一个 HTTP 服务器设置的超时时间，用于等待客户端发送 HTTP 请求头的时间。如果在这个时间内没有收到请求头，HTTP 服务器将会关闭与客户端的连接。这个超时时间可以设置为不同的值来适应不同的情况。</p><ul><li><strong>gzip_proxied</strong></li></ul><p>Nginx 做为反向代理的时候启用：</p><ul><li><p>off – 关闭所有的代理结果数据压缩</p></li><li><p>expired – 如果 header 中包含”Expires”头信息，启用压缩</p></li><li><p>no-cache – 如果 header 中包含”Cache-Control:no-cache”头信息，启用压缩</p></li><li><p>no-store – 如果 header 中包含”Cache-Control:no-store”头信息，启用压缩</p></li><li><p>private – 如果 header 中包含”Cache-Control:private”头信息，启用压缩</p></li><li><p>no_last_modified – 启用压缩，如果 header 中包含”Last_Modified”头信息，启用压缩</p></li><li><p>no_etag – 启用压缩，如果 header 中包含“ETag”头信息，启用压缩</p></li><li><p>auth – 启用压缩，如果 header 中包含“Authorization”头信息，启用压缩</p></li><li><p>any – 无条件压缩所有结果数据</p></li><li><p><a href="https://www.cnblogs.com/Renyi-Fan/p/11047490.html#_label4_3">nginx 中如何设置 gzip 总结</a></p></li><li><p><a href="https://www.cnblogs.com/wshenjin/p/11608744.html">Nginx 的 proxy buffer 参数总结</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx整体入门</title>
      <link href="/2023/04/25/nginx-zheng-ti-ru-men/"/>
      <url>/2023/04/25/nginx-zheng-ti-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-常用命令"><a href="#nginx-常用命令" class="headerlink" title="nginx 常用命令"></a>nginx 常用命令</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-s</span> reload  <span class="token comment"># 向主进程发送信号，重新加载配置文件，热重启</span>nginx <span class="token parameter variable">-s</span> reopen <span class="token comment"># 重启 Nginx</span>nginx <span class="token parameter variable">-s</span> stop    <span class="token comment"># 快速关闭</span>nginx <span class="token parameter variable">-s</span> quit    <span class="token comment"># 等待工作进程处理完成后关闭</span>nginx <span class="token parameter variable">-T</span>         <span class="token comment"># 查看当前 Nginx 最终的配置</span>nginx <span class="token parameter variable">-t</span> <span class="token parameter variable">-c</span> <span class="token operator">&lt;</span>配置路径<span class="token operator">></span>    <span class="token comment"># 检查配置是否有问题，如果已经在配置目录，则不需要-c</span><span class="token comment">####################################################################</span>systemctl start nginx    <span class="token comment"># 启动 Nginx</span>systemctl stop nginx     <span class="token comment"># 停止 Nginx</span>systemctl restart nginx  <span class="token comment"># 重启 Nginx</span>systemctl reload nginx   <span class="token comment"># 重新加载 Nginx，用于修改配置后</span>systemctl <span class="token builtin class-name">enable</span> nginx   <span class="token comment"># 设置开机启动 Nginx</span>systemctl disable nginx  <span class="token comment"># 关闭开机启动 Nginx</span>systemctl status nginx   <span class="token comment"># 查看 Nginx 运行状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="nginx-配置文件"><a href="#nginx-配置文件" class="headerlink" title="nginx 配置文件"></a>nginx 配置文件</h1><ul><li>目录结构</li></ul><pre class="line-numbers language-ABAP" data-language="ABAP"><code class="language-ABAP">main        # 全局配置，对全局生效├── events  # 工作模式，配置影响 Nginx 服务器或与用户的网络连接├── http    # 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置│   ├── upstream # 负载均衡服务器设置，配置后端服务器具体地址，负载均衡配置不可或缺的部分│   ├── server   # 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块│   ├── server│   │   ├── location  # server 块可以包含多个 location 块，location 指令用于匹配 uri│   │   ├── location│   │   └── ...│   └── ...└── ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>典型配置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 运行用户（启动者用户名），默认即是nginx，可以不进行设置</span>user  nginx<span class="token punctuation">;</span><span class="token comment"># Nginx 进程数，一般设置为和 CPU 核心数二倍</span>worker_processes  <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment"># Nginx 的错误日志存放目录</span>error_log  logs/error.log warn<span class="token punctuation">;</span><span class="token comment"># Nginx 服务启动时的 pid 存放位置</span>pid        logs/nginx.pid<span class="token punctuation">;</span>events <span class="token punctuation">&#123;</span><span class="token comment"># 工作模型：使用epoll的I/O模型(如果你不设置、不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的)</span>    use epoll<span class="token punctuation">;</span>    <span class="token comment"># 每个进程允许最大并发数（打开的文件数限制）</span>    worker_connections <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># 配置使用最频繁的部分，代理、缓存、日志定义等绝大多数功能和第三方模块的配置都在这里设置</span>http <span class="token punctuation">&#123;</span>    <span class="token comment"># 设置日志模式</span>    log_format  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span><span class="token comment"># Nginx访问日志存放位置</span>    access_log  /var/log/nginx/access.log  main<span class="token punctuation">;</span><span class="token comment"># 开启高效传输模式</span>    sendfile            on<span class="token punctuation">;</span>    <span class="token comment"># 减少网络报文段的数量</span>    tcp_nopush          on<span class="token punctuation">;</span>    tcp_nodelay         on<span class="token punctuation">;</span>    <span class="token comment"># 保持连接的时间，也叫超时时间，单位秒</span>    keepalive_timeout   <span class="token number">65</span><span class="token punctuation">;</span>    types_hash_max_size <span class="token number">2048</span><span class="token punctuation">;</span><span class="token comment"># 文件扩展名与类型映射表</span>    include             /etc/nginx/mime.types<span class="token punctuation">;</span>    <span class="token comment"># 默认文件类型</span>    default_type        application/octet-stream<span class="token punctuation">;</span><span class="token comment"># 加载子配置项</span>    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span>    <span class="token comment"># 配置后端服务器，进行负载均衡配置，可以多个upstream</span>    upstrean houduan <span class="token punctuation">&#123;</span>    server <span class="token number">127.0</span>.0.1:8080<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    server <span class="token punctuation">&#123;</span>    <span class="token comment"># 配置监听的端口</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token comment"># 配置的域名</span>        server_name  localhost<span class="token punctuation">;</span>        location / <span class="token punctuation">&#123;</span>       <span class="token comment"># 网站根目录</span>            root   /usr/share/nginx/html<span class="token punctuation">;</span>            <span class="token comment"># 默认首页文件</span>            index  index.html index.htm<span class="token punctuation">;</span>            <span class="token comment"># 禁止访问的ip地址，可以为all</span>            deny <span class="token number">172.168</span>.22.11<span class="token punctuation">;</span>            <span class="token comment"># 允许访问的ip地址，可以为all</span>            allow <span class="token number">172.168</span>.33.44<span class="token punctuation">;</span>            <span class="token comment"># 请求的后端代理，实际地址位于upstream</span>            proxy_pass http:houduan<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 默认50x对应的访问页面</span>    error_page <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html<span class="token punctuation">;</span>    <span class="token comment"># 同上</span>    error_page <span class="token number">400</span> <span class="token number">404</span> error.html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="nginx-代理和下·负载均衡"><a href="#nginx-代理和下·负载均衡" class="headerlink" title="nginx 代理和下·负载均衡"></a>nginx 代理和下·负载均衡</h1><p>upstream 进行设置代理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">upstrean houduan <span class="token punctuation">&#123;</span>      <span class="token comment"># 配置后端服务器，进行正反向代理，可以多个upstream</span>    server <span class="token number">127.0</span>.0.1:8080<span class="token punctuation">;</span>    server <span class="token number">127.0</span>.0.1:8081<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>负载均衡方式</p><pre class="line-numbers language-apl" data-language="apl"><code class="language-apl"><span class="token number">1</span><span class="token dyadic-operator operator">.</span>默认：轮询upstrean houduan <span class="token dfn builtin">&#123;</span>    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token dfn builtin">:</span><span class="token number">8080</span><span class="token punctuation">;</span>    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token dfn builtin">:</span><span class="token number">8081</span><span class="token punctuation">;</span><span class="token dfn builtin">&#125;</span><span class="token number">2</span><span class="token dyadic-operator operator">.</span>权重upstrean houduan <span class="token dfn builtin">&#123;</span>    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token dfn builtin">:</span><span class="token number">8080</span> wight<span class="token function">=</span><span class="token number">3</span><span class="token punctuation">;</span>    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token dfn builtin">:</span><span class="token number">8081</span> wight<span class="token function">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token dfn builtin">&#125;</span><span class="token number">3</span><span class="token dyadic-operator operator">.</span>iphashupstrean houduan <span class="token dfn builtin">&#123;</span>ip_hash<span class="token punctuation">;</span>    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token dfn builtin">:</span><span class="token number">8080</span><span class="token punctuation">;</span>    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token dfn builtin">:</span><span class="token number">8081</span><span class="token punctuation">;</span><span class="token dfn builtin">&#125;</span><span class="token number">4</span><span class="token dyadic-operator operator">.</span>最小连接数upstrean houduan <span class="token dfn builtin">&#123;</span>least_conn<span class="token punctuation">;</span>    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token dfn builtin">:</span><span class="token number">8080</span><span class="token punctuation">;</span>    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token dfn builtin">:</span><span class="token number">8081</span><span class="token punctuation">;</span><span class="token dfn builtin">&#125;</span><span class="token number">5</span><span class="token dyadic-operator operator">.</span>fair优先分配连接时间短的upstrean houduan <span class="token dfn builtin">&#123;</span>fair<span class="token punctuation">;</span>    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token dfn builtin">:</span><span class="token number">8080</span><span class="token punctuation">;</span>    server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token dfn builtin">:</span><span class="token number">8081</span><span class="token punctuation">;</span><span class="token dfn builtin">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="nginx-限流"><a href="#nginx-限流" class="headerlink" title="nginx 限流"></a>nginx 限流</h1><p>主流的限流算法：漏桶、令牌桶、计数器、滑动窗口</p><p>nginx 使用的限流算法：</p><ul><li><p>令牌桶</p><p>令牌以固定的频率产生，并缓存到令牌桶中；</p><p>令牌桶满时，多余的令牌被丢弃；</p><p>请求要消耗等比例的令牌才能被处理；</p><p>令牌不够时，请求被缓存；</p></li><li><p>漏桶</p><p>请求被缓存到桶中，桶满时，请求会被丢弃；</p><p>匀速处理请求；</p></li><li><p>令牌桶与漏桶对比</p><p>令牌桶有一个缓存桶和一个队列(存放过多的请求)；漏桶只有缓存桶，请求过多会被丢弃。</p></li></ul><p>常用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 限制访问速率---漏桶--匀速处理</span>limit_req_zone  <span class="token variable">$binary_remote_addr</span>  <span class="token assign-left variable">zone</span><span class="token operator">=</span>one:10m   <span class="token assign-left variable">rate</span><span class="token operator">=</span>1r/s<span class="token punctuation">;</span> server <span class="token punctuation">&#123;</span>     location /search/ <span class="token punctuation">&#123;</span>     limit_req   <span class="token assign-left variable">zone</span><span class="token operator">=</span>one<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">## 设置桶大小</span><span class="token comment"># 限制访问速率---漏桶--匀速处理</span>limit_req_zone  <span class="token variable">$binary_remote_addr</span>  <span class="token assign-left variable">zone</span><span class="token operator">=</span>one:10m   <span class="token assign-left variable">rate</span><span class="token operator">=</span>1r/s<span class="token punctuation">;</span> server <span class="token punctuation">&#123;</span>     location /search/ <span class="token punctuation">&#123;</span>     limit_req   <span class="token assign-left variable">zone</span><span class="token operator">=</span>one  <span class="token assign-left variable">burst</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment"># 5表示0-5可以处理6个请求</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">## 设置桶大小+进缓存直接处理，不等待</span><span class="token comment"># 限制访问速率---漏桶--匀速处理</span>limit_req_zone  <span class="token variable">$binary_remote_addr</span>  <span class="token assign-left variable">zone</span><span class="token operator">=</span>one:10m   <span class="token assign-left variable">rate</span><span class="token operator">=</span>1r/s<span class="token punctuation">;</span> server <span class="token punctuation">&#123;</span>     location /search/ <span class="token punctuation">&#123;</span>     limit_req   <span class="token assign-left variable">zone</span><span class="token operator">=</span>one  <span class="token assign-left variable">burst</span><span class="token operator">=</span><span class="token number">5</span> nodelay<span class="token punctuation">;</span> <span class="token comment"># 5表示0-5可以处理6个请求</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">## 设置桶大小+进缓存直接处理，不等待+给一个失败返回码</span><span class="token comment"># 限制访问速率---漏桶--匀速处理</span>limit_req_zone  <span class="token variable">$binary_remote_addr</span>  <span class="token assign-left variable">zone</span><span class="token operator">=</span>one:10m   <span class="token assign-left variable">rate</span><span class="token operator">=</span>1r/s<span class="token punctuation">;</span> server <span class="token punctuation">&#123;</span>     location /search/ <span class="token punctuation">&#123;</span>     limit_req   <span class="token assign-left variable">zone</span><span class="token operator">=</span>one  <span class="token assign-left variable">burst</span><span class="token operator">=</span><span class="token number">5</span> nodelay<span class="token punctuation">;</span> <span class="token comment"># 5表示0-5可以处理6个请求</span>  limit_req_status <span class="token number">598</span><span class="token punctuation">;</span>   <span class="token comment"># 警告请求的返回值限流了</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ngnix-动静分离"><a href="#ngnix-动静分离" class="headerlink" title="ngnix 动静分离"></a>ngnix 动静分离</h1><pre class="line-numbers language-ABAP" data-language="ABAP"><code class="language-ABAP">&#x3D; ：进行普通字符精确匹配，也就是完全匹配。^~ ：表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其它 location。~ ：区分大小写的匹配。~* ：不区分大小写的匹配。!~ ：区分大小写的匹配取非。!~* ：不区分大小写的匹配取非<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx 调优</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 运行用户（启动者用户名），默认即是nginx，可以不进行设置</span>user  nginx<span class="token punctuation">;</span><span class="token comment"># Nginx 进程数，一般设置为和 CPU 核心数二倍</span>worker_processes  <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment"># Nginx 的错误日志存放目录</span>error_log  logs/error.log warn<span class="token punctuation">;</span><span class="token comment"># Nginx 服务启动时的 pid 存放位置</span>pid        logs/nginx.pid<span class="token punctuation">;</span>events <span class="token punctuation">&#123;</span><span class="token comment"># 工作模型：使用epoll的I/O模型(如果你不设置、不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的)</span>    use epoll<span class="token punctuation">;</span>    <span class="token comment"># 每个进程允许最大并发数（打开的文件数限制）需要设置"ulimit -n 65536"</span>    worker_connections <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># 配置使用最频繁的部分，代理、缓存、日志定义等绝大多数功能和第三方模块的配置都在这里设置</span>http <span class="token punctuation">&#123;</span>    <span class="token comment"># 设置日志模式</span>    log_format  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span><span class="token comment"># Nginx访问日志存放位置</span>    access_log  /var/log/nginx/access.log  main<span class="token punctuation">;</span><span class="token comment"># 开启高效传输模式</span>    sendfile            on<span class="token punctuation">;</span>    <span class="token comment"># 减少网络报文段的数量</span>    tcp_nopush          on<span class="token punctuation">;</span>    tcp_nodelay         on<span class="token punctuation">;</span>    <span class="token comment"># 保持连接的时间，也叫超时时间，单位秒</span>    keepalive_timeout   <span class="token number">65</span><span class="token punctuation">;</span>    types_hash_max_size <span class="token number">2048</span><span class="token punctuation">;</span><span class="token comment"># 文件扩展名与类型映射表</span>    include             /etc/nginx/mime.types<span class="token punctuation">;</span>    <span class="token comment"># 默认文件类型</span>    default_type        application/octet-stream<span class="token punctuation">;</span><span class="token comment"># 加载子配置项</span>    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span>    <span class="token comment"># 配置后端服务器，进行负载均衡配置，可以多个upstream</span>    upstrean houduan <span class="token punctuation">&#123;</span>    server <span class="token number">127.0</span>.0.1:8080<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    server <span class="token punctuation">&#123;</span>    <span class="token comment"># 配置监听的端口</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token comment"># 配置的域名</span>        server_name  localhost<span class="token punctuation">;</span>        location / <span class="token punctuation">&#123;</span>       <span class="token comment"># 网站根目录</span>            root   /usr/share/nginx/html<span class="token punctuation">;</span>            <span class="token comment"># 默认首页文件</span>            index  index.html index.htm<span class="token punctuation">;</span>            <span class="token comment"># 禁止访问的ip地址，可以为all</span>            deny <span class="token number">172.168</span>.22.11<span class="token punctuation">;</span>            <span class="token comment"># 允许访问的ip地址，可以为all</span>            allow <span class="token number">172.168</span>.33.44<span class="token punctuation">;</span>            <span class="token comment"># 请求的后端代理，实际地址位于upstream</span>            proxy_pass http:houduan<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 默认50x对应的访问页面</span>    error_page <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html<span class="token punctuation">;</span>    <span class="token comment"># 同上</span>    error_page <span class="token number">400</span> <span class="token number">404</span> error.html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="nginx-将动态资源与静态资源请求分离"><a href="#nginx-将动态资源与静态资源请求分离" class="headerlink" title="nginx 将动态资源与静态资源请求分离"></a>nginx 将动态资源与静态资源请求分离</h2><p>相关配置参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启用缓存到本地的功能</span>proxy_store on<span class="token punctuation">;</span><span class="token comment"># 用户读写权限</span>proxy_store_access user:rw group:rw all:rw<span class="token comment"># 文件缓存路径，与url一致</span>proxy_temp_path 缓存目录<span class="token punctuation">;</span><span class="token comment"># 本地缓存文件配置后，还需要以下配置才能避免请求去远端取文件</span>if<span class="token punctuation">(</span> <span class="token operator">!</span>e <span class="token variable">$request_filename</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment"># 判断本地缓存是否存在该资源</span>proxy_pass http://ip<span class="token punctuation">;</span><span class="token comment"># 源服务器的地址，默认端口80，如果不是80需要指明</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx 中具体配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location ~*<span class="token punctuation">\</span>.<span class="token punctuation">(</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>png<span class="token operator">|</span>bmp<span class="token operator">|</span>jpeg<span class="token punctuation">)</span>$ <span class="token punctuation">&#123;</span><span class="token comment"># 代理请求静态资源的正则匹配请求</span>       <span class="token comment"># 浏览器缓存过期时间</span>       expires 3d<span class="token punctuation">;</span>       proxy_set_header Accept-Encoding <span class="token string">''</span><span class="token punctuation">;</span>       <span class="token comment"># 服务器的资源文件目录</span>            root   /home/images/nginx<span class="token punctuation">;</span>            <span class="token comment"># 启用缓存到本地的功能</span>proxy_store on<span class="token punctuation">;</span><span class="token comment"># 用户读写权限</span>proxy_store_access user:rw group:rw all:rw<span class="token comment"># 文件缓存路径，与url一致</span>proxy_temp_path /home/images/nginx<span class="token punctuation">;</span>            <span class="token comment"># 本地缓存文件配置后，还需要以下配置才能避免请求去远端取文件</span>            if<span class="token punctuation">(</span> <span class="token operator">!</span>e <span class="token variable">$request_filename</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment"># 判断本地缓存是否存在该资源</span>                proxy_pass http://ip<span class="token punctuation">;</span><span class="token comment"># 源服务器的地址，默认端口80，如果不是80需要指明</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="nginx-热备"><a href="#nginx-热备" class="headerlink" title="nginx 热备"></a>nginx 热备</h1><ol><li><p>安装 keepalived</p><p><code> yum install nginx keepalived pcre-devel -y</code></p></li><li><p><code> vim keepalived.conf</code> 配置 nginx 双活热备（同一网段）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">global_defs <span class="token punctuation">&#123;</span>vrrp_grap_interval <span class="token number">0</span>vrrp_gna_interval <span class="token number">0</span><span class="token punctuation">&#125;</span>vrrp_instance VI_1 <span class="token punctuation">&#123;</span><span class="token comment">#VI_1 vrrp实例组组名(master和slave保持一致)</span>state MASTER    <span class="token comment"># 备用机写BACKUP</span>interface ens33 <span class="token comment">#网卡名称</span>virtual_router_id <span class="token number">50</span> <span class="token comment">#50：vrrp组的编号(master和slave保持一致)</span>priority <span class="token number">100</span> <span class="token comment"># 参数 备用机设置为比主机低就可以</span>advert_int <span class="token number">1</span>authentication <span class="token punctuation">&#123;</span>auth_type PASS<span class="token comment">#授权类型(pass</span>auth_pass <span class="token number">1111</span><span class="token comment">#组密码(组件集群时，密码必须一致)</span><span class="token punctuation">&#125;</span>virtual_ipaddress <span class="token punctuation">&#123;</span>虚拟一个同网段ip,如192.168.56.120<span class="token comment">#VIP，虚拟的IP地址，需要与集群中的网段保持一致</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code> vim nginx.conf</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置服务器的热备</span>upstrean houduan <span class="token punctuation">&#123;</span>    server <span class="token number">127.0</span>.0.1:8080<span class="token punctuation">;</span>    server <span class="token number">127.0</span>.0.1:8080 backup<span class="token punctuation">;</span><span class="token comment"># 8080宕机，该服务会充当主机</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="nginx-安全认证"><a href="#nginx-安全认证" class="headerlink" title="nginx 安全认证"></a>nginx 安全认证</h1><p><a href="https://blog.redis.com.cn/doc/standard/httpauthbasic.html">nginx 安全认证中文介绍</a></p><p><a href="https://www.cnblogs.com/Chilam007/p/16900400.html">htpasswd 相关介绍</a></p><ol><li><p>htpasswd 生成密码文件</p><p><code> yum install httpd-tools -y</code></p></li><li><p>htpasswd 生成 nginx 密码文件(用户名不要使用 user_password)</p><p><code> htpasswd -bc /usr/local/nginx/nginx-1.18.0/conf/nginxpasswd test 123123</code></p><p>若要在已有 nginx 密码文件追加用户</p><p><code> htpasswd -b /usr/local/nginx/nginx-1.18.0/conf/nginxpasswd test1 123123</code></p></li><li><p>nginx 配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location / <span class="token punctuation">&#123;</span><span class="token comment"># 添加以下两行</span>    auth_basic <span class="token string">"Restricted"</span><span class="token punctuation">;</span>    auth_basic_user_file /usr/local/nginx/nginx-1.18.0/conf/nginxpasswd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Monorepo 管理项目（以Vue为例）</title>
      <link href="/2023/04/24/monorepo-guan-li-xiang/"/>
      <url>/2023/04/24/monorepo-guan-li-xiang/</url>
      
        <content type="html"><![CDATA[<p>Monorepo 是管理项目代码的一个方式，指在一个项目仓库(repo)中管理多个模块/包(package)。 Vue3源码采用 monorepo 方式进行管理，将模块拆分到package目录中。</p><ul><li>一个仓库可维护多个模块，不用到处找仓库</li><li>方便版本管理和依赖管理，模块之间的引用，调用都非常方便</li></ul><h2 id="搭建Monorepo环境"><a href="#搭建Monorepo环境" class="headerlink" title="搭建Monorepo环境"></a>搭建Monorepo环境</h2><p>Vue3中使用<code>pnpm</code> <code>workspace</code>来实现<code>monorepo</code> (<a href="https://pnpm.io/">pnpm</a>是快速、节省磁盘空间的包管理器。主要采用符号链接的方式管理模块)</p><h3 id="全局安装pnpm"><a href="#全局安装pnpm" class="headerlink" title="全局安装pnpm"></a>全局安装pnpm</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token function">pnpm</span> <span class="token parameter variable">-g</span> <span class="token comment"># 全局安装pnpm</span><span class="token function">pnpm</span> init <span class="token comment"># 初始化配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建-npmrc文件"><a href="#创建-npmrc文件" class="headerlink" title="创建.npmrc文件"></a>创建.npmrc文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shamefully-hoist <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment"># 将模块所依赖的包提升到node_modules中</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这里您可以尝试一下安装<code>Vue3</code>, <code>pnpm install vue@next</code>此时默认情况下<code>vue3</code>中依赖的模块不会被提升到<code>node_modules</code>下。 添加<strong>羞耻的提升</strong>可以将Vue3，所依赖的模块提升到<code>node_modules</code>中</p></blockquote><h3 id="配置workspace"><a href="#配置workspace" class="headerlink" title="配置workspace"></a>配置workspace</h3><p>新建 <strong>pnpm-workspace.yaml</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">packages</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">'packages/*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>将packages下所有的目录都作为包进行管理。这样我们的Monorepo就搭建好了。确实比<code>lerna + yarn workspace</code>更快捷</p></blockquote><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote><p>打包项目Vue3采用rollup进行打包代码，安装打包所需要的依赖</p></blockquote><table><thead><tr><th>依赖</th><th></th></tr></thead><tbody><tr><td>typescript</td><td>在项目中支持Typescript</td></tr><tr><td>rollup</td><td>打包工具</td></tr><tr><td>rollup-plugin-typescript2</td><td>rollup 和 ts的 桥梁</td></tr><tr><td>@rollup/plugin-json</td><td>支持引入json</td></tr><tr><td>@rollup/plugin-node-resolve</td><td>解析node第三方模块</td></tr><tr><td>@rollup/plugin-commonjs</td><td>将CommonJS转化为ES6Module</td></tr><tr><td>minimist</td><td>命令行参数解析</td></tr><tr><td>execa@4</td><td>开启子进程</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> <span class="token function">install</span> typescript rollup rollup-plugin-typescript2 @rollup/plugin-json @rollup/plugin-node-resolve @rollup/plugin-commonjs minimist execa@4 esbuild@0.15.18   <span class="token parameter variable">-D</span> <span class="token parameter variable">-w</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化TS"><a href="#初始化TS" class="headerlink" title="初始化TS"></a>初始化TS</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> tsc <span class="token parameter variable">--init</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>先添加些常用的<code>ts-config</code>配置，后续需要其他的在继续增加</p></blockquote><ul><li>tsconfig.json</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span> <span class="token comment">// 输出的目录</span>    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 采用sourcemap</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es2016"</span><span class="token punctuation">,</span> <span class="token comment">// 目标语法</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"esnext"</span><span class="token punctuation">,</span> <span class="token comment">// 模块格式</span>    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span> <span class="token comment">// 模块解析方式</span>    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 严格模式</span>    <span class="token property">"resolveJsonModule"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 解析json模块</span>    <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许通过es6语法引入commonjs模块</span>    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span> <span class="token comment">// jsx 不转义</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"esnext"</span><span class="token punctuation">,</span> <span class="token string">"dom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 支持的类库 esnext及dom</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><blockquote><p>我们现在<code>packages</code>目录下新建两个package</p></blockquote><ul><li>reactivity 响应式模块</li><li>shared 共享模块</li></ul><p><strong>所有包的入口均为<code>src/index.ts</code> 这样可以实现统一打包</strong></p><ul><li><p>每个包下执行<code>pnpm init</code></p></li><li><p>reactivity/package.json</p></li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"@vue/reactivity"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"module"</span><span class="token operator">:</span><span class="token string">"dist/reactivity.esm-bundler.js"</span><span class="token punctuation">,</span>  <span class="token property">"unpkg"</span><span class="token operator">:</span> <span class="token string">"dist/reactivity.global.js"</span><span class="token punctuation">,</span>  <span class="token property">"buildOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"VueReactivity"</span><span class="token punctuation">,</span>    <span class="token property">"formats"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"esm-bundler"</span><span class="token punctuation">,</span>      <span class="token string">"cjs"</span><span class="token punctuation">,</span>      <span class="token string">"global"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>shared/package.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"@vue/shared"</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"dist/shared.esm-bundler.js"</span><span class="token punctuation">,</span>    <span class="token property">"buildOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"formats"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"esm-bundler"</span><span class="token punctuation">,</span>            <span class="token string">"cjs"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>formats</strong>为自定义的打包格式，有<code>esm-bundler</code>在构建工具中使用的格式、<code>esm-browser</code>在浏览器中使用的格式、<code>cjs</code>在node中使用的格式、<code>global</code>立即执行函数的格式</p></blockquote><p><strong>配置<code>ts</code>引用关系</strong></p><ul><li><p>tsconfig.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span> <span class="token comment">//以当前项目为根目录</span>    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"@vue/*"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"packages/*/src"</span><span class="token punctuation">]</span>  <span class="token comment">//目录匹配</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>独立安装依赖</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> <span class="token function">install</span> @vue/shared@workspace <span class="token parameter variable">--filter</span> @vue/reactivity<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这行代码是一个 <code>pnpm</code> 命令，用于在指定工作区中安装 <code>@vue/reactivity</code> 的依赖。以下是各参数的解释：</p><ul><li><code>pnpm</code>: 包管理器 <code>pnpm</code> 的命令行工具。</li><li><code>install</code>: 安装依赖。</li><li><code>@vue/shared@workspace</code>: 安装 <code>@vue/shared</code> 的工作区版本。</li><li><code>--filter @vue/reactivity</code>: 过滤出 <code>@vue/reactivity</code> 的依赖并安装。</li></ul><p>换句话说，这个命令将在 <code>@vue/shared</code> 的工作区中，只安装 <code>@vue/reactivity</code> 的依赖。</p><h3 id="开发环境esbuild打包"><a href="#开发环境esbuild打包" class="headerlink" title="开发环境esbuild打包"></a>开发环境<code>esbuild</code>打包</h3><p>创建开发时执行脚本， 参数为要打包的模块</p><p><strong>解析用户参数</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"node scripts/dev.js reactivity -f global"</span><span class="token punctuation">,</span>     <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"node scripts/build.js"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>scripts/dev.js</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> build <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"esbuild"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> resolve <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"minimist"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> target <span class="token operator">=</span> args<span class="token punctuation">.</span>_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">"reactivity"</span><span class="token keyword">const</span> format <span class="token operator">=</span> args<span class="token punctuation">.</span>f <span class="token operator">||</span> <span class="token string">"global"</span><span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../packages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>target<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/package.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> outputFormat <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"global"</span><span class="token punctuation">)</span> <span class="token comment">// 输出的格式</span>  <span class="token operator">?</span> <span class="token string">"iife"</span>  <span class="token operator">:</span> format <span class="token operator">===</span> <span class="token string">"cjs"</span>  <span class="token operator">?</span> <span class="token string">"cjs"</span>  <span class="token operator">:</span> <span class="token string">"esm"</span><span class="token keyword">const</span> outfile <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>  <span class="token comment">// 输出的文件</span>  __dirname<span class="token punctuation">,</span>  <span class="token comment">// `../packages/$&#123;target&#125;/dist/$&#123;target&#125;.$&#123;format&#125;.js`</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../packages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>target<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/dist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>target<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">entryPoints</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../packages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>target<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/src/index.ts</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  outfile<span class="token punctuation">,</span>  <span class="token literal-property property">bundle</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">format</span><span class="token operator">:</span> outputFormat<span class="token punctuation">,</span>  <span class="token literal-property property">globalName</span><span class="token operator">:</span> pkg<span class="token punctuation">.</span>buildOptions<span class="token operator">?.</span>name<span class="token punctuation">,</span>  <span class="token literal-property property">platform</span><span class="token operator">:</span> format <span class="token operator">===</span> <span class="token string">"cjs"</span> <span class="token operator">?</span> <span class="token string">"node"</span> <span class="token operator">:</span> <span class="token string">"browser"</span><span class="token punctuation">,</span>  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 监控文件变化</span>    <span class="token function">onRebuild</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rebuilt~~~~</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"watching~~~"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生产环境rollup打包"><a href="#生产环境rollup打包" class="headerlink" title="生产环境rollup打包"></a>生产环境<code>rollup</code>打包</h3><h4 id="rollup-config-js"><a href="#rollup-config-js" class="headerlink" title="rollup.config.js"></a>rollup.config.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token comment">// 获取packages目录</span><span class="token keyword">const</span> packagesDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"packages"</span><span class="token punctuation">)</span><span class="token comment">// 获取对应的模块</span><span class="token keyword">const</span> packageDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>packagesDir<span class="token punctuation">,</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">TARGET</span><span class="token punctuation">)</span><span class="token comment">// 全部以打包目录来解析文件</span><span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token operator">=></span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>packageDir<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"package.json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> name <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>packageDir<span class="token punctuation">)</span> <span class="token comment">// 获取包的名字</span><span class="token comment">// 配置打包信息</span><span class="token keyword">const</span> outputConfigs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"esm-bundler"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">dist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.esm-bundler.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">"es"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">cjs</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">dist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.cjs.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">"cjs"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">dist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.global.js</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">"iife"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取formats</span><span class="token keyword">const</span> packageFormats <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">FORMATS</span> <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">FORMATS</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token keyword">const</span> packageConfigs <span class="token operator">=</span> packageFormats <span class="token operator">||</span> pkg<span class="token punctuation">.</span>buildOptions<span class="token punctuation">.</span>formats<span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@rollup/plugin-json"</span><span class="token punctuation">)</span><span class="token keyword">const</span> commonjs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@rollup/plugin-commonjs"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> nodeResolve <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@rollup/plugin-node-resolve"</span><span class="token punctuation">)</span><span class="token keyword">const</span> tsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"rollup-plugin-typescript2"</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">createConfig</span><span class="token punctuation">(</span><span class="token parameter">format<span class="token punctuation">,</span> output</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  output<span class="token punctuation">.</span>sourcemap <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SOURCE_MAP</span>  output<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"named"</span>  <span class="token keyword">let</span> external <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>format <span class="token operator">===</span> <span class="token string">"global"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    output<span class="token punctuation">.</span>name <span class="token operator">=</span> pkg<span class="token punctuation">.</span>buildOptions<span class="token punctuation">.</span>name  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// cjs/esm 不需要打包依赖文件</span>    external <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>dependencies <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src/index.ts"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    output<span class="token punctuation">,</span>    external<span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">tsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">nodeResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 开始打包把</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> packageConfigs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">format</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token function">createConfig</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> outputConfigs<span class="token punctuation">[</span>format<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="srcipts-build-js"><a href="#srcipts-build-js" class="headerlink" title="srcipts/build.js"></a>srcipts/build.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token keyword">const</span> execa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"execa"</span><span class="token punctuation">)</span><span class="token keyword">debugger</span><span class="token keyword">const</span> targets <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">"packages"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">packages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>f<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">runParallel</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> iteratorFn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">iteratorFn</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> <span class="token function">execa</span><span class="token punctuation">(</span><span class="token string">"rollup"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"--environment"</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">TARGET:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>target<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token string">"inherit"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">runParallel</span><span class="token punctuation">(</span>targets<span class="token punctuation">,</span> build<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reactivity方法的实现</title>
      <link href="/2023/04/21/reactivity-fang-fa-de-shi-xian/"/>
      <url>/2023/04/21/reactivity-fang-fa-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>reactive</code>方法会将对象变成 proxy 对象</p></blockquote><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><ul><li>reactivity.ts</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isObject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@vue/shared"</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">target</span><span class="token operator">:</span> object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// reactive 只能处理对象类型的数据，不是对象不处理</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> target  <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> muableHandlers<span class="token punctuation">)</span> <span class="token comment">// 没有代理过创建代理</span>  <span class="token keyword">return</span> proxy<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>@vue/shared</li></ul><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">const</span> isObject <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> value <span class="token keyword">is</span> Record<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// return Object.prototype.toString.call(value) === '[object Object]';</span>  <span class="token keyword">return</span> value <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>handler.ts</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">muableHandlers</span><span class="token operator">:</span> ProxyHandler<span class="token operator">&lt;</span>object<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// receiver相当于代理对象</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//取值的时候，让属性和effect产生关系</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置的时候，让属性对应的effect执行</span>    Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增加缓冲"><a href="#增加缓冲" class="headerlink" title="增加缓冲"></a>增加缓冲</h3><p><strong>问题:</strong> 同一个对象被代理多次</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./reactivity.js"</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"ghx"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> state1 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">const</span> state2 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"state=>"</span><span class="token punctuation">,</span> state1 <span class="token operator">===</span> state2<span class="token punctuation">)</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优化</strong>：采用映射表</p><ul><li>reactivity.ts</li></ul><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">import &#123; isObject &#125; from "@vue/shared";import &#123; muableHandlers &#125; from "./handler";<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const reactiveMap = new WeakMap()</span></span>export function reactive(target: object) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // reactive 只能处理对象类型的数据，不是对象不处理</span><span class="token prefix unchanged"> </span><span class="token line"> if (!isObject(target)) return target</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  // 缓存可以采用映射表 &#123;&#123;target&#125; -> proxy&#125;</span><span class="token prefix inserted">+</span><span class="token line">  let existingProxy = reactiveMap.get(target)// 看一下这个对象是否有被代理过</span><span class="token prefix inserted">+</span><span class="token line">  if (existingProxy) return existingProxy// 代理过直接返回</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> //防止对象重复被代理</span><span class="token prefix unchanged"> </span><span class="token line"> if (target[ReactiveFlags.IS_REACTIVE]) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   return target;</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const proxy = new Proxy(target, muableHandlers)// 没有代理过创建代理</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  reactiveMap.set(target, proxy) // 缓存代理结果</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return proxy</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="唯一标识"><a href="#唯一标识" class="headerlink" title="唯一标识"></a>唯一标识</h3><p><strong>问题：</strong>把已经代理过的对象继续代理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./reactivity.js"</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"ghx"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> state1 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">const</span> state2 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>state1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"state=>"</span><span class="token punctuation">,</span> state1 <span class="token operator">===</span> state2<span class="token punctuation">)</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以前的方案</p><ul><li>在 vue3.0 的时候 会创造一个反向映射表 {代理的结果 -》 原内容}】</li></ul><p><strong>优化：</strong> 采用唯一标识</p><p>reactivity.ts</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">import &#123; isObject &#125; from "@vue/shared";import &#123; muableHandlers &#125; from "./handler";<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">export const enum ReactiveFlags &#123; // 对象</span><span class="token prefix inserted">+</span><span class="token line">  IS_REACTIVE = "__v_isReactive",</span><span class="token prefix inserted">+</span><span class="token line">&#125;</span></span>const reactiveMap = new WeakMap()export function reactive(target: object) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // reactive 只能处理对象类型的数据，不是对象不处理</span><span class="token prefix unchanged"> </span><span class="token line"> if (!isObject(target)) return target</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // 缓存可以采用映射表 target -> proxy</span><span class="token prefix unchanged"> </span><span class="token line"> let existingProxy = reactiveMap.get(target)// 看一下这个对象是否有被代理过</span><span class="token prefix unchanged"> </span><span class="token line"> if (existingProxy) return existingProxy// 代理过直接返回</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  //防止对象重复被代理</span><span class="token prefix inserted">+</span><span class="token line">  if (target[ReactiveFlags.IS_REACTIVE]) &#123;</span><span class="token prefix inserted">+</span><span class="token line">    return target;</span><span class="token prefix inserted">+</span><span class="token line">  &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const proxy = new Proxy(target, muableHandlers)// 没有代理过创建代理</span><span class="token prefix unchanged"> </span><span class="token line"> reactiveMap.set(target, proxy) // 缓存代理结果</span><span class="token prefix unchanged"> </span><span class="token line"> return proxy</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>handler.ts</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import &#123; ReactiveFlags &#125; from "./reactivity";</span></span>export const muableHandlers: ProxyHandler&lt;object> = &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // receiver相当于代理对象</span><span class="token prefix unchanged"> </span><span class="token line"> get(target, key, receiver) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   //取值的时候，让属性和effect产生关系</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    if (key === ReactiveFlags.IS_REACTIVE) &#123;</span><span class="token prefix inserted">+</span><span class="token line">      return true;</span><span class="token prefix inserted">+</span><span class="token line">    &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return Reflect.get(target, key, receiver)</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;,</span><span class="token prefix unchanged"> </span><span class="token line"> set(target, key, value, receiver) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   //设置的时候，让属性对应的effect执行</span><span class="token prefix unchanged"> </span><span class="token line">   Reflect.set(target, key, value, receiver)</span><span class="token prefix unchanged"> </span><span class="token line">   return true</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;,</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxy和Reflect的使用</title>
      <link href="/2023/04/21/proxy-he-reflect-de-shi-yong/"/>
      <url>/2023/04/21/proxy-he-reflect-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="不使用-Reflect"><a href="#不使用-Reflect" class="headerlink" title="不使用 Reflect"></a>不使用 Reflect</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John Doe"</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">aliasName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"**"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">aliasName</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> value  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">//代理对象</span><span class="token keyword">const</span> proxyPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"获取"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">//target 为person</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"通知页面"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"改变了"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"proxyPerson.aliasName=>"</span><span class="token punctuation">,</span> proxyPerson<span class="token punctuation">.</span>aliasName<span class="token punctuation">)</span>proxyPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token comment">// 获取aliasName</span><span class="token comment">// proxyPerson.aliasName=> **John Doe</span><span class="token comment">// 通知页面name改变了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题</strong></p><ol><li><p>取 aliasName 的时候中里面同过 this.name, 此时 this 为 person， 当调用 this.name 的时候没有触发代理对象的获取</p></li><li><p>假如页面中使用的 aliasName ，会有 aliasName 对应的页面，没有创建 name 和页面的对应关系</p></li><li><p>当后面修改的 name 属性的时候，不会触发页面的更新</p></li><li><p>希望获取 aliasName 的时候，name 属性也触发 get</p></li></ol><h2 id="使用-Reflect"><a href="#使用-Reflect" class="headerlink" title="使用 Reflect"></a>使用 Reflect</h2><p>使用 Reflect 进行操作，保证 this 指向永远指向代理对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"John Doe"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">aliasName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"**"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">aliasName</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> value  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> proxyPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"获取"</span> <span class="token operator">+</span> key<span class="token punctuation">)</span>    <span class="token comment">//为了解决this问题，增加一层映射</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"通知页面"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"改变了"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>proxyPerson<span class="token punctuation">.</span>aliasNameproxyPerson<span class="token punctuation">.</span>aliasName <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token comment">//获取aliasName</span><span class="token comment">//获取name</span><span class="token comment">//通知页面aliasName改变了</span><span class="token comment">//通知页面name改变了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何顺序执行10个异步任务？</title>
      <link href="/2023/03/23/runtasks/"/>
      <url>/2023/03/23/runtasks/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一：使用-async-await-和-for-循环"><a href="#方法一：使用-async-await-和-for-循环" class="headerlink" title="方法一：使用 async/await 和 for 循环"></a>方法一：使用 async/await 和 for 循环</h2><p>这种方法使用 async/await 和 for 循环，每次只执行一个异步任务，并等待其完成后再执行下一个任务。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">delay</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">doAsyncTask</span><span class="token punctuation">(</span><span class="token parameter">taskNumber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 在这里写异步任务的代码</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">开始执行任务</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>taskNumber<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">任务</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>taskNumber<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">执行完毕</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">runTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">doAsyncTask</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法二：使用-Promise-和-reduce-方法"><a href="#方法二：使用-Promise-和-reduce-方法" class="headerlink" title="方法二：使用 Promise 和 reduce 方法"></a>方法二：使用 Promise 和 reduce 方法</h2><p>这种方法使用 Promise 和 reduce 方法，将每个异步任务包装成 Promise 实例，并使用 reduce 方法依次执行每个 Promise。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">delay</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">task</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">now is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token operator">++</span>i    <span class="token function">resolve</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">[</span>task<span class="token punctuation">,</span> task<span class="token punctuation">,</span> task<span class="token punctuation">,</span> task<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> task</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> prev  <span class="token keyword">return</span> <span class="token function">task</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以这样理解 prev 和 task：</p><ul><li>prev：前一个 异步任务（promise）</li><li>task：当前的异步任务</li></ul><p>当前的异步任务需要上一个异步任务的结果作参数，故很显然要 await prev。</p>]]></content>
      
      
      <categories>
          
          <category> 面试宝典 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> javaScript </tag>
            
            <tag> 编程题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>systemJS 使用及其原理解抛</title>
      <link href="/2023/03/20/systemjs/"/>
      <url>/2023/03/20/systemjs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>是一个通用的模块加载器，它能在浏览器上动态加载模块。微前端的核心就是加载微应用，我们将应用打包成模块，在浏览器中通过 systemJS 来加载模块。</p></blockquote><h2 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h2><h4 id="搭建-react-开发环境"><a href="#搭建-react-开发环境" class="headerlink" title="搭建 react 开发环境"></a>搭建 react 开发环境</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> init <span class="token parameter variable">-y</span><span class="token function">npm</span> <span class="token function">install</span> webpack webpack-cli webpack-dev-server babel-loader@babel/core @babel/preset-env @babel/preset-react html-webpack-plugin <span class="token parameter variable">-D</span><span class="token function">npm</span> <span class="token function">install</span> react react-dom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><blockquote><p>微前端的公共模块 必须采用 cdn 的方式</p><p>生产模式下需要打包成一个模块给别人使用 不用打包 index.html、react 和 react-dom</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"env=>"</span><span class="token punctuation">,</span> env<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1.为了更好的看到打包后的代码，统一设置mode为开发模式</span>    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// 2.指定生产模式下采用systemjs 模块规范</span>      <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> env<span class="token punctuation">.</span>production <span class="token operator">?</span> <span class="token string">"system"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 3.使用babel解析js文件</span>      <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>          <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token comment">// 4.生产环境下不生成html</span>      <span class="token operator">!</span>env<span class="token punctuation">.</span>production <span class="token operator">&amp;&amp;</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"./public/index.html"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// 5.生产环境下不打包react,react-dom。（这里也可以打包到当前项目下均可）</span>    <span class="token literal-property property">externals</span><span class="token operator">:</span> env<span class="token punctuation">.</span>production <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token string">"react"</span><span class="token punctuation">,</span> <span class="token string">"react-dom"</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 打包的时候 1） 考虑公共模块是否要打包进去  2） 打包后的资源大小</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 我们将子应用 打包成类库，在主应用中加载这个库（systemjs）</span><span class="token comment">// system 模块规范 umd amd esModule commonjs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token string-property property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"@babel/preset-react"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>            <span class="token string-property property">"runtime"</span><span class="token operator">:</span><span class="token string">"automatic"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>   <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="src-文件"><a href="#src-文件" class="headerlink" title="src 文件"></a>src 文件</h4><p>App.js</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.js</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom/client"</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App"</span><span class="token comment">// 渲染App组件</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="打包后的结果"><a href="#打包后的结果" class="headerlink" title="打包后的结果"></a>打包后的结果</h4><p>dist/index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">System<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"react-dom"</span><span class="token punctuation">,</span><span class="token string">"react"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="浏览器加载模块-dist-index-html"><a href="#浏览器加载模块-dist-index-html" class="headerlink" title="浏览器加载模块(dist/index.html)"></a>浏览器加载模块(dist/index.html)</h4><blockquote><p>systemjs-importmap 公共资源配置</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>systemJS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    主应用 - 基座 - 用来加载子应用的 webpack importMap    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>systemjs-importmap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">          <span class="token punctuation">&#123;</span>              <span class="token string-property property">"import"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                  react<span class="token string">":"</span><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>cdn<span class="token punctuation">.</span>bootcdn<span class="token punctuation">.</span>net<span class="token operator">/</span>ajax<span class="token operator">/</span>libs<span class="token operator">/</span>react<span class="token operator">/</span><span class="token number">17.0</span><span class="token number">.2</span><span class="token operator">/</span>umd<span class="token operator">/</span>react<span class="token punctuation">.</span>pro      duction<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js"<span class="token punctuation">,</span>                  <span class="token string-property property">"react-dom"</span><span class="token operator">:</span>"https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>cdn<span class="token punctuation">.</span>bootcdn<span class="token punctuation">.</span>net<span class="token operator">/</span>ajax<span class="token operator">/</span>libs<span class="token operator">/</span>react<span class="token operator">-</span>      dom<span class="token operator">/</span><span class="token number">17.0</span><span class="token number">.2</span><span class="token operator">/</span>umd<span class="token operator">/</span>react<span class="token operator">-</span>dom<span class="token punctuation">.</span>production<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js"              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/systemjs/6.10.1/system.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">// 表示可以动态加载模块</span>      <span class="token comment">//加载模块的时候会提示加载react和react-dom 会自动在上边加载systemjs-importmap 中配置的要加载的模块</span>      <span class="token comment">// 可以加载远程连接</span>      <span class="token comment">// 类似AMD的前置依赖  引入index.js的时候需要先加载 react和 react-dom</span>      System<span class="token punctuation">.</span><span class="token function">import</span><span class="token punctuation">(</span><span class="token string">"./index.js"</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-手动实现-system-原理"><a href="#2-手动实现-system-原理" class="headerlink" title="2. 手动实现 system 原理"></a>2. 手动实现 system 原理</h2><ul><li>systemjs 是如何定义的 先看打包后的结果 System.register(依赖列表,后调函数返回值一个 setters，execute）</li><li>react , react-dom 加载后调用 setters 将对应的结果赋予给 webpack</li><li>调用执行逻辑 执行页面渲染</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> newMapUrl <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//存储依赖的模块地址</span><span class="token comment">/** * 解析 importsMap,将需要提前加载的模块存储到newMapUrl对象 */</span><span class="token keyword">function</span> <span class="token function">processScripts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">script</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>script<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"systemjs-importmap"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> imports <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>script<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">.</span>imports      Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>imports<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>newMapUrl<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 加载资源</span><span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span>    script<span class="token punctuation">.</span>src <span class="token operator">=</span> newMapUrl<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">||</span> id <span class="token comment">// 支持cdn的查找</span>    script<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">true</span>    document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>    <span class="token comment">// 此时会执行代码</span>    script<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> _lastRegister <span class="token operator">=</span> lastRegister      lastRegister <span class="token operator">=</span> <span class="token keyword">undefined</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>_lastRegister<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 1）先保存window上的属性</span><span class="token keyword">function</span> <span class="token function">saveGlobalProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">saveGlobalProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">getLastGlobalProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 看下window上新增的属性</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">return</span> window<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token comment">// 我通过script新增的变量</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> lastRegister<span class="token keyword">class</span> <span class="token class-name">SystemJs</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这个id原则上可以是一个第三方路径cdn</span>  <span class="token keyword">import</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">processScripts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1）去当前路径查找 对应的资源 ./index.js</span>        <span class="token keyword">const</span> lastSepIndex <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> baseURL <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lastSepIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> baseURL <span class="token operator">+</span> id<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// http  https</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 根据文件的路径 来加载资源</span>        <span class="token keyword">let</span> execute        <span class="token keyword">return</span> <span class="token function">load</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">register</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> setters<span class="token punctuation">,</span> <span class="token literal-property property">execute</span><span class="token operator">:</span> exe <span class="token punctuation">&#125;</span> <span class="token operator">=</span> register<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            execute <span class="token operator">=</span> exe            <span class="token comment">// execute 是真正执行的渲染逻辑</span>            <span class="token comment">// setters 是用来保存加载后的资源，加载资源调用setters</span>            <span class="token comment">//    console.log(setters,execute)</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>register<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> setters<span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>registeration<span class="token punctuation">,</span> setters<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>              registeration<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dep<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">load</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">const</span> property <span class="token operator">=</span> <span class="token function">getLastGlobalProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment">// 加载完毕后，会在window上增添属性 window.React window.ReactDOM</span>                  setters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token comment">// 拿到的是函数，加载资源 将加载后的模块传递给这个setter</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">register</span><span class="token punctuation">(</span><span class="token parameter">deps<span class="token punctuation">,</span> declare</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将回调的结果保存起来</span>    lastRegister <span class="token operator">=</span> <span class="token punctuation">[</span>deps<span class="token punctuation">,</span> declare<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> System <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemJs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>调用 System.import(“./index.js”)开始加载</p></li><li><p>解析 importmap 资源映射表</p></li><li><p>根据加载的文件获取要加载资源的绝对路径</p></li><li><p>使用 JSONP 加载资源</p></li><li><p>执行加载后的代码，调用<code>System.register(deps,declare）</code>方法</p></li><li><p>将回调的结果保存起来, <code>lastRegister = [deps, declare]</code>，回传给 import 方法</p></li><li><p>执行 register 第二个参数 获取 setters 和 execute 属性</p><ol><li>setters 是用来保存加载后的资源，加载资源调用 setters</li><li>execute 是真正执行的渲染逻辑</li></ol></li><li><p>加载 register 的提前注册的模块，加载完成后会在 window 上增添全局属性</p></li><li><p>获取 window 上最后添加的是属性（快照的方式：先取一次，再取一次）</p></li><li><p>都加载完执行 execute 是真正执行的渲染逻辑</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么需要微前端？</title>
      <link href="/2023/03/20/wei-qian-duan/"/>
      <url>/2023/03/20/wei-qian-duan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>微前端就是将不同的功能按照不同的维度拆分成多个子应用。通过主应用来加载这些子应 用。</p></blockquote><p><strong>微前端的核心在于拆, 拆完后在合，实现分而治之！</strong></p><h3 id="1-微前端解决的问题"><a href="#1-微前端解决的问题" class="headerlink" title="1. 微前端解决的问题"></a>1. 微前端解决的问题</h3><ol><li>不同团队（技术栈不同），同时开发一个应用</li><li>每个团队开发的模块都可以独立开发，独立部署</li><li>实现增量迁移</li></ol><h3 id="2-如何实现微前端"><a href="#2-如何实现微前端" class="headerlink" title="**2.**如何实现微前端"></a>**2.**如何实现微前端</h3><p>我们可以将一个应用划分成若干个子应用，将子应用打包成一个个的模块。当路径切换时加载不同</p><p>的子应用。这样每个子应用都是独立的，技术栈也不用做限制了！</p><p><strong>从而解决了前端协同开发问题</strong></p><h3 id="3-实现微前端技术方案"><a href="#3-实现微前端技术方案" class="headerlink" title="**3.**实现微前端技术方案"></a>**3.**实现微前端技术方案</h3><ul><li><p>采用何种方案进行应用拆分？</p></li><li><p>采用何种方式进行应用通信？</p></li><li><p>应用之间如何进行隔离？</p></li></ul><h4 id="3-1-iframe"><a href="#3-1-iframe" class="headerlink" title="3.1 iframe"></a>3.1 iframe</h4><ul><li><p>微前端的最简单方案，通过 iframe 加载子应用。</p></li><li><p>通信可以通过 postMessage 进行通信。</p></li><li><p>完美的沙箱机制自带应用隔离。</p></li></ul><blockquote><p><em>缺点：用户体验差 （弹框只能在<strong>iframe</strong>中、在内部切换刷新就会丢失状态）</em></p></blockquote><h4 id="3-2-Web-Components"><a href="#3-2-Web-Components" class="headerlink" title="3.2 Web Components"></a>3.2 Web Components</h4><ul><li>将前端应用程序分解为自定义 HTML 元素。</li><li>基于 CustomEvent 实现通信</li><li>Shadow DOM 天生的作用域隔离</li></ul><blockquote><p>_缺点：浏览器支持问题、学习成本、调试困难、修改样式困难等问题_。</p></blockquote><h4 id="3-3-single-spa"><a href="#3-3-single-spa" class="headerlink" title="3.3 single-spa"></a><strong>3.3 single-spa</strong></h4><ul><li>single-spa 通过路由劫持实现应用的加载（采用 SystemJS），提供应用间公共组件加载及</li></ul><p>公共业务逻辑处理。子应用需要暴露固定的钩子 <strong>bootstrap</strong>、<strong>mount</strong>、 <strong>unmount</strong>）接入协</p><p>议。</p><ul><li><p>基于 props 主子应用间通信</p></li><li><p>无沙箱机制，需要实现自己实现 JS 沙箱以及 CSS 沙箱</p></li></ul><blockquote><p>缺点：学习成本、无沙箱机制、需要对原有的应用进行改造、子应用间相同资源重复加载问题。</p></blockquote><h4 id="3-4-qiankun"><a href="#3-4-qiankun" class="headerlink" title="3.4 qiankun"></a>3.4 qiankun</h4><ul><li>2019 年 qiankun 基于 single-spa，提供了开箱即用的 api（single-spa + sanbox + import-html-entry）</li><li>做到了 技术栈无关、并且接入简单</li><li>实现了样式隔离和 js 隔离</li></ul><h4 id="3-5-Module-federation"><a href="#3-5-Module-federation" class="headerlink" title="3.5 Module federation"></a>3.5 Module federation</h4><ul><li><p>通过模块联邦将组件进行打包导出使用</p></li><li><p>共享模块的方式进行通信</p></li></ul><blockquote><p>无 CSS 沙箱和 JS 沙箱<em>缺点：需要<strong>webpack5</strong>。</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 编译流程</title>
      <link href="/2023/03/20/webpackflow/"/>
      <url>/2023/03/20/webpackflow/</url>
      
        <content type="html"><![CDATA[<h2 id="webpack-编译流程"><a href="#webpack-编译流程" class="headerlink" title="webpack 编译流程"></a>webpack 编译流程</h2><ol><li>初始化参数：从配置文件和 Shell 语句中读取并合并参数,得出最终的配置对象</li><li>用上一步得到的参数初始化 Compiler 对象</li><li>加载所有配置的插件</li><li>执行对象的 run 方法开始执行编译</li><li>根据配置中的<code>entry</code>找出入口文件</li><li>从入口文件出发,调用所有配置的<code>Loader</code>对模块进行编译</li><li>再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li><li>根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk</li><li>再把每个 Chunk 转换成一个单独的文件加入到输出列表</li><li>在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ol><blockquote><p>在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果</p></blockquote><p><img src="https://raw.githubusercontent.com/ghx9908/image-hosting/master/img/20230302105130.png"></p><h3 id="1-1entry"><a href="#1-1entry" class="headerlink" title="1.1entry"></a>1.1entry</h3><p>src\entry1.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./title"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"entry12"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>src\entry2.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./title.js"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"entry2"</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>src\title.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2loader-js"><a href="#1-2loader-js" class="headerlink" title="1.2loader.js"></a>1.2loader.js</h3><ul><li><p>loader 的本质就是一个函数，一个用于转换或者说翻译的函数</p></li><li><p>把那些 webpack 不认识的模块 less sass baxx 转换为 webpack 能认识的模块 js json</p></li></ul><p>loaders\logger1-loader.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">loader1</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//let name= 'entry1';</span>  <span class="token keyword">return</span> source <span class="token operator">+</span> <span class="token string">"//logger1"</span> <span class="token comment">//let name= 'entry1';//logger1</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> loader1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>loaders\logger2-loader.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">loader2</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//let name= 'entry1';</span>  <span class="token keyword">return</span> source <span class="token operator">+</span> <span class="token string">"//logger2"</span> <span class="token comment">//let name= 'entry1';//logger2</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> loader2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-plugin-js"><a href="#1-3-plugin-js" class="headerlink" title="1.3 plugin.js"></a>1.3 plugin.js</h3><p>plugins\done-plugin.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">DonePlugin</span> <span class="token punctuation">&#123;</span>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>done<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">"DonePlugin"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"done:结束编译"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> DonePlugin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>plugins\run1-plugin.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">RunPlugin</span> <span class="token punctuation">&#123;</span>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在此插件里可以监听run这个钩子</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">"Run1Plugin"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"run1:开始编译"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> RunPlugin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>plugins\run2-plugin.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">RunPlugin</span> <span class="token punctuation">&#123;</span>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token string">"Run2Plugin"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"run2:开始编译"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> RunPlugin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-webpack-config-js"><a href="#1-4-webpack-config-js" class="headerlink" title="1.4 webpack.config.js"></a>1.4 webpack.config.js</h3><p>webpack.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token keyword">const</span> Run1Plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./plugins/run1-plugin"</span><span class="token punctuation">)</span><span class="token keyword">const</span> Run2Plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./plugins/run2-plugin"</span><span class="token punctuation">)</span><span class="token keyword">const</span> DonePlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./plugins/done-plugin"</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token literal-property property">context</span><span class="token operator">:</span> process<span class="token punctuation">.</span>cwd<span class="token punctuation">,</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">entry1</span><span class="token operator">:</span> <span class="token string">"./src/entry1.js"</span><span class="token punctuation">,</span>    <span class="token literal-property property">entry2</span><span class="token operator">:</span> <span class="token string">"./src/entry2.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".jsx"</span><span class="token punctuation">,</span> <span class="token string">".tx"</span><span class="token punctuation">,</span> <span class="token string">".tsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"loaders/loader2.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"loaders/loader1.js"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">DonePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Run2Plugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Run1Plugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5debugger-js"><a href="#1-5debugger-js" class="headerlink" title="1.5debugger.js"></a>1.5debugger.js</h3><p>debugger.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./webpack2"</span><span class="token punctuation">)</span><span class="token comment">// const webpack = require("webpack")</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./webpack.config"</span><span class="token punctuation">)</span><span class="token keyword">debugger</span><span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token function">webpack</span><span class="token punctuation">(</span>webpackConfig<span class="token punctuation">)</span><span class="token comment">//4.执行`Compiler`对象的 run 方法开始执行编译</span>compiler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//stats代表统计结果对象</span>    <span class="token keyword">const</span> statsJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>      stats<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token comment">// files: true, //代表打包后生成的文件</span>        <span class="token literal-property property">assets</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//其实是一个代码块到文件的对应关系</span>        <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//从入口模块出发，找到此入口模块依赖的模块，或者依赖的模块依赖的模块，合在一起组成一个代码块</span>        <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//打包的模块 每个文件都是一个模块</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">"./statsJson.json"</span><span class="token punctuation">,</span> statsJson<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-webpack-js"><a href="#1-6-webpack-js" class="headerlink" title="1.6 webpack.js"></a>1.6 webpack.js</h3><p>webpack2.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Compiler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./Compiler"</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">webpack</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 1.初始化参数：从配置文件和 Shell 语句中读取并合并参数,得出最终的配置对象</span>  <span class="token comment">//argv[0]是Node程序的绝对路径 argv[1] 正在运行的脚本</span>  <span class="token comment">// node debugger --mode=production</span>  <span class="token keyword">const</span> argv <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> shellOptions <span class="token operator">=</span> argv<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">shellOptions<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// options = '--mode=development'</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> options<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span>    shellOptions<span class="token punctuation">[</span>key<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">return</span> shellOptions  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"shellOptions=>"</span><span class="token punctuation">,</span> shellOptions<span class="token punctuation">)</span>  <span class="token keyword">const</span> finalOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>options<span class="token punctuation">,</span> <span class="token operator">...</span>shellOptions <span class="token punctuation">&#125;</span>  <span class="token comment">//2.用上一步得到的参数初始化 `Compiler` 对象</span>  <span class="token keyword">const</span> compiler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Compiler</span><span class="token punctuation">(</span>finalOptions<span class="token punctuation">)</span>  <span class="token comment">//3.加载所有配置的插件</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> plugins <span class="token punctuation">&#125;</span> <span class="token operator">=</span> finalOptions  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> plugin <span class="token keyword">of</span> plugins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//订阅钩子</span>    <span class="token function">plugin</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>compiler<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> compiler<span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-Compilation"><a href="#1-7-Compilation" class="headerlink" title="1.7 Compilation"></a>1.7 Compilation</h3><p>Compiler.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> SyncHook <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"tapable"</span><span class="token punctuation">)</span><span class="token keyword">const</span> Compilation <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./Compilation"</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token comment">// Compiler 模块是 webpack 的主要引擎</span><span class="token keyword">class</span> <span class="token class-name">Compiler</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">run</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//在开始编译之前调用</span>      <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SyncHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//在编译完成时执行</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//在编译开始前触发run钩子执行</span>    <span class="token comment">//在编译的过程中会收集所有的依赖的模块或者说文件</span>    <span class="token comment">//stats指的是统计信息 modules chunks  files=bundle assets指的是文件名和文件内容的映射关系</span>    <span class="token keyword">const</span> <span class="token function-variable function">onCompiled</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats<span class="token punctuation">,</span> fileDependencies</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 10.在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> filename <span class="token keyword">in</span> stats<span class="token punctuation">.</span>assets<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>output<span class="token punctuation">.</span>path<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> stats<span class="token punctuation">.</span>assets<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">toJson</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> stats <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fileDependency <span class="token keyword">of</span> fileDependencies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//监听依赖的文件变化，如果依赖的文件变化后会开始一次新的编译</span>        fs<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>fileDependency<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>onCompiled<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//在编译完成时触发done钩子执行</span>    <span class="token comment">//调用compile方法进行编译  开始一次新的编译</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>onCompiled<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//开启一次新的编译</span>  <span class="token function">compile</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//每次编译 都会创建一个新的Compilation实例</span>    <span class="token keyword">let</span> compilation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Compilation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    compilation<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Compiler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-8-Compilation"><a href="#1-8-Compilation" class="headerlink" title="1.8 Compilation"></a>1.8 Compilation</h3><p>Compilation.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@babel/parser"</span><span class="token punctuation">)</span><span class="token keyword">const</span> types <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@babel/types"</span><span class="token punctuation">)</span><span class="token keyword">const</span> traverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@babel/traverse"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@babel/generator"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token keyword">const</span> baseDir <span class="token operator">=</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Compilation</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options<span class="token punctuation">,</span> compiler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> options <span class="token comment">// 配置参数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>context <span class="token operator">||</span> <span class="token function">normalizePath</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>compiler <span class="token operator">=</span> compiler    <span class="token keyword">this</span><span class="token punctuation">.</span>modules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//这里放置本次编译涉及的所有的模块</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//本次编译所组装出的代码块</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>assets <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 存放输出的文件 key是文件名,值是文件内容</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>files <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//代表本次打包出来的文件</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fileDependencies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//本次编译依赖的文件或者说模块</span>  <span class="token punctuation">&#125;</span>  <span class="token function">build</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//5.根据配置中的entry找出入口文件</span>    <span class="token keyword">let</span> entry <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//格式化入口文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>entry <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      entry<span class="token punctuation">.</span>main <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>entry    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      entry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>entry    <span class="token punctuation">&#125;</span>    <span class="token comment">// 对入口进行遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> entryName <span class="token keyword">in</span> entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//获取入口文件的绝对路径</span>      <span class="token keyword">let</span> entryFilePath <span class="token operator">=</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">,</span> entry<span class="token punctuation">[</span>entryName<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment">//把此入口文件添加到文件依赖列表中</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fileDependencies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entryFilePath<span class="token punctuation">)</span>      <span class="token comment">//6.从入口文件出发,调用所有配置的Loader对模块进行编译</span>      <span class="token keyword">let</span> entryModule <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildModule</span><span class="token punctuation">(</span>entryName<span class="token punctuation">,</span> entryFilePath<span class="token punctuation">)</span>      <span class="token comment">// this.modules.push(entryModule)</span>      <span class="token comment">// 8.根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk</span>      <span class="token keyword">let</span> chunk <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> entryName<span class="token punctuation">,</span> <span class="token comment">//入口名称</span>        entryModule<span class="token punctuation">,</span> <span class="token comment">//入口的模块 ./src/entry.js</span>        <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> module<span class="token punctuation">.</span>names<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>entryName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//此入口对应的模块</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 9.再把每个 Chunk 转换成一个单独的文件加入到输出列表</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>chunks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> filename <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>output<span class="token punctuation">.</span>filename<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"[name]"</span><span class="token punctuation">,</span> chunk<span class="token punctuation">.</span>name<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>      <span class="token comment">//组装chunk</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>assets<span class="token punctuation">[</span>filename<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getSource</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">callback</span><span class="token punctuation">(</span>      <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">,</span>        <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chunks<span class="token punctuation">,</span>        <span class="token literal-property property">assets</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>assets<span class="token punctuation">,</span>        <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fileDependencies    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 编译模块   * @param &#123;*&#125; name 模块所属的代码块(chunk)的名称，也就是entry的name entry1 entry2   * @param &#123;*&#125; modulePath 模块的绝对路径   */</span>  <span class="token function">buildModule</span><span class="token punctuation">(</span><span class="token parameter">entryName<span class="token punctuation">,</span> modulePath</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.读取文件的内容</span>    <span class="token keyword">let</span> rawSourceCode <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span>    <span class="token comment">//获取loader的配置规则</span>    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> rules <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>module    <span class="token comment">//根据规则找到所有的匹配的loader 适用于此模块的所有loader</span>    <span class="token keyword">let</span> loaders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    rules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rule</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">//用模块路径匹配正则表达式</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>modulePath<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        loaders<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>rule<span class="token punctuation">.</span>use<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//调用所有配置的Loader对模块进行转换</span>    <span class="token keyword">let</span> transformedSourceCode <span class="token operator">=</span> loaders<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sourceCode<span class="token punctuation">,</span> loaderPath</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> loaderFn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>loaderPath<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token function">loaderFn</span><span class="token punctuation">(</span>sourceCode<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> rawSourceCode<span class="token punctuation">)</span>    <span class="token comment">//7.再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</span>    <span class="token comment">//获取当前模块，也就是 ./src/entry1.js的模块ID</span>    <span class="token keyword">let</span> moduleId <span class="token operator">=</span> <span class="token string">"./"</span> <span class="token operator">+</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">,</span> modulePath<span class="token punctuation">)</span>    <span class="token comment">//创建一个模块ID就是相对于根目录的相对路径 dependencies就是此模块依赖的模块</span>    <span class="token comment">//name是模块所属的代码块的名称,如果一个模块属于多个代码块，那么name就是一个数组</span>    <span class="token keyword">let</span> module <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> moduleId<span class="token punctuation">,</span> <span class="token literal-property property">dependencies</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token literal-property property">names</span><span class="token operator">:</span> <span class="token punctuation">[</span>entryName<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span>    <span class="token keyword">let</span> ast <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>transformedSourceCode<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">"module"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//Visitor是babel插件中的概念，此处没有</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">CallExpression</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> node <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果调用的方法名是require的话，说明就要依赖一个其它模块</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">"require"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// .代表当前的模块所有的目录，不是工作目录</span>          <span class="token keyword">let</span> depModuleName <span class="token operator">=</span> node<span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token comment">//"./title"</span>          <span class="token keyword">let</span> depModulePath          <span class="token comment">//获取当前的模块所在的目录</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>depModuleName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//暂时先不考虑node_modules里的模块，先只考虑相对路径</span>            <span class="token keyword">const</span> currentDir <span class="token operator">=</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span>            <span class="token comment">//要找当前模块所有在的目录下面的相对路径</span>            depModulePath <span class="token operator">=</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>currentDir<span class="token punctuation">,</span> depModuleName<span class="token punctuation">)</span>            <span class="token comment">//此绝对路径可能没有后续，需要尝试添加后缀</span>            <span class="token comment">// 获取配置的扩展名后缀</span>            <span class="token keyword">const</span> extensions <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>resolve<span class="token punctuation">.</span>extensions            <span class="token comment">//尝试添加后缀 返回最终的路径</span>            depModulePath <span class="token operator">=</span> <span class="token function">tryExtensions</span><span class="token punctuation">(</span>depModulePath<span class="token punctuation">,</span> extensions<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果不是以.开头的话，就是第三方模块</span>            depModulePath <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>depModuleName<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>          <span class="token comment">//把依赖的模块路径添加到文件依赖列表</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>fileDependencies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>depModulePath<span class="token punctuation">)</span>          <span class="token comment">//获取此依赖的模块的ID, 也就是相对于根目录的相对路径</span>          <span class="token keyword">let</span> depModuleId <span class="token operator">=</span> <span class="token string">"./"</span> <span class="token operator">+</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>baseDir<span class="token punctuation">,</span> depModulePath<span class="token punctuation">)</span>          <span class="token comment">//修改语法树，把依赖的模块名换成模块ID</span>          node<span class="token punctuation">.</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> types<span class="token punctuation">.</span><span class="token function">stringLiteral</span><span class="token punctuation">(</span>depModuleId<span class="token punctuation">)</span>          <span class="token comment">//把依赖的模块ID和依赖的模块路径放置到当前模块的依赖数组中</span>          module<span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> depModuleId<span class="token punctuation">,</span> depModulePath <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//转换源代码,把转换后的源码放在_source属性,用于后面写入文件</span>    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> code <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">generator</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span>    module<span class="token punctuation">.</span>_source <span class="token operator">=</span> code    <span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token operator">...</span>module<span class="token punctuation">.</span>dependencies<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> depModuleId<span class="token punctuation">,</span> depModulePath <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">//判断此依赖的模块是否已经打包过了或者说编译 过了</span>      <span class="token keyword">let</span> existModule <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> module<span class="token punctuation">.</span>id <span class="token operator">===</span> depModuleId<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>existModule<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        existModule<span class="token punctuation">.</span>names<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>entryName<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> depModule <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildModule</span><span class="token punctuation">(</span>entryName<span class="token punctuation">,</span> depModulePath<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>depModule<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> module  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * * @param &#123;*&#125; modulePath * @param &#123;*&#125; extensions * @returns */</span><span class="token keyword">function</span> <span class="token function">tryExtensions</span><span class="token punctuation">(</span><span class="token parameter">modulePath<span class="token punctuation">,</span> extensions</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>modulePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> modulePath  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> extensions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> filePath <span class="token operator">=</span> modulePath <span class="token operator">+</span> extensions<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> filePath    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">找不到</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>modulePath<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getSource</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  (() => &#123;    var modules = &#123;      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>chunk<span class="token punctuation">.</span>modules        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> module<span class="token punctuation">.</span>id <span class="token operator">!==</span> chunk<span class="token punctuation">.</span>entryModule<span class="token punctuation">.</span>id<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">          "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>module<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">": module => &#123;            </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>module<span class="token punctuation">.</span>_source<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">          &#125;        </span><span class="token template-punctuation string">`</span></span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">    &#125;;    var cache = &#123;&#125;;    function require(moduleId) &#123;      var cachedModule = cache[moduleId];      if (cachedModule !== undefined) &#123;        return cachedModule.exports;      &#125;      var module = cache[moduleId] = &#123;        exports: &#123;&#125;      &#125;;      modules[moduleId](module, module.exports, require);      return module.exports;    &#125;    var exports = &#123;&#125;;    (() => &#123;      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>chunk<span class="token punctuation">.</span>entryModule<span class="token punctuation">.</span>_source<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">    &#125;)();  &#125;)();  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Compilation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>webpack2.js</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="1-文件作用"><a href="#1-文件作用" class="headerlink" title="1. 文件作用"></a>1. 文件作用</h3><h4 id="webpack-js-文件"><a href="#webpack-js-文件" class="headerlink" title="webpack.js 文件"></a><strong>webpack.js 文件</strong></h4><p>webpack 方法</p><ol><li>接收 webpack.config.js 参数，返回 compiler 实例</li><li>初始化参数</li><li>始化 Compiler 对象实例</li><li>加载所有配置的插件</li></ol><h4 id="Compiler文件"><a href="#Compiler文件" class="headerlink" title="Compiler文件"></a><strong>Compiler</strong>文件</h4><ul><li><p>Compiler 模块是 <strong>webpack 的主要引擎</strong></p></li><li><p><strong>constructor 方法</strong>： 初始化一些 hooks</p></li><li><p><strong>run 方法</strong></p><ul><li>执行插件订阅的一系列 hooks</li><li>创建 Compilation 实例并执行实例的 build（onCompiled）方法（开启一次新的编译）</li><li>onCompiled 回调<ul><li>在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li><li>执行 compiler.run 方法的回调，传入 info</li><li>监听依赖的文件变化，如果依赖的文件变化后会开始一次新的编译</li></ul></li></ul></li></ul><h4 id="Compilation-文件"><a href="#Compilation-文件" class="headerlink" title="Compilation 文件"></a>Compilation 文件</h4><p><strong>build 方法</strong></p><ol><li>.根据配置中的 entry 找出入口文件</li><li>从入口文件出发,调用所有配置的 Loader 对模块进行编译</li><li>再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li><li>根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk</li><li>再把每个 Chunk 转换成一个单独的文件加入到输出列表</li><li>执行成功后的回调</li></ol><h3 id="2-流程总结"><a href="#2-流程总结" class="headerlink" title="2. 流程总结"></a>2. 流程总结</h3><h4 id="初始化参数："><a href="#初始化参数：" class="headerlink" title="初始化参数："></a><strong>初始化参数：</strong></h4><ol><li><strong>初始化参数</strong>：从配置文件和 Shell 语句中读取并合并参数,得出最终的配置对象（命令行优先级高）</li></ol><h4 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a><strong>开始编译</strong></h4><ol start="2"><li><p>用上一步得到的参数<strong>初始化 Compiler 对象</strong></p><ol><li>初始化 options 参数和 hooks （<code> run: new SyncHook()</code>, //在开始编译之前调用…）</li></ol></li><li><p><strong>加载</strong>所有配置的<strong>插件</strong>：</p><ol><li>在配置中找到 plugins 数组</li><li>遍历 plugins 执行每个插件的 apply 方法，并把 compiler 实例传进去（每个插件都有一个 apply 方法）</li><li>执行<code> compiler.hooks.run.tap</code>等方法注册事件</li></ol></li><li><p><strong>执行</strong><code>compiler</code>实例的 <strong>run 方法</strong>开始执行编译</p><ol><li>整个过程伴随着触发插件的注册个各种钩子函数<code> this.hooks.done.call()</code>…</li><li>开启一次新的编译，创建一个新的 Compilation 实例</li><li>执行实例的 build 方法，传入完成的回调</li></ol></li></ol><h4 id="编译模块"><a href="#编译模块" class="headerlink" title="编译模块"></a><strong>编译模块</strong></h4><ol start="5"><li><p>根据配置中的 entry 找出入口文件</p><ol><li>格式化入口文件，变成对象形式</li><li>对入口进行遍历，获取入口文件的绝对路径，添加到文件依赖列表中</li></ol></li><li><p><strong>loader 转换</strong>：从入口文件出发,调用所有配置的 Loader 对模块进行转换 （最终返回 module 对象）</p><ol><li><p>读取处理文件的内容</p></li><li><p>根据规则找到所有的匹配的 loader</p></li><li><p>调用所有配置的 Loader 对模块进行转换（从上到下，从右向左）</p></li><li><p>获取当前模块模块 id，相对于根目录的相对路径</p></li><li><p>创建一个 module 对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">'./src/entry1.js'</span><span class="token punctuation">,</span><span class="token comment">//相对于根目录的相对路径</span>     <span class="token literal-property property">dependencies</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">depModuleId</span><span class="token operator">:</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>title<span class="token punctuation">.</span>js<span class="token punctuation">,</span><span class="token literal-property property">depModulePath</span><span class="token operator">:</span><span class="token string">'xxx'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//dependencies就是此模块依赖的模块</span>    <span class="token literal-property property">names</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'entry1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">// name是模块所属的代码块的名称,如果一个模块属于多个代码块，那么name就是一个数组</span><span class="token number">2.</span>     <span class="token literal-property property">_source</span><span class="token operator">:</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token comment">//存放对应的源码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p><strong>编译模块分析依赖</strong>，再<strong>递归遍历</strong>本步骤直到所有入口<strong>依赖模块</strong>的文件都经过了本步骤的处理</p><ol><li>将 loader 编译后的代码调用 parse 转换为 ast</li><li>遍历语法树，如果存在 require 或者 import，说明就要依赖一个其它模块</li><li>获取依赖模块的绝对路径，添加到文件依赖列表中</li><li>获取此依赖的模块的 ID, 也就是相对于根目录的相对路径</li><li>修改语法树，把依赖的模块名换成模块 ID</li><li>把依赖的模块 ID 和依赖的模块路径放置到当前模块 module 的依赖数组中</li><li>调用 generator（ast），把转换后的源码放在 module._source 属性,用于后面写入文件</li><li>遍历<code>module.dependencies</code>，递归构建 module，构建好的存储到 this.modules 上，如果第二个入口也依赖该模块，直接取用，只需要给该模块的 name 属性上添加上入口信息</li></ol></li></ol><h4 id="输出资源"><a href="#输出资源" class="headerlink" title="输出资源"></a><strong>输出资源</strong></h4><ol start="8"><li><p><strong>组装 chuck 对象：</strong></p><ol><li>组装</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> chuck <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"entry1"</span><span class="token punctuation">,</span> <span class="token comment">//入口名称</span>  entryModule<span class="token punctuation">,</span> <span class="token comment">//入口的模块的module &#123;id,name,dependencies,_source&#125;</span>  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 入口依赖模块的集合</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>this.chunks.push(chunk)</code></li></ol></li></ol><h4 id="生成-bundle-文件"><a href="#生成-bundle-文件" class="headerlink" title="生成 bundle 文件"></a>生成 bundle 文件</h4><ol start="9"><li>把每个 Chunk 转换成一个单独的文件加入到输出列表<ol><li>获取要生成的文件名称并把文件名添加到 this.files 中</li><li>获取文件内容并给 this.assets 对象</li><li>执行 <code>compilation.build</code> 方法的回调</li></ol></li></ol><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><ol start="10"><li>在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommonJS 和 ES Modules</title>
      <link href="/2023/03/20/commonjs-he-esm/"/>
      <url>/2023/03/20/commonjs-he-esm/</url>
      
        <content type="html"><![CDATA[<h3 id="在使用上的差别主要有："><a href="#在使用上的差别主要有：" class="headerlink" title="在使用上的差别主要有："></a><strong>在使用上的差别主要有：</strong></h3><ul><li><p><code>CommonJS</code> 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</p></li><li><p><code>CommonJS</code> 模块是运行时加载，ES6 模块是编译时输出接口（静态编译）。</p></li><li><p><code>CommonJs</code> 是单个值导出，<code>ES6 Module</code> 可以导出多个</p></li><li><p><code>CommonJs</code> 是动态语法可以写在判断里，<code>ES6 Module</code> 静态语法只能写在顶层</p></li><li><p><code>CommonJs</code> 的 <code>this</code> 是当前模块，<code>ES6 Module</code> 的 <code>this</code> 是 <code>undefined</code></p></li><li><p><code>CommonJS</code>是服务器端模块的规范，<code>CommonJS</code>规范加载模块是同步的</p></li></ul><p><strong>CommonJS</strong> 和 <strong>ES Modules (ESM)</strong> 是两种 JavaScript 中的模块化系统，它们的主要区别在于模块的定义方式、加载机制、语法和使用场景。下面从多个维度来对比这两者的区别：</p><h3 id="1-模块定义方式和语法"><a href="#1-模块定义方式和语法" class="headerlink" title="1. 模块定义方式和语法"></a>1. <strong>模块定义方式和语法</strong></h3><ul><li><p><strong>CommonJS</strong>：使用 <code>require</code> 语法引入模块，用 <code>module.exports</code> 或 <code>exports</code> 导出模块。CommonJS 是模块系统的早期实现，主要用于 Node.js 服务器端开发。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导出（CommonJS）</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">greet</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 导入（CommonJS）</span><span class="token keyword">const</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./myModule"</span><span class="token punctuation">)</span>myModule<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出：Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>**ES Modules (ESM)**：使用 <code>import</code> 和 <code>export</code> 语法导入和导出模块。ESM 是 JavaScript 官方标准化的模块系统，原生支持浏览器和 Node.js。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导出（ES Modules）</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 导入（ES Modules）</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> greet <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./myModule.js"</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出：Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-加载机制"><a href="#2-加载机制" class="headerlink" title="2. 加载机制"></a>2. <strong>加载机制</strong></h3><ul><li><strong>CommonJS</strong>：<strong>同步加载</strong>模块。这意味着在 <code>require</code> 调用时，Node.js 会立即执行并返回模块的内容，这种同步特性使得它非常适合在服务器端使用，因为服务器端代码不会受到网络延迟等因素的影响。<ul><li>CommonJS 的模块在首次加载时会被执行，结果会被缓存，后续的 <code>require</code> 调用会直接返回缓存的结果，而不会重复执行模块代码。</li></ul></li><li><strong>ESM</strong>：<strong>异步加载</strong>模块。ESM 的 <code>import</code> 语句是基于 Promise 的，这使得模块加载可以是异步的，尤其适用于浏览器端，避免阻塞页面的加载。<ul><li>ESM 在加载时会进行静态分析，因此在编译阶段就能确定模块依赖关系，这样可以实现更好的优化和提前报错。</li></ul></li></ul><h3 id="3-运行时与编译时"><a href="#3-运行时与编译时" class="headerlink" title="3. 运行时与编译时"></a>3. <strong>运行时与编译时</strong></h3><ul><li><p><strong>CommonJS</strong>：是<strong>运行时</strong>模块解析系统。<code>require</code> 语句会在代码运行时被解释执行，依赖可以根据运行时的条件动态加载。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleB"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>ESM</strong>：是<strong>编译时</strong>模块系统，导入模块的声明必须位于代码的顶层，不能在条件语句或函数中动态引入。这是为了让编译器能在编译时确定模块的依赖关系。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下是非法的，在 ESM 中不能使用动态导入</span><span class="token keyword">if</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> funcA <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./moduleA.js"</span> <span class="token comment">// 错误</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-导出机制"><a href="#4-导出机制" class="headerlink" title="4. 导出机制"></a>4. <strong>导出机制</strong></h3><ul><li><p><strong>CommonJS</strong>：通过 <code>module.exports</code> 或 <code>exports</code> 导出对象、函数或变量。它可以导出整个对象或模块的不同部分。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导出单个对象或函数</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 导出多个值</span>exports<span class="token punctuation">.</span><span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>ESM</strong>：使用 <code>export</code> 关键字导出，可以进行<strong>命名导出</strong>或<strong>默认导出</strong>。命名导出允许导出多个变量或函数，而默认导出则只能导出一个默认值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 命名导出</span><span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"John"</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 默认导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Default Export"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-模块的缓存"><a href="#5-模块的缓存" class="headerlink" title="5. 模块的缓存"></a>5. <strong>模块的缓存</strong></h3><ul><li><p><strong>CommonJS</strong>：模块在第一次加载后会被缓存，后续对该模块的 <code>require</code> 调用会返回缓存的结果，而不是重新执行模块代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 第一次 require 模块时，模块代码会执行</span><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span><span class="token comment">// 第二次 require 相同模块时，返回的是缓存的结果</span><span class="token keyword">const</span> moduleA_again <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>ESM</strong>：同样会对模块进行缓存，首次加载后，模块会被缓存并复用。和 CommonJS 一样，模块只会在第一次加载时执行代码。</p></li></ul><h3 id="6-顶层作用域"><a href="#6-顶层作用域" class="headerlink" title="6. 顶层作用域"></a>6. <strong>顶层作用域</strong></h3><ul><li><strong>CommonJS</strong>：每个模块都有自己的<strong>独立作用域</strong>，而不是全局作用域。模块内部的变量和函数默认是私有的，只有通过 <code>module.exports</code> 或 <code>exports</code> 公开的部分才对外可见。</li><li><strong>ESM</strong>：同样具有模块作用域，默认情况下，模块内部的变量、函数等都是私有的，只有通过 <code>export</code> 导出的部分才对外可见。</li></ul><h3 id="7-模块循环依赖"><a href="#7-模块循环依赖" class="headerlink" title="7. 模块循环依赖"></a>7. <strong>模块循环依赖</strong></h3><ul><li><p><strong>CommonJS</strong>：允许并且能够处理循环依赖问题，但在循环依赖的情况下，只有模块的部分代码会被导入（即已执行的部分）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// moduleA.js</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleB"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Module A"</span><span class="token punctuation">)</span><span class="token comment">// moduleB.js</span><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./moduleA"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Module B"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>ESM</strong>：也允许循环依赖，但 ESM 会确保模块的所有依赖关系都被初始化，在加载时会执行一部分已解析的模块代码。因此 ESM 更适合处理循环依赖。</p></li></ul><h3 id="8-浏览器支持"><a href="#8-浏览器支持" class="headerlink" title="8. 浏览器支持"></a>8. <strong>浏览器支持</strong></h3><ul><li><p><strong>CommonJS</strong>：主要用于 Node.js 环境，浏览器原生不支持 CommonJS 模块化系统。在浏览器中使用 CommonJS 通常需要通过打包工具（如 Webpack 或 Browserify）将模块转换成浏览器可执行的代码。</p></li><li><p><strong>ESM</strong>：浏览器原生支持 ES Modules，尤其是在现代浏览器中，使用 <code>&lt;script type=&quot;module&quot;&gt;</code> 标签可以直接加载 ES 模块，无需额外的打包工具。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="9-使用场景"><a href="#9-使用场景" class="headerlink" title="9. 使用场景"></a>9. <strong>使用场景</strong></h3><ul><li><strong>CommonJS</strong>：由于它是 Node.js 的标准模块系统，主要用于服务器端开发。</li><li><strong>ESM</strong>：逐渐成为 JavaScript 的标准模块系统，被广泛应用于浏览器和 Node.js 环境中。</li></ul><h3 id="10-默认导出与命名导出"><a href="#10-默认导出与命名导出" class="headerlink" title="10. 默认导出与命名导出"></a>10. <strong>默认导出与命名导出</strong></h3><ul><li><strong>CommonJS</strong>：没有默认导出的概念，模块可以导出单个对象或多个属性，但没有专门的语法区分默认导出和命名导出。</li><li><strong>ESM</strong>：支持<strong>默认导出</strong>和<strong>命名导出</strong>。一个模块可以有多个命名导出，但只能有一个默认导出。</li></ul><h3 id="11-值得引用和拷贝"><a href="#11-值得引用和拷贝" class="headerlink" title="11 值得引用和拷贝"></a>11 值得引用和拷贝</h3><ul><li><p><strong>CommonJS 模块输出的是值的拷贝</strong>：当使用 CommonJS <code>require</code> 引入一个模块时，模块中的值会被<strong>拷贝</strong>到引入模块的地方。也就是说，模块的导出值是<strong>在模块首次加载时计算并返回</strong>的，而后续对该模块的 <code>require</code> 调用都会返回相同的拷贝。<strong>如果模块内部的值发生变化，这种变化不会影响到已经引入的拷贝</strong>。</p></li><li><p><strong>ES6 模块输出的是值的引用</strong>：当使用 ES Modules (<code>import/export</code>) 引入一个模块时，模块中的导出值是<strong>引用</strong>，即导出的是一个“绑定”，不会被拷贝。如果模块内部的值发生变化，<strong>在其他模块中通过 <code>import</code> 导入的值也会随之更新</strong>，因为它们引用的是同一个内存地址。</p></li></ul><h4 id="1-CommonJS-模块输出的是值的拷贝"><a href="#1-CommonJS-模块输出的是值的拷贝" class="headerlink" title="1. CommonJS 模块输出的是值的拷贝"></a>1. <strong>CommonJS 模块输出的是值的拷贝</strong></h4><p>CommonJS 的模块机制是运行时加载，模块在首次被 <code>require</code> 时会执行整个模块代码，并缓存导出的结果。后续的 <code>require</code> 操作不会重新执行模块代码，而是直接使用缓存的拷贝。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// counter.js (CommonJS 模块)</span><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  count<span class="token operator">++</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  count<span class="token punctuation">,</span>  increment<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js (CommonJS 导入)</span><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./counter"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 输出 0</span>counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// 输出 0 （模块导出的 count 是拷贝，值不会更新）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>counter.js</code> 模块导出的 <code>count</code> 值在 <code>require</code> 时就被固定下来。即使 <code>counter.increment()</code> 修改了模块内部的 <code>count</code>，但由于 <code>require</code> 返回的是<strong>初始值的拷贝</strong>，所以 <code>main.js</code> 中的 <code>count</code> 不会更新。</p><h4 id="2-ES-Modules-输出的是值的引用"><a href="#2-ES-Modules-输出的是值的引用" class="headerlink" title="2. ES Modules 输出的是值的引用"></a>2. <strong>ES Modules 输出的是值的引用</strong></h4><p>ES6 的模块机制是编译时加载，<code>import</code> 导入的是一个对原模块的<strong>引用</strong>，即使原模块中的变量发生变化，导入模块中的值也会实时更新。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// counter.js (ES Modules)</span><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  count<span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js (ES Modules 导入)</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> count<span class="token punctuation">,</span> increment <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./counter.js"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">// 输出 0</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">// 输出 1 （模块导出的 count 是引用，值会更新）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>count</code> 是通过 <code>export</code> 导出的，它是一个引用。当 <code>increment()</code> 被调用时，<code>count</code> 的值更新了，而 <code>main.js</code> 中的 <code>count</code> 也随之更新，因为它引用的是同一个内存地址。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><strong>CommonJS</strong> 导出的是<strong>值的拷贝</strong>，模块首次加载时会执行并缓存，后续使用的都是这个缓存的结果，模块内部变量的变化不会影响到其他文件。</li><li><strong>ES Modules</strong> 导出的是<strong>值的引用</strong>，模块导入时会动态引用模块的内部值，如果模块内部的值发生变化，导入的地方也会感知到这些变化。</li></ul><p>所以，ES Modules 的 <code>import</code> 具有动态性，而 CommonJS 的 <code>require</code> 更像是静态的快照。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack 打包后模块分析</title>
      <link href="/2023/03/16/bundle/"/>
      <url>/2023/03/16/bundle/</url>
      
        <content type="html"><![CDATA[<h2 id="1-同步加载"><a href="#1-同步加载" class="headerlink" title="1. 同步加载"></a>1. 同步加载</h2><h3 id="没有依赖"><a href="#没有依赖" class="headerlink" title="没有依赖"></a>没有依赖</h3><p>src\index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>bundle.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//导出对象</span><span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//模块内容</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打包模块分析"><a href="#打包模块分析" class="headerlink" title="打包模块分析"></a><strong>打包模块分析</strong></h3><p>src\index.js</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let title &#x3D; require(&quot;.&#x2F;title.js&quot;);console.log(title);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>src\title.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>bundle.js</p><blockquote><p>未加入缓存</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//模块定义</span><span class="token comment">//key是模块ID，也就是模块相对于相前根目录的相对路径</span><span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"./src/title.js"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"title"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">//加载模块，执行 modules 对应的函数</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">)</span>  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">&#125;</span><span class="token comment">//入口</span><span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./src/title.js"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-兼容性实现"><a href="#2-兼容性实现" class="headerlink" title="2. 兼容性实现"></a>2. 兼容性实现</h2><h3 id="2-1-common-js-加载-common-js"><a href="#2-1-common-js-加载-common-js" class="headerlink" title="2.1 common.js 加载 common.js"></a>2.1 common.js 加载 common.js</h3><h4 id="2-1-1-index-js"><a href="#2-1-1-index-js" class="headerlink" title="2.1.1 index.js"></a>2.1.1 index.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./title"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2-title-js"><a href="#2-1-2-title-js" class="headerlink" title="2.1.2 title.js"></a>2.1.2 title.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"title_name"</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">"title_age"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-1-3-bundle-js"><a href="#2-1-3-bundle-js" class="headerlink" title="2.1.3 bundle.js"></a>2.1.3 bundle.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//需要加载的模块</span>  <span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"./src/title.js"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"title_name"</span>      exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">"title_age"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//缓存</span>  <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//require 方法</span>  <span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> cachedModule <span class="token operator">=</span> cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">)</span>    <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports  <span class="token punctuation">&#125;</span>  <span class="token comment">// 入口</span>  <span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./src/title.js"</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-common-js-加载-ES6-modules"><a href="#2-2-common-js-加载-ES6-modules" class="headerlink" title="2.2 common.js 加载 ES6 modules"></a>2.2 common.js 加载 ES6 modules</h3><h4 id="2-2-1-index-js"><a href="#2-2-1-index-js" class="headerlink" title="2.2.1 index.js"></a>2.2.1 index.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./title"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-title-js"><a href="#2-2-2-title-js" class="headerlink" title="2.2.2 title.js"></a>2.2.2 title.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">"title_name"</span><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">"title_age"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-2-3-bundle-js"><a href="#2-2-3-bundle-js" class="headerlink" title="2.2.3 bundle.js"></a>2.2.3 bundle.js</h4><blockquote><p>去除了自执行函数和模块缓存</p></blockquote><ul><li>打包前面是 commonjs 打包后不需要变，打包前是 esmodule 打包后得变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 如果原模块是esmodule * 先执行require.r * 再执行require.d */</span><span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"./src/title.js"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> require</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.声明或者说表示当前的模块原来是一个es module</span>    require<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span>    <span class="token comment">//2. 定义属性</span>    require<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">age</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> age<span class="token punctuation">,</span>      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">DEFAULT_EXPORTS</span><span class="token punctuation">,</span> <span class="token comment">//值是一个getter</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//默认导出</span>    <span class="token keyword">const</span> <span class="token constant">DEFAULT_EXPORTS</span> <span class="token operator">=</span> <span class="token string">"title_name"</span>    <span class="token comment">//命名导出</span>    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">"title_age"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 执行modules对象对应的模块函数 * @param &#123;*&#125; moduleId 模块Id * @returns module.exports */</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">)</span>  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">&#125;</span><span class="token comment">/** * 给exports 上面定义属性 * @param &#123;*&#125; exports 导出对象 * @param &#123;*&#125; definition 定义的属性 */</span>require<span class="token punctuation">.</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> definition</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//遍历key</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> definition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在 definition 上不在 exports 上就赋值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 给exports 上面定义属性 geT 获取</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">get</span><span class="token operator">:</span> definition<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//对象自身属性中是否具有指定的属性</span>require<span class="token punctuation">.</span><span class="token function-variable function">o</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token comment">/** * 给exports 声明 Symbol.toStringTag为Module ，__esModule 未true * @param &#123;*&#125; exports */</span>require<span class="token punctuation">.</span><span class="token function-variable function">r</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol <span class="token operator">!==</span> <span class="token string">"undefined"</span> <span class="token operator">&amp;&amp;</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"Module"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./src/title.js"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>default<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-ES6-modules-加载-ES6-modules"><a href="#2-3-ES6-modules-加载-ES6-modules" class="headerlink" title="2.3 ES6 modules 加载 ES6 modules"></a>2.3 ES6 modules 加载 ES6 modules</h3><h4 id="2-3-1-index-js"><a href="#2-3-1-index-js" class="headerlink" title="2.3.1 index.js"></a>2.3.1 index.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> name<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./title"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2-title-js"><a href="#2-3-2-title-js" class="headerlink" title="2.3.2 title.js"></a>2.3.2 title.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> name <span class="token operator">=</span> <span class="token string">"title_name"</span><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">"title_age"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-3-3-bundle-js"><a href="#2-3-3-bundle-js" class="headerlink" title="2.3.3 bundle.js"></a>2.3.3 bundle.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 如果原模块是esmodule * 先执行require.r * 再执行require.d */</span><span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"./src/title.js"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> require</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.声明或者说表示当前的模块原来是一个es module</span>    require<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span>    <span class="token comment">//2. 定义属性</span>    require<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">age</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> age<span class="token punctuation">,</span>      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _DEFAULT_EXPORT__<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 此处为了实现Livbinding做准备</span>    <span class="token keyword">const</span> _DEFAULT_EXPORT__ <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"title_name"</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">"title_age"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 执行modules对象对应的模块函数 * @param &#123;*&#125; moduleId 模块Id * @returns module.exports */</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cachedModule <span class="token operator">=</span> cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">)</span>  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">&#125;</span><span class="token comment">/** * 给exports 上面定义属性 * @param &#123;*&#125; exports 导出对象 * @param &#123;*&#125; definition 定义的属性 */</span>require<span class="token punctuation">.</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> definition</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> definition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">get</span><span class="token operator">:</span> definition<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>require<span class="token punctuation">.</span><span class="token function-variable function">o</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token comment">/** * 给exports 声明 Symbol.toStringTag为Module ，__esModule 未true * @param &#123;*&#125; exports */</span>require<span class="token punctuation">.</span><span class="token function-variable function">r</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol <span class="token operator">!==</span> <span class="token string">"undefined"</span> <span class="token operator">&amp;&amp;</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"Module"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//入口</span><span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//标明是esModule模块</span>require<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span><span class="token comment">//加载对应的模块</span><span class="token keyword">var</span> _title_0__ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./src/title.js"</span><span class="token punctuation">)</span><span class="token comment">//取值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_title_0__<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_title_0__<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-ES6-modules-加载-common-js"><a href="#2-4-ES6-modules-加载-common-js" class="headerlink" title="2.4 ES6 modules 加载 common.js"></a>2.4 ES6 modules 加载 common.js</h3><h4 id="2-4-1-index-js"><a href="#2-4-1-index-js" class="headerlink" title="2.4.1 index.js"></a>2.4.1 index.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> name<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./title"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2-title-js"><a href="#2-4-2-title-js" class="headerlink" title="2.4.2 title.js"></a>2.4.2 title.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"title_name"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">"title_age"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-3-bundle-js"><a href="#2-4-3-bundle-js" class="headerlink" title="2.4.3 bundle.js"></a>2.4.3 bundle.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 如果原模块是esmodule * 先执行require.r * 再执行require.d */</span><span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"./src/title.js"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> require</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.声明或者说表示当前的模块原来是一个es module</span>    require<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span>    <span class="token comment">//2. 定义属性</span>    require<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">age</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> age<span class="token punctuation">,</span>      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _DEFAULT_EXPORT__<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 此处为了实现Livbinding做准备</span>    <span class="token keyword">const</span> _DEFAULT_EXPORT__ <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"title_name"</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">"title_age"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 执行modules对象对应的模块函数 * @param &#123;*&#125; moduleId 模块Id * @returns module.exports */</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cachedModule <span class="token operator">=</span> cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">)</span>  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">&#125;</span><span class="token comment">/** * 给exports 上面定义属性 * @param &#123;*&#125; exports 导出对象 * @param &#123;*&#125; definition 定义的属性 */</span>require<span class="token punctuation">.</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> definition</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> definition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">get</span><span class="token operator">:</span> definition<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>require<span class="token punctuation">.</span><span class="token function-variable function">o</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token comment">/** * 给exports 声明 Symbol.toStringTag为Module ，__esModule 未true * @param &#123;*&#125; exports */</span>require<span class="token punctuation">.</span><span class="token function-variable function">r</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol <span class="token operator">!==</span> <span class="token string">"undefined"</span> <span class="token operator">&amp;&amp;</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"Module"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//入口</span><span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//标明是esModule模块</span>require<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span><span class="token comment">//加载对应的模块</span><span class="token keyword">var</span> _title_0__ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./src/title.js"</span><span class="token punctuation">)</span><span class="token comment">//取值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_title_0__<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_title_0__<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-异步加载实现分析"><a href="#3-异步加载实现分析" class="headerlink" title="3. 异步加载实现分析"></a>3. 异步加载实现分析</h2><h3 id="打包前"><a href="#打包前" class="headerlink" title="打包前"></a>打包前</h3><p>index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./title.js"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>default<span class="token punctuation">)</span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./title.js"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>default<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>title.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">"title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="打包后"><a href="#打包后" class="headerlink" title="打包后"></a>打包后</h3><p>main.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义一个模块定义的对象</span><span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//存放已经加载的模块的缓存</span><span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//在浏览器里实现require方法</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cachedModule <span class="token operator">=</span> cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">)</span>  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">&#125;</span><span class="token comment">//给require方法定义一个m属性，指向模块定义对象</span>require<span class="token punctuation">.</span>m <span class="token operator">=</span> modulesrequire<span class="token punctuation">.</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> definition</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> definition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">get</span><span class="token operator">:</span> definition<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>require<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//空对象</span><span class="token comment">/** * * @param &#123;*&#125; chunkId  chunk 代码块 模块的集合 * @returns 返回Promise */</span>require<span class="token punctuation">.</span><span class="token function-variable function">e</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkId</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  require<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">j</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">,</span> promises<span class="token punctuation">)</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//源代码加载绝对路径 此处写成''</span>require<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">//返回此代码块对应的文件名</span>require<span class="token punctuation">.</span><span class="token function-variable function">u</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkId</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">""</span> <span class="token operator">+</span> chunkId <span class="token operator">+</span> <span class="token string">".main.js"</span><span class="token punctuation">&#125;</span>require<span class="token punctuation">.</span>g <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> globalThis <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> globalThis  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"return this"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> window  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>require<span class="token punctuation">.</span><span class="token function-variable function">o</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token comment">// 通过JSONP加载代码 动态加载代码 原代码中会有一个定时器，成功后达到时间删除创建script标签</span>require<span class="token punctuation">.</span><span class="token function-variable function">l</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span>  script<span class="token punctuation">.</span>src <span class="token operator">=</span> url  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>require<span class="token punctuation">.</span><span class="token function-variable function">r</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol <span class="token operator">!==</span> <span class="token string">"undefined"</span> <span class="token operator">&amp;&amp;</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"Module"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//存放加载的代码块的状态</span><span class="token comment">//key是代码块的名字</span><span class="token comment">//0表示已经加载完成了</span><span class="token keyword">var</span> installedChunks <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//当一个代码块它的值是一个数组的时候表示此代码块对应的JS文件正在加载中</span>  <span class="token comment">//'src_hello_js':[resolve,reject,promise]=>0</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 通过JSONP异步加载一个chunkId对应的代码块文件，其实就是title.main.js * 会返回一个Promise * @param &#123;*&#125; chunkId 代码块ID * @param &#123;*&#125; promises promise数组 */</span>require<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function-variable function">j</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkId<span class="token punctuation">,</span> promises</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//做缓存  当前的代码块的数据</span>  <span class="token keyword">var</span> installedChunkData <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>installedChunks<span class="token punctuation">,</span> chunkId<span class="token punctuation">)</span> <span class="token operator">?</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>installedChunkData <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      installedChunkData <span class="token operator">=</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    installedChunkData<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> promise    <span class="token comment">//installedChunkData=[resolve,reject,promise]</span>    promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> require<span class="token punctuation">.</span>p <span class="token operator">+</span> require<span class="token punctuation">.</span><span class="token function">u</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">)</span>    require<span class="token punctuation">.</span><span class="token function">l</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * * @param &#123;*&#125; chunkIds 代码块ID数组 * @param &#123;*&#125; moreModules 额外的模块定义 */</span><span class="token keyword">function</span> <span class="token function">webpackJsonpCallback</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>chunkIds<span class="token punctuation">,</span> moreModules<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> resolves <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chunkIds<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> chunkId <span class="token operator">=</span> chunkIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">//src_title_js</span>    <span class="token keyword">const</span> resolve <span class="token operator">=</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    resolves<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span>    <span class="token comment">//到这里此代码块就已经加载成功了，可以把chunkId的值设置为0</span>    installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//合并模块定义到modules去</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> moduleId <span class="token keyword">in</span> moreModules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> moreModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>resolves<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//取出所有的resolve方法，让它执行，让它对应的promise变成成功态</span>    resolves<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> chunkLoadingGlobal <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">"someName"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>chunkLoadingGlobal<span class="token punctuation">.</span>push <span class="token operator">=</span> webpackJsonpCallback<span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * require.e异步加载title代码块文件 title.main.js * promise成功后会把 title.main.js里面的代码定义合并到require.m对象上，也就是modules上 * 调用require方法加载./src/title.js模块，获取 模块的导出对象，进行打印 */</span>require  <span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"src_title_js"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> <span class="token string">"./src/title.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>default<span class="token punctuation">)</span>    require      <span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"src_title_js"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> <span class="token string">"./src/title.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>default<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src_title_js.main.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">[</span><span class="token string">"someName"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">"src_title_js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token string-property property">"./src/title.js"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> require</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      require<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span>      require<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _DEFAULT_EXPORT__<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> _DEFAULT_EXPORT__ <span class="token operator">=</span> <span class="token string">"title"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><ul><li><p>**modules 对象 ** key 是模块 ID，也就是模块相对于相前根目录的相对路径 值为对应加载模块的内容函数</p></li><li><p><strong>require 方法</strong> 执行 modules 对象对应的模块函数 返回 modules.exports 对象</p></li><li><p><strong>require.d 方法</strong> 通过 defineProperty 给 exports 上设置属性 get 获取</p></li><li><p><strong>require.o 方法</strong> 对象自身属性中是否具有指定的属性</p></li><li><p><strong>require.r 方法</strong> 标明该模块是 esModele 模块</p></li><li><p><strong>require.n 方法</strong> 返回函数兼容性处理默认值 ，esModule 模块 是的返回 module[“default”] 否则 commonjs 模块返回本身</p></li><li><p><strong>require.m 方法</strong> 指向模块定义对象 equire.m = modules;</p></li><li><p><strong>require.p 方法</strong> 获取要加载文件的绝对路径</p></li><li><p><strong>require.u 方法</strong> 返回此代码块对应的文件名</p></li><li><p><strong>require.l 方法</strong> 返回此代码块对应的文件名</p></li><li><p><strong>require.f.j 方法</strong></p></li><li><p><strong>require.e 方法</strong> 异步加载代码块文件</p><ul><li>返回 Promise.all([promises])</li><li>promise 成功后会把 加载里面的代码定义合并到 require.m 对象上，也就是 modules 上</li><li>调用 require 方法加载对应模块，获取 模块的导出对象，进行打印</li></ul><p><strong>installedChunks 对象</strong> //存放加载的代码块的状态 //key 是代码块的名字 //0 表示已经加载完成了</p></li></ul><h3 id="兼容处理"><a href="#兼容处理" class="headerlink" title="兼容处理"></a><strong>兼容处理</strong></h3><ul><li><strong>common.js 加载 common.js</strong><ol><li>直接调用 require 方法 执行 modules 对象对应的函数返回 modules.exports 对象</li></ol></li><li><strong>common.js 加载 ES6 modules</strong></li></ul><ol><li> 直接调用 require 方法</li><li>执行 modules 对象对应的函数<ol><li> 调用 require.r 方法 标明该模块为 esModule</li><li> 调用 require.d 方法 给 export 对象赋值</li></ol></li><li> 返回 modules.exports</li></ol><ul><li><p>ES6 modules 加载 ES6 modules</p><ol><li>模块入口 调用 require.r 标明是 esModule 模块</li><li>调用 require 方法 加载模块<ol><li>调用 require.r 标明被加载的模块是 esModule</li><li>调用 require.d 方法 给 export 对象赋值</li></ol></li><li>返回 加载的内容 modules.exports</li></ol></li><li><p>ES6 modules 加载 common.js</p><ol><li><p>模块入口 调用 require.r 标明是 esModule 模块、</p></li><li><p>调用 require 方法 加载模块 返回对应模块内容</p></li><li><p>兼容处理返回的默认值 调用 require.n</p></li></ol></li></ul><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a><strong>异步加载</strong></h3><ul><li><p>调用 require.e 异步加载代码，参数要加载的模块 ID</p><ul><li>创建一个空的 promises 数组</li><li>调用 require.f.j(chunkId, promises）<ul><li>定义一个 promise 和并且将该 chunkId 对应 promise 的 resolve,reject 放进数组</li><li>在全局对象 installedChunks 存取 key：chunkId ，value 为定义的数组</li><li>将该 promise 添加到 promises 上</li><li>通过 require.p + require.u(chunkId) 获取要动态加载的 script 的 url 地址</li><li>调用 require.l 同过 JSONP（动态创建 script，成功后删除）异步加载对接的文件</li><li>调用<strong>webpackJsonpCallback</strong>加载成功的回调，参数为 chunkIds 和 moreModules 对象<ul><li>installedChunks 取出对应 chunkId 的 resolves 方法存起来</li><li>把 installedChunks 中 chunkId 的值设置为 0 （表明该模块加载成功了）</li><li>遍历 moreModules 合并模块定义到 modules 去</li><li>依次取出 resolve 方法并执行</li></ul></li></ul></li><li>返回 Promise.all(promises)</li></ul></li><li><p>成功之后通过 then 方法加载调用 require 方法加载模块内容并返回下一个 then</p></li><li><p>页面通过.then 方法拿到结果</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hasOwnProperty</title>
      <link href="/2023/03/15/hasownproperty/"/>
      <url>/2023/03/15/hasownproperty/</url>
      
        <content type="html"><![CDATA[<h1 id="Object-prototype-hasOwnProperty"><a href="#Object-prototype-hasOwnProperty" class="headerlink" title="Object.prototype.hasOwnProperty()"></a>Object.prototype.hasOwnProperty()</h1><p><strong><code>hasOwnProperty()</code></strong> 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const object1 &#x3D; &#123;&#125;;object1.property1 &#x3D; 42;console.log(object1.hasOwnProperty(&#39;property1&#39;));&#x2F;&#x2F; Expected output: trueconsole.log(object1.hasOwnProperty(&#39;toString&#39;));&#x2F;&#x2F; Expected output: falseconsole.log(object1.hasOwnProperty(&#39;hasOwnProperty&#39;));&#x2F;&#x2F; Expected output: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用案例 | 二次封装</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">require<span class="token punctuation">.</span><span class="token function-variable function">o</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>defineProperty 和 toStringTag</title>
      <link href="/2023/03/15/defineproperty/"/>
      <url>/2023/03/15/defineproperty/</url>
      
        <content type="html"><![CDATA[<h3 id="1-toStringTag"><a href="#1-toStringTag" class="headerlink" title="1. toStringTag"></a>1. toStringTag</h3><ul><li><code>Symbol.toStringTag</code> 是一个内置 symbol，它通常作为对象的属性键使用，对应的属性值应该为字符串类型，这个字符串用来表示该对象的自定义类型标签</li><li>通常只有内置的 <code>Object.prototype.toString()</code> 方法会去读取这个标签并把它包含在自己的返回值里。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "[object String]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "[object Array]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "[object Number]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "[object Boolean]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "[object Undefined]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "[object Null]"</span><span class="token keyword">let</span> myExports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>myExports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"Module"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>myExports<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Module]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-defineProperty"><a href="#2-defineProperty" class="headerlink" title="2. defineProperty"></a>2. defineProperty</h3><ul><li>defineProperty 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。<ul><li>obj 要在其上定义属性的对象。</li><li>prop 要定义或修改的属性的名称。</li><li>descriptor 将被定义或修改的属性描述符。</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> ageValue <span class="token operator">=</span> <span class="token number">10</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//writable: true, //是否可修改</span>  <span class="token comment">//value: 10, //writeable 和 set不能混用</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> ageValue  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ageValue <span class="token operator">=</span> newValue  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可枚举</span>  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可配置可删除</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/2023/03/15/000-hexo/"/>
      <url>/2023/03/15/000-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="写作-test"><a href="#写作-test" class="headerlink" title="写作 test"></a>写作 test</h2><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 <code>_config.yml </code>中的 <code>default_layout </code>参数来指定默认布局。</p><h3 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><ul><li>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。</li><li>在创建这三种不同类型的文件时，它们将会被保存到不同的路径；</li><li>而您自定义的其他布局和 post 相同，都将储存到 <code>source/_posts</code> 文件夹。</li></ul><table><thead><tr><th><strong>布局</strong></th><th><strong>路径</strong></th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source/_drafts</td></tr></tbody></table><h3 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>:title</code></td><td align="left">标题（小写，空格将会被替换为短杠）</td></tr><tr><td align="left"><code>:year</code></td><td align="left">建立的年份，比如， <code>2015</code></td></tr><tr><td align="left"><code>:month</code></td><td align="left">建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td align="left"><code>:i_month</code></td><td align="left">建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td align="left"><code>:day</code></td><td align="left">建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td align="left"><code>:i_day</code></td><td align="left">建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo publish [layout] &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><p><strong>tags:</strong></p><ul><li>HTML | CSS | javaScript | TypeScript | ES6 | git | npm | Node.js | webpack | Vue.js | React | 算法 | 设计模式 | 面试 | 微前端 | 工具 | 编程题 | nginx | docker | 基础 ｜移动端｜ echarts</li></ul><p><strong>categories:</strong></p><ul><li><p>开发工具</p></li><li><p>前端基础</p></li><li><p>面试宝典</p></li><li><p>前端框架</p></li><li><p>前端运维</p></li><li><p>工程化</p></li><li><p>架构</p></li><li><p>LeetCode</p></li><li><p>解决方法</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>polyfill 实践</title>
      <link href="/2023/03/10/014-polyfill/"/>
      <url>/2023/03/10/014-polyfill/</url>
      
        <content type="html"><![CDATA[<h2 id="1-babel-polyfill"><a href="#1-babel-polyfill" class="headerlink" title="1. babel-polyfill"></a>1. babel-polyfill</h2><ul><li><p><code>Babel</code>默认只转换新的<code>Javascript</code>语法，而不转换新的 API，比如</p><ul><li><p>Iterator, Generator, Set, Maps, Proxy, Reflect,Symbol,Promise 等全局对象</p></li><li><p>在全局对象上的方法,比如说 ES6 在 Array 对象上新增了<code>Array.find</code>方法，Babel 就不会转码这个方法</p></li></ul></li><li><p>如果想让这个方法运行，必须使用 <code>babel-polyfill</code>来转换等</p></li><li><p>Babel 7.4 之后不再推荐使用@babel/polyfill</p></li><li><p>babel v7 推荐使用@babel/preset-env 代替以往的诸多 polyfill 方案</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save core<span class="token operator">-</span>js@<span class="token number">2</span>    core<span class="token operator">-</span>js@<span class="token number">3</span>  @babel<span class="token operator">/</span>polyfill<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-1、-useBuiltIns-false"><a href="#1-1、-useBuiltIns-false" class="headerlink" title="1.1、 useBuiltIns: false"></a>1.1、 useBuiltIns: false</h3><ul><li><p><code>babel-polyfill</code> 它是通过<strong>向全局对象和内置对象的<code>prototype</code>上添加方法来实现的</strong>。比如运行环境中不支持<code>Array.prototype.find</code>方法，引入<code>polyfill</code>, 我们就可以使用<code>ES6</code>方法来编写了，但是<strong>缺点就是会造成全局空间污染</strong></p></li><li><p><code>useBuiltIns: false</code> 此时不对 <code>polyfill</code> 做操作。如果引入 <code>@babel/polyfill</code>，则<strong>无视配置的浏览器兼容，引入所有的 <code>polyfill</code></strong></p></li><li><p><code>@babel/preset-env</code>默认只支持语法转化，需要开启<code>useBuiltIns</code>配置才能转化 API 和实例方法</p></li></ul><h3 id="1-2、useBuiltIns-“entry”"><a href="#1-2、useBuiltIns-“entry”" class="headerlink" title="1.2、useBuiltIns: “entry”"></a>1.2、useBuiltIns: “entry”</h3><ul><li>在项目入口引入一次（多次引入会报错）</li><li>“useBuiltIns”: “entry” 根据配置的浏览器兼容，引入浏览器不兼容的 polyfill。需要在入口文件手动添加 <code>import &#39;@babel/polyfill&#39;</code>，会自动根据 browserslist 替换成浏览器不兼容的所有 polyfill</li><li>这里需要指定 core-js 的版本,<code>corejs</code>默认是 2,</li><li>如果配置 <code>corejs: 3</code>, 则<code>import &#39;@babel/polyfill&#39;</code> 需要改成 <code>import &#39;core-js/stable&#39;;import &#39;regenerator-runtime/runtime&#39;;</code></li><li><ul><li><code>corejs</code>默认是 2</li></ul></li></ul><h3 id="1-3、-“useBuiltIns”-“usage”"><a href="#1-3、-“useBuiltIns”-“usage”" class="headerlink" title="1.3、 “useBuiltIns”: “usage”"></a>1.3、 “useBuiltIns”: “usage”</h3><ul><li>“useBuiltIns”: “usage” <code>usage</code> 会根据配置的浏览器兼容，以及你代码中用到的 API 来进行 polyfill，实现了按需添加</li><li>当设置为 usage 时，polyfill 会自动按需添加，不再需要手工引入<code>@babel/polyfill</code></li></ul><h2 id="2-babel-runtime"><a href="#2-babel-runtime" class="headerlink" title="2. babel-runtime"></a>2. babel-runtime</h2><ul><li>Babel 为了解决全局空间污染的问题，提供了单独的包<a href="https://babeljs.io/docs/en/babel-runtime">babel-runtime</a>用以提供编译模块的工具函数</li><li>简单说 <code>babel-runtime</code> 更像是一种按需加载的实现，比如你哪里需要使用 <code>Promise</code>，只要在这个文件头部<code>import Promise from &#39;babel-runtime/core-js/promise&#39;</code>就行了</li></ul><h2 id="3-babel-plugin-transform-runtime"><a href="#3-babel-plugin-transform-runtime" class="headerlink" title="3. babel-plugin-transform-runtime"></a>3. babel-plugin-transform-runtime</h2><ul><li><p>@babel/plugin-transform-runtime 插件是为了解决</p><ul><li>多个文件重复引用 相同 helpers(帮助函数)=&gt;提取运行时</li><li>新 API 方法全局污染 -&gt; 局部引入</li></ul></li><li><p>启用插件<code>babel-plugin-transform-runtime</code>后，Babel 就会使用<code>babel-runtime</code>下的工具函数</p></li><li><p><code>babel-plugin-transform-runtime</code>插件能够将这些工具函数的代码转换成<code>require</code>语句，指向为对<code>babel-runtime</code>的引用</p></li><li><p><code> babel-plugin-transform-runtime</code>就是可以在我们使用新 API 时自动 import<br><code>babel-runtime</code>里面的<code>  polyfill</code></p><ul><li><p>当我们使用 <code>async/await</code> 时，自动引入 <code>babel-runtime/regenerator</code></p></li><li><p>当我们使用 ES6 的静态事件或内置对象时，自动引入 <code>babel-runtime/core-js</code></p></li><li><p>移除内联<code>babel helpers</code>并替换使用<code>babel-runtime/helpers</code> 来替换</p></li></ul></li></ul><p><strong>helpers: true</strong></p><ul><li><p>移除内联 babel helpers 并替换使用<code>babel-runtime/helpers</code> 来替换</p></li><li><p>避免内联的 helper 代码在多个文件重复出现</p><p><strong>regenerator: true</strong></p></li><li><p>是否开启<code>generator</code>函数转换成使用<code>regenerator runtime</code>来避免污染全局域</p></li></ul><h2 id="4-最佳实践"><a href="#4-最佳实践" class="headerlink" title="4. 最佳实践"></a>4. 最佳实践</h2><ul><li>@babel/preset-env 和 plugin-transform-runtime 二者都可以设置使用 corejs 来处理 polyfill</li></ul><h3 id="4-1-项目开发"><a href="#4-1-项目开发" class="headerlink" title="4.1 项目开发"></a>4.1 项目开发</h3><ul><li><p>useBuiltIns 使用 usage</p></li><li><p>plugin-transform-runtime 只使用其移除内联复用的辅助函数的特性，减小打包体积</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span>          <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>              <span class="token property">"useBuiltIns"</span><span class="token operator">:</span> <span class="token string">"usage"</span><span class="token punctuation">,</span><span class="token comment">//实现polyfill 项目中不用担心会污染全局作用域</span>              <span class="token property">"corejs"</span><span class="token operator">:</span> <span class="token number">3</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span>          <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>              <span class="token property">"corejs"</span><span class="token operator">:</span> <span class="token boolean">false</span>，<span class="token comment">//不属于此插件提供的polyfill</span>               helpers<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//使用此插件,复用帮助 方法，减少文件体积</span>              regenerator<span class="token operator">:</span><span class="token boolean">false</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-2-类库开发"><a href="#4-2-类库开发" class="headerlink" title="4.2 类库开发"></a>4.2 类库开发</h3><ul><li>类库开发尽量不使用污染全局环境的<code>polyfill</code>，因此<code>@babel/preset-env</code>只发挥语法转换的功能</li><li>polyfill 由<code>@babel/plugin-transform-runtime</code>来处理，推荐使用 core-js@3</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token string-property property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span>            <span class="token string">"@babel/preset-env"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span>             <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span>                                    <span class="token punctuation">&#123;</span>                                        <span class="token literal-property property">corejs</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token comment">//使用此插件提供的polyfill,此插件不会污染全局环境</span>                                        <span class="token literal-property property">helpers</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//使用此插件,复用帮助 方法，减少文件体积</span>                                        <span class="token literal-property property">regenerator</span><span class="token operator">:</span><span class="token boolean">false</span>                                    <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-polyfill-service"><a href="#5-polyfill-service" class="headerlink" title="5. polyfill-service"></a>5. polyfill-service</h2><ul><li><a href="https://polyfill.io/v3/">polyfill.io</a>自动化的 JavaScript Polyfill 服务</li><li><a href="https://polyfill.io/v3/">polyfill.io</a>通过分析请求头信息中的 UserAgent 实现自动加载浏览器所需的 polyfills</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://polyfill.io/v3/polyfill.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>babel-polyfill</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">useBuiltIns</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token operator">-</span> 在项目入口引入一次（多次引入会报错<span class="token punctuation">)</span><span class="token operator">-</span> 则无视配置的浏览器兼容，引入所有的 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">polyfill</span><span class="token template-punctuation string">`</span></span><span class="token operator">-</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">babel-polyfill</span><span class="token template-punctuation string">`</span></span> 它是通过向全局对象和内置对象的<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">prototype</span><span class="token template-punctuation string">`</span></span>上添加方法来实现的<span class="token literal-property property">useBuiltIns</span><span class="token operator">:</span> <span class="token string">"entry"</span> <span class="token operator">+</span> corejs<span class="token operator">-</span> 在项目入口引入一次（多次引入会报错<span class="token operator">-</span> 根据配置的浏览器兼容，引入浏览器不兼容的 polyfill <span class="token literal-property property">useBuiltIns</span><span class="token operator">:</span> <span class="token string">"usage"</span><span class="token operator">-</span> 根据配置的浏览器兼容，以及你代码中用到的 <span class="token constant">API</span> 来进行 polyfill，实现了按需添加<span class="token operator">-</span> 无需手动引入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>缺点 污染全局</li></ul><p><strong>babel-runtime</strong></p><ul><li>Babel 为了解决全局空间污染的问题，提供了单独的包<a href="https://babeljs.io/docs/en/babel-runtime">babel-runtime</a>用以提供编译模块的工具函数</li><li>缺点代码中每个头部都需要手动引入需要的模块</li></ul><p><strong>babel-plugin-transform-runtime</strong></p><ul><li>多个文件重复引用 相同 helpers(帮助函数)=&gt;提取运行时</li><li>新 API 方法全局污染 -&gt; 局部引入</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块化的发展历程</title>
      <link href="/2023/03/09/013-mo-kuai-hua/"/>
      <url>/2023/03/09/013-mo-kuai-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="一、模块化"><a href="#一、模块化" class="headerlink" title="一、模块化"></a>一、模块化</h2><h3 id="1-1-什么是模块化"><a href="#1-1-什么是模块化" class="headerlink" title="1.1.什么是模块化"></a>1.1.什么是模块化</h3><ul><li>模块划就是按照一定的规则把代码封装成若干的相互依赖的文件并进行组合</li><li>每个模块内的数据都是私有的，只向外选择性的暴露一些方法和数据与外界进行数据通信</li></ul><h3 id="1-2-模块化的意义"><a href="#1-2-模块化的意义" class="headerlink" title="1.2.模块化的意义"></a>1.2.模块化的意义</h3><ul><li>有利于代码分享、解耦以及复用</li><li>团队并行开发</li><li>避免命名冲突</li><li>相互引用，按需加载</li></ul><h3 id="1-3-模块化的发展史"><a href="#1-3-模块化的发展史" class="headerlink" title="1.3. 模块化的发展史"></a>1.3. 模块化的发展史</h3><ul><li>自执行函数</li><li>AMD (Asynchronous Module Definition)<ul><li>AMD 推崇依赖前置，在定义模块的时候就要声明其依赖的模块</li><li><code>AMD</code>规范则是非同步加载模块，需要定义回调<code>define</code>方式</li></ul></li><li>CMD (Common Module Definition)<ul><li>CMD 推崇就近依赖，只有在用到某个模块的时候再去 require</li></ul></li><li>CommonJS (服务器端开发)</li><li>UMD (Universal Module Definition)<ul><li>UMD 叫做通用模块定义规范(Universal Module Definition)可以通过运行时或者编译时让同一个代码模块在使用 CommonJs、CMD 甚至是 AMD 的项目中运行</li></ul></li><li>ES6 Module (ESM，JS 官方标准模块定义方式)</li></ul><h3 id="1-4-common-js-和-ES6-中模块引入的区别"><a href="#1-4-common-js-和-ES6-中模块引入的区别" class="headerlink" title="1. 4 common.js 和 ES6 中模块引入的区别"></a>1. 4 common.js 和 ES6 中模块引入的区别</h3><p>目前浏览器端虽写法是以 esm 为主，但是各种前端工具转换为 cjs</p><p><strong>在使用上的差别主要有：</strong></p><ul><li><p><code>CommonJS</code> 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</p></li><li><p><code>CommonJS</code> 模块是运行时加载，ES6 模块是编译时输出接口（静态编译）。</p></li><li><p><code>CommonJs</code> 是单个值导出，<code>ES6 Module</code> 可以导出多个</p></li><li><p><code>CommonJs</code> 是动态语法可以写在判断里，<code>ES6 Module</code> 静态语法只能写在顶层</p></li><li><p><code>CommonJs</code> 的 <code>this</code> 是当前模块，<code>ES6 Module</code> 的 <code>this</code> 是 <code>undefined</code></p></li><li><p><code>CommonJS</code>是服务器端模块的规范，<code>CommonJS</code>规范加载模块是同步的</p></li></ul><p><strong>注意：</strong></p><ul><li>export {&lt;变量&gt;}这种方式一般称为 命名式导出 或者 具名导出，导出的是一个<code>变量的引用</code>。</li><li>export default 这种方式称为 默认导出 或者 匿名导出，导出的是一个值。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// a.js</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  x <span class="token operator">=</span> <span class="token number">100</span>  y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> x <span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> y<span class="token comment">// b.js</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> x <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./a.js"</span><span class="token keyword">import</span> y <span class="token keyword">from</span> <span class="token string">"./a.js"</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// 100,20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h2><h3 id="2-1-有依赖的自执行函数"><a href="#2-1-有依赖的自执行函数" class="headerlink" title="2.1 有依赖的自执行函数"></a>2.1 有依赖的自执行函数</h3><ul><li>手工引入依赖</li><li>依赖关系不明显</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b  <span class="token punctuation">&#125;</span>  global<span class="token punctuation">.</span>addModule <span class="token operator">=</span> <span class="token punctuation">&#123;</span> add <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b  <span class="token punctuation">&#125;</span>  global<span class="token punctuation">.</span>minusModule <span class="token operator">=</span> <span class="token punctuation">&#123;</span> minus <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global<span class="token punctuation">,</span> addModule<span class="token punctuation">,</span> minusModule</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  global<span class="token punctuation">.</span>mathModule <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">add</span><span class="token operator">:</span> addModule<span class="token punctuation">.</span>add<span class="token punctuation">,</span> <span class="token literal-property property">minus</span><span class="token operator">:</span> minusModule<span class="token punctuation">.</span>minus <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> addModule<span class="token punctuation">,</span> minusModule<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mathModule<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mathModule<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-AMD"><a href="#2-2-AMD" class="headerlink" title="2.2 AMD"></a>2.2 AMD</h3><ul><li><p><a href="https://requirejs.org/docs/release/2.1.20/minified/require.js">require.js</a></p></li><li><p>前置依赖</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span>id<span class="token operator">?</span><span class="token punctuation">,</span> dependencies<span class="token operator">?</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> moduleFactory <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  moduleFactory<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> factory<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">dependencies<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>dependencies<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dependency</span><span class="token punctuation">)</span> <span class="token operator">=></span> moduleFactory<span class="token punctuation">[</span>dependency<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"addModule"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    add<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"minusModule"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    minus<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"addModule"</span><span class="token punctuation">,</span> <span class="token string">"minusModule"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">addModule<span class="token punctuation">,</span> minusModule</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>addModule<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minusModule<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-CMD"><a href="#2-3-CMD" class="headerlink" title="2.3. CMD"></a>2.3. CMD</h3><ul><li><code>CMD</code> 叫做通用模块定义规范（Common Module Defination )</li><li><a href="http://seajs.org/">seajs</a></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> factories <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> factory <span class="token operator">=</span> factories<span class="token punctuation">[</span>name<span class="token punctuation">]</span>  <span class="token keyword">let</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token function">factory</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">)</span>  modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> exports  <span class="token keyword">return</span> exports<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  factories<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> factory<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">require</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"addModule"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"minusModule"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  exports<span class="token punctuation">.</span><span class="token function-variable function">minus</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> addModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"addModule"</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result1 <span class="token operator">=</span> addModule<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>  <span class="token keyword">var</span> minusModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"minusModule"</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result2 <span class="token operator">=</span> minusModule<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react 虚拟列表之 FixedSizeList 封装</title>
      <link href="/2023/01/06/012fixedsizelist-feng-zhuang/"/>
      <url>/2023/01/06/012fixedsizelist-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-长列表渲染"><a href="#1-长列表渲染" class="headerlink" title="1. 长列表渲染"></a>1. 长列表渲染</h2><ul><li>如果有海量数据在浏览器里一次性渲染会有以下问题<ul><li>计算时间过长，用户需要长时间等待，体验差</li><li>CPU 处理时间过长，滑动过程中可能卡顿</li><li>GPU 负载过高，渲染不过来会出现闪动</li><li>内存占用过多，严重会引起浏览器卡死和崩溃</li></ul></li><li>优化方法<ul><li>下拉底部加载更多实现懒加载，此方法随着内容越来越多，会引起大量的重排和重绘，依赖可能会卡顿</li><li>虚拟列表 其实我们的屏幕可视区域是有限的，能看到的数据也是有限的,所以可以在用户滚动时，只渲染可视区域内的内容即可,不可见区域用空白占位填充, 这样的话页面中的 DOM 元素少，CPU、GPU 和内存负载小</li></ul></li></ul><h2 id="2-长列表组件"><a href="#2-长列表组件" class="headerlink" title="2.长列表组件"></a>2.长列表组件</h2><ul><li><a href="https://github.com/bvaughn/react-virtualized">react-virtualized</a></li><li><a href="https://github.com/bvaughn/react-window">react-window</a></li><li><a href="https://react-window.vercel.app/#/examples/list/fixed-size">react-window.vercel.app</a></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm i react<span class="token operator">-</span>window <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-固定高度列表实战"><a href="#3-固定高度列表实战" class="headerlink" title="3. 固定高度列表实战"></a>3. 固定高度列表实战</h2><h3 id="3-1-src-index-js"><a href="#3-1-src-index-js" class="headerlink" title="3.1 src\index.js"></a>3.1 src\index.js</h3><blockquote><p>src\index.js</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom/client"</span><span class="token keyword">import</span> FixedSizeList <span class="token keyword">from</span> <span class="token string">"./fixed-size-list"</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>FixedSizeList <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-fixed-size-list-js"><a href="#3-2-fixed-size-list-js" class="headerlink" title="3.2 fixed-size-list.js"></a>3.2 fixed-size-list.js</h3><blockquote><p>src\fixed-size-list.js</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FixedSizeList <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-window"</span><span class="token keyword">import</span> <span class="token string">"./fixed-size-list.css"</span><span class="token keyword">const</span> <span class="token function-variable function">Row</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> index<span class="token punctuation">,</span> style <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">&#123;</span>index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">"ListItemOdd"</span> <span class="token operator">:</span> <span class="token string">"ListItemEven"</span><span class="token punctuation">&#125;</span> style<span class="token operator">=</span><span class="token punctuation">&#123;</span>style<span class="token punctuation">&#125;</span><span class="token operator">></span>    Row<span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>FixedSizeList      className<span class="token operator">=</span><span class="token string">"List"</span>      height<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">200</span><span class="token punctuation">&#125;</span>      width<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">200</span><span class="token punctuation">&#125;</span>      itemSize<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">50</span><span class="token punctuation">&#125;</span>      itemCount<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1000</span><span class="token punctuation">&#125;</span>    <span class="token operator">></span>      <span class="token punctuation">&#123;</span>Row<span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>FixedSizeList<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-fixed-size-list-css"><a href="#3-3-fixed-size-list-css" class="headerlink" title="3.3 fixed-size-list.css"></a>3.3 fixed-size-list.css</h3><blockquote><p>src\fixed-size-list.css</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.List</span> <span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid gray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.ListItemEven,.ListItemOdd</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.ListItemOdd</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightcoral<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.ListItemEven</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-FixedSizeList实现"><a href="#4-FixedSizeList实现" class="headerlink" title="4.FixedSizeList实现"></a>4.<code>FixedSizeList</code>实现</h2><h3 id="4-1-全部渲染"><a href="#4-1-全部渲染" class="headerlink" title="4. 1 全部渲染"></a>4. 1 全部渲染</h3><blockquote><p>首先实现传入的数据页面全部渲染</p></blockquote><p><img src="https://static.zhufengpeixun.com/reactwindowfixed_1651225094542.jpg" alt="原理"></p><h4 id="4-1-1fixed-size-list-js"><a href="#4-1-1fixed-size-list-js" class="headerlink" title="4.1 .1fixed-size-list.js"></a>4.1 .1fixed-size-list.js</h4><p>src\fixed-size-list.js</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FixedSizeList <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./react-window"</span><span class="token keyword">import</span> <span class="token string">"./fixed-size-list.css"</span><span class="token keyword">const</span> <span class="token function-variable function">Row</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> index<span class="token punctuation">,</span> style <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">"ListItemOdd"</span> <span class="token operator">:</span> <span class="token string">"ListItemEven"</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>style<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">    Row</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FixedSizeList</span></span>      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>List<span class="token punctuation">"</span></span>      <span class="token attr-name">height</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">200</span><span class="token punctuation">&#125;</span></span>      <span class="token attr-name">width</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">200</span><span class="token punctuation">&#125;</span></span>      <span class="token attr-name">itemSize</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">50</span><span class="token punctuation">&#125;</span></span>      <span class="token attr-name">itemCount</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">1000</span><span class="token punctuation">&#125;</span></span>    <span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>Row<span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FixedSizeList</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-react-window-index-js"><a href="#4-1-2-react-window-index-js" class="headerlink" title="4.1.2 react-window\index.js"></a>4.1.2 react-window\index.js</h4><p>src\react-window\index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> <span class="token keyword">default</span> <span class="token keyword">as</span> FixedSizeList <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./FixedSizeList"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-1-3-FixedSizeList-js"><a href="#4-1-3-FixedSizeList-js" class="headerlink" title="4.1.3 FixedSizeList.js"></a>4.1.3 FixedSizeList.js</h4><p>src\react-window\FixedSizeList.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> createListComponent <span class="token keyword">from</span> <span class="token string">"./createListComponent"</span><span class="token keyword">const</span> FixedSizeList <span class="token operator">=</span> <span class="token function">createListComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">getItemSize</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> itemSize <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> itemSize<span class="token punctuation">,</span> <span class="token comment">//每个条目的高度</span>  <span class="token function-variable function">getEstimatedTotalSize</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> itemSize<span class="token punctuation">,</span> itemCount <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> itemSize <span class="token operator">*</span> itemCount<span class="token punctuation">,</span> <span class="token comment">//获取预计的总高度</span>  <span class="token function-variable function">getItemOffset</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> itemSize <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> itemSize <span class="token operator">*</span> index<span class="token punctuation">,</span> <span class="token comment">//获取每个条目的偏移量</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> FixedSizeList<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-4-createListComponent-js"><a href="#4-1-4-createListComponent-js" class="headerlink" title="4.1.4 createListComponent.js"></a>4.1.4 createListComponent.js</h4><p>src\react-window\createListComponent.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createListComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  getEstimatedTotalSize<span class="token punctuation">,</span> <span class="token comment">//获取预计的总高度</span>  getItemSize<span class="token punctuation">,</span> <span class="token comment">//每个条目的高度</span>  getItemOffset<span class="token punctuation">,</span> <span class="token comment">//获取每个条目的偏移量</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> itemCount<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> ComponentType <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props      <span class="token keyword">const</span> containerStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"relative"</span><span class="token punctuation">,</span>        width<span class="token punctuation">,</span>        height<span class="token punctuation">,</span>        <span class="token literal-property property">overflow</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>        <span class="token literal-property property">willChange</span><span class="token operator">:</span> <span class="token string">"transform"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> contentStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token function">getEstimatedTotalSize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">"100%"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>itemCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> itemCount<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>            <span class="token operator">&lt;</span>ComponentType              key<span class="token operator">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span>              index<span class="token operator">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span>              style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getItemStyle</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>            <span class="token operator">/</span><span class="token operator">></span>          <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">&#123;</span>containerStyle<span class="token punctuation">&#125;</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">&#123;</span>contentStyle<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>items<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取每个item的样式</span>    <span class="token function-variable function">_getItemStyle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">"100%"</span><span class="token punctuation">,</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token function">getItemSize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token function">getItemOffset</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> style    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-渲染首屏"><a href="#4-2-渲染首屏" class="headerlink" title="4.2. 渲染首屏"></a>4.2. 渲染首屏</h2><h3 id="4-2-1-FixedSizeList-js"><a href="#4-2-1-FixedSizeList-js" class="headerlink" title="4.2.1 FixedSizeList.js"></a>4.2.1 FixedSizeList.js</h3><p>src\react-window\FixedSizeList.js</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">import createListComponent from './createListComponent';const FixedSizeList = createListComponent(&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   getItemSize: (&#123; itemSize &#125;) => itemSize,//每个条目的高度</span><span class="token prefix unchanged"> </span><span class="token line">   getEstimatedTotalSize: (&#123; itemSize, itemCount &#125;) => itemSize * itemCount, //获取预计的总高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemOffset: (&#123; itemSize &#125;, index) => itemSize * index, //获取每个条目的偏移量</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   getStartIndexForOffset: (&#123; itemSize &#125;, offset) => Math.floor(offset / itemSize),//获取起始索引</span><span class="token prefix inserted">+</span><span class="token line">   getStopIndexForStartIndex: (&#123; height, itemSize &#125;, startIndex) => &#123;//获取结束索引</span><span class="token prefix inserted">+</span><span class="token line">       const numVisibleItems = Math.ceil(height / itemSize);</span><span class="token prefix inserted">+</span><span class="token line">       return startIndex + numVisibleItems - 1;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span>&#125;);export default FixedSizeList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-2-createListComponent-js"><a href="#4-2-2-createListComponent-js" class="headerlink" title="4.2.2 createListComponent.js"></a>4.2.2 createListComponent.js</h3><p>src\react-window\createListComponent.js</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">import React from 'react';export default function createListComponent(&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   getEstimatedTotalSize,//获取预计的总高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemSize,//每个条目的高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemOffset,//获取每个条目的偏移量</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   getStartIndexForOffset,</span><span class="token prefix inserted">+</span><span class="token line">   getStopIndexForStartIndex</span></span>&#125;) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return class extends React.Component &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       state = &#123; scrollOffset: 0 &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       render() &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const &#123; width, height, itemCount, children: ComponentType &#125; = this.props;</span><span class="token prefix unchanged"> </span><span class="token line">           const containerStyle = &#123; position: 'relative', width, height, overflow: 'auto', willChange: 'transform' &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           const contentStyle = &#123; height: getEstimatedTotalSize(this.props), width: '100%' &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           const items = [];</span><span class="token prefix unchanged"> </span><span class="token line">           if (itemCount > 0) &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">               const [startIndex, stopIndex] = this._getRangeToRender();</span><span class="token prefix inserted">+</span><span class="token line">               for (let index = startIndex; index &lt;= stopIndex; index++) &#123;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">                   items.push(</span><span class="token prefix unchanged"> </span><span class="token line">                       &lt;ComponentType key=&#123;index&#125; index=&#123;index&#125; style=&#123;this._getItemStyle(index)&#125; /></span><span class="token prefix unchanged"> </span><span class="token line">                   );</span><span class="token prefix unchanged"> </span><span class="token line">               &#125;</span><span class="token prefix unchanged"> </span><span class="token line">           &#125;</span><span class="token prefix unchanged"> </span><span class="token line">           return (</span><span class="token prefix unchanged"> </span><span class="token line">               &lt;div style=&#123;containerStyle&#125;></span><span class="token prefix unchanged"> </span><span class="token line">                   &lt;div style=&#123;contentStyle&#125;></span><span class="token prefix unchanged"> </span><span class="token line">                       &#123;items&#125;</span><span class="token prefix unchanged"> </span><span class="token line">                   &lt;/div></span><span class="token prefix unchanged"> </span><span class="token line">               &lt;/div></span><span class="token prefix unchanged"> </span><span class="token line">           )</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       _getItemStyle = (index) => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const style = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">               position: 'absolute',</span><span class="token prefix unchanged"> </span><span class="token line">               width: '100%',</span><span class="token prefix unchanged"> </span><span class="token line">               height: getItemSize(this.props),</span><span class="token prefix unchanged"> </span><span class="token line">               top: getItemOffset(this.props, index)</span><span class="token prefix unchanged"> </span><span class="token line">           &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           return style;</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       _getRangeToRender = () => &#123;</span><span class="token prefix inserted">+</span><span class="token line">           const &#123; scrollOffset &#125; = this.state;</span><span class="token prefix inserted">+</span><span class="token line">           const startIndex = getStartIndexForOffset(this.props, scrollOffset);</span><span class="token prefix inserted">+</span><span class="token line">           const stopIndex = getStopIndexForStartIndex(this.props, startIndex);</span><span class="token prefix inserted">+</span><span class="token line">           return [startIndex, stopIndex];</span><span class="token prefix inserted">+</span><span class="token line">       &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-监听滚动"><a href="#4-3-监听滚动" class="headerlink" title="4.3. 监听滚动"></a>4.3. 监听滚动</h2><h3 id="4-3-1-createListComponent-js"><a href="#4-3-1-createListComponent-js" class="headerlink" title="4.3.1 createListComponent.js"></a>4.3.1 createListComponent.js</h3><p>src\react-window\createListComponent.js</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">import React from 'react';export default function createListComponent(&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   getEstimatedTotalSize,//获取预计的总高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemSize,//每个条目的高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemOffset,//获取每个条目的偏移量</span><span class="token prefix unchanged"> </span><span class="token line">   getStartIndexForOffset,</span><span class="token prefix unchanged"> </span><span class="token line">   getStopIndexForStartIndex</span></span>&#125;) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return class extends React.Component &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       state = &#123; scrollOffset: 0 &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       render() &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const &#123; width, height, itemCount, children: ComponentType &#125; = this.props;</span><span class="token prefix unchanged"> </span><span class="token line">           const containerStyle = &#123; position: 'relative', width, height, overflow: 'auto', willChange: 'transform' &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           const contentStyle = &#123; height: getEstimatedTotalSize(this.props), width: '100%' &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           const items = [];</span><span class="token prefix unchanged"> </span><span class="token line">           if (itemCount > 0) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">               const [startIndex, stopIndex] = this._getRangeToRender();</span><span class="token prefix unchanged"> </span><span class="token line">               for (let index = startIndex; index &lt;= stopIndex; index++) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">                   items.push(</span><span class="token prefix unchanged"> </span><span class="token line">                       &lt;ComponentType key=&#123;index&#125; index=&#123;index&#125; style=&#123;this._getItemStyle(index)&#125; /></span><span class="token prefix unchanged"> </span><span class="token line">                   );</span><span class="token prefix unchanged"> </span><span class="token line">               &#125;</span><span class="token prefix unchanged"> </span><span class="token line">           &#125;</span><span class="token prefix unchanged"> </span><span class="token line">           return (</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">               &lt;div style=&#123;containerStyle&#125; onScroll=&#123;this.onScroll&#125;></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">                   &lt;div style=&#123;contentStyle&#125;></span><span class="token prefix unchanged"> </span><span class="token line">                       &#123;items&#125;</span><span class="token prefix unchanged"> </span><span class="token line">                   &lt;/div></span><span class="token prefix unchanged"> </span><span class="token line">               &lt;/div></span><span class="token prefix unchanged"> </span><span class="token line">           )</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       onScroll = event => &#123;</span><span class="token prefix inserted">+</span><span class="token line">           const &#123; scrollTop &#125; = event.currentTarget;</span><span class="token prefix inserted">+</span><span class="token line">           this.setState(&#123; scrollOffset: scrollTop &#125;);</span><span class="token prefix inserted">+</span><span class="token line">       &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       _getItemStyle = (index) => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const style = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">               position: 'absolute',</span><span class="token prefix unchanged"> </span><span class="token line">               width: '100%',</span><span class="token prefix unchanged"> </span><span class="token line">               height: getItemSize(this.props),</span><span class="token prefix unchanged"> </span><span class="token line">               top: getItemOffset(this.props, index)</span><span class="token prefix unchanged"> </span><span class="token line">           &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           return style;</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       _getRangeToRender = () => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const &#123; scrollOffset &#125; = this.state;</span><span class="token prefix unchanged"> </span><span class="token line">           const startIndex = getStartIndexForOffset(this.props, scrollOffset);</span><span class="token prefix unchanged"> </span><span class="token line">           const stopIndex = getStopIndexForStartIndex(this.props, startIndex);</span><span class="token prefix unchanged"> </span><span class="token line">           return [startIndex, stopIndex]</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-overscan-增加缓存区域"><a href="#4-4-overscan-增加缓存区域" class="headerlink" title="4.4. overscan (增加缓存区域)"></a>4.4. overscan (增加缓存区域)</h2><ul><li>过扫描实质上是切断图片的边缘，以确保所有重要的东西显示在屏幕上 <img src="https://static.zhufengpeixun.com/Overscan_1651392914894.png" alt="img"></li></ul><h3 id="4-4-1-createListComponent-js"><a href="#4-4-1-createListComponent-js" class="headerlink" title="4.4.1 createListComponent.js"></a>4.4.1 createListComponent.js</h3><p>src\react-window\createListComponent.js</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">import React from 'react';export default function createListComponent(&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   getEstimatedTotalSize,//获取预计的总高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemSize,//每个条目的高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemOffset,//获取每个条目的偏移量</span><span class="token prefix unchanged"> </span><span class="token line">   getStartIndexForOffset,</span><span class="token prefix unchanged"> </span><span class="token line">   getStopIndexForStartIndex</span></span>&#125;) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return class extends React.Component &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       static defaultProps = &#123;</span><span class="token prefix inserted">+</span><span class="token line">           overscanCount: 2</span><span class="token prefix inserted">+</span><span class="token line">       &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       state = &#123; scrollOffset: 0 &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       render() &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const &#123; width, height, itemCount, children: ComponentType &#125; = this.props;</span><span class="token prefix unchanged"> </span><span class="token line">           const containerStyle = &#123; position: 'relative', width, height, overflow: 'auto', willChange: 'transform' &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           const contentStyle = &#123; height: getEstimatedTotalSize(this.props), width: '100%' &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           const items = [];</span><span class="token prefix unchanged"> </span><span class="token line">           if (itemCount > 0) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">               const [startIndex, stopIndex] = this._getRangeToRender();</span><span class="token prefix unchanged"> </span><span class="token line">               for (let index = startIndex; index &lt;= stopIndex; index++) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">                   items.push(</span><span class="token prefix unchanged"> </span><span class="token line">                       &lt;ComponentType key=&#123;index&#125; index=&#123;index&#125; style=&#123;this._getItemStyle(index)&#125; /></span><span class="token prefix unchanged"> </span><span class="token line">                   );</span><span class="token prefix unchanged"> </span><span class="token line">               &#125;</span><span class="token prefix unchanged"> </span><span class="token line">           &#125;</span><span class="token prefix unchanged"> </span><span class="token line">           return (</span><span class="token prefix unchanged"> </span><span class="token line">               &lt;div style=&#123;containerStyle&#125; onScroll=&#123;this.onScroll&#125;></span><span class="token prefix unchanged"> </span><span class="token line">                   &lt;div style=&#123;contentStyle&#125;></span><span class="token prefix unchanged"> </span><span class="token line">                       &#123;items&#125;</span><span class="token prefix unchanged"> </span><span class="token line">                   &lt;/div></span><span class="token prefix unchanged"> </span><span class="token line">               &lt;/div></span><span class="token prefix unchanged"> </span><span class="token line">           )</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       onScroll = event => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const &#123; scrollTop &#125; = event.currentTarget;</span><span class="token prefix unchanged"> </span><span class="token line">           this.setState(&#123; scrollOffset: scrollTop &#125;);</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       _getItemStyle = (index) => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const style = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">               position: 'absolute',</span><span class="token prefix unchanged"> </span><span class="token line">               width: '100%',</span><span class="token prefix unchanged"> </span><span class="token line">               height: getItemSize(this.props),</span><span class="token prefix unchanged"> </span><span class="token line">               top: getItemOffset(this.props, index)</span><span class="token prefix unchanged"> </span><span class="token line">           &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           return style;</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       _getRangeToRender = () => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const &#123; scrollOffset &#125; = this.state;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">           const &#123; itemCount, overscanCount &#125; = this.props;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">           const startIndex = getStartIndexForOffset(this.props, scrollOffset);</span><span class="token prefix unchanged"> </span><span class="token line">           const stopIndex = getStopIndexForStartIndex(this.props, startIndex);</span><span class="token prefix unchanged"> </span><span class="token line">           return [</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">               Math.max(0, startIndex - overscanCount),</span><span class="token prefix inserted">+</span><span class="token line">               Math.max(0, Math.min(itemCount - 1, stopIndex + overscanCount)),</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">               startIndex, stopIndex]</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> react全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器缓存机制介绍与缓存策略剖析</title>
      <link href="/2023/01/06/011-liu-lan-qi-de-huan-cun-ji-zhi/"/>
      <url>/2023/01/06/011-liu-lan-qi-de-huan-cun-ji-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>缓存可以减少网络  <code>IO</code>  消耗，提高访问速度。浏览器缓存是一种操作简单、效果显著的前端性能优化手段。对于这个操作的必要性，Chrome 官方给出的解释似乎更有说服力一些：</p></blockquote><blockquote><p>通过网络获取内容既速度缓慢又开销巨大。较大的响应需要在客户端与服务器之间进行多次往返通信，这会延迟浏览器获得和处理内容的时间，还会增加访问者的流量费用。因此，缓存并重复利用之前获取的资源的能力成为性能优化的一个关键方面。</p></blockquote><ul><li>很多时候，大家倾向于将浏览器缓存简单地理解为“HTTP 缓存”。但事实上，浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下：</li></ul><ol><li> <code>Memory Cache</code></li><li> <code>Service Worker Cache</code></li><li> <code>HTTP Cache</code></li><li> <code>Push Cache</code></li></ol><blockquote><p>大家对  <code>HTTP Cache</code>（即  <code>Cache-Control</code>、<code>expires</code>  等字段控制的缓存）应该比较熟悉，如果对其它几种缓存可能还没什么概念，我们可以先来看一张线上网站的  <code>Network</code>  面板截图：</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddfa3219d3f3410fabad2cc0d765dcdf~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><p>我们给  <code>size</code>  这一栏一个特写：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/127ce325ad70464abf9b713d4812fb29~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><blockquote><p>大家注意一下非数字——即形如“（<code>from xxx</code>）”这样的描述——对应的资源，这些资源就是我们通过缓存获取到的。其中，“from memory cache”对标到  <code>Memory Cache</code>  类型，“<code>from ServiceWorker</code>”对标到  <code>Service Worker Cache</code>  类型。至于  <code>Push Cache</code>，这个比较特殊，是  <code>HTTP2</code>  的新特性。</p></blockquote><p>本节将会针对这四个方面各个击破。考虑到 HTTP 缓存是最主要、最具有代表性的缓存策略，也是每一位前端工程师都应该深刻理解掌握的性能优化知识点，我们下面优先针对 HTTP 缓存机制进行剖析。</p><h1 id="HTTP-缓存机制探秘"><a href="#HTTP-缓存机制探秘" class="headerlink" title="HTTP 缓存机制探秘"></a>HTTP 缓存机制探秘</h1><hr><p>HTTP 缓存是我们日常开发中最为熟悉的一种缓存机制。它又分为<strong>强缓存</strong>和<strong>协商缓存</strong>。优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存。</p><h2 id="1-强缓存的特征"><a href="#1-强缓存的特征" class="headerlink" title="1. 强缓存的特征"></a><strong>1. 强缓存的特征</strong></h2><blockquote><p>强缓存是利用  <code>http</code>  头中的  <code>Expires</code>  和  <code>Cache-Control</code>  两个字段来控制的。强缓存中，当请求再次发出时，浏览器会根据其中的  <code>expires</code>  和  <code>cache-control</code>  判断目标资源是否“命中”强缓存，若命中则直接从缓存中获取资源，<strong>不会再与服务端发生通信。</strong></p></blockquote><p>命中强缓存的情况下，返回的  <code>HTTP</code>  状态码为  <code>200</code> （如下图）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fb3ff675124489484fe40580bf90a4d~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><h2 id="2-强缓存的实现：从-expires-到-cache-control"><a href="#2-强缓存的实现：从-expires-到-cache-control" class="headerlink" title="2. 强缓存的实现：从 expires 到 cache-control"></a><strong>2. 强缓存的实现：从 expires 到 cache-control</strong></h2><ul><li>实现强缓存，过去我们一直用  <code>expires</code>。</li><li>当服务器返回响应时，在  <code>Response Headers</code>  中将过期时间写入  <code>expires</code>  字段。像这样：</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6157f49ca998455fbfbada92149b0f08~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><p>我们给  <code>expires</code>  一个特写：</p><pre class="line-numbers language-none"><code class="language-none">expires: Wed, 11 Sep 2019 16:12:18 GMT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><ul><li>可以看到，<code>expires</code>  是一个时间戳，接下来如果我们试图再次向服务器请求资源，浏览器就会先对比本地时间和  <code>expires</code>  的时间戳，如果本地时间小于  <code>expires</code>  设定的过期时间，那么就直接去缓存中取这个资源。</li><li>从这样的描述中大家也不难猜测，<code>expires</code>  是有问题的，它最大的问题在于对“本地时间”的依赖。如果服务端和客户端的时间设置可能不同，或者我直接手动去把客户端的时间改掉，那么  <code>expires</code>  将无法达到我们的预期。</li><li>考虑到  <code>expires</code>  的局限性，<code>HTTP1.1</code>  新增了  <code>Cache-Control</code>  字段来完成  <code>expires</code>  的任务。<br>expires 能做的事情，Cache-Control 都能做；<code>expires</code>  完成不了的事情，<code>Cache-Control</code>  也能做。因此，<code>Cache-Control</code>  可以视作是  <code>expires</code>  的<strong>完全替代方案</strong>。在当下的前端实践里，我们继续使用  <code>expires</code>  的唯一目的就是<strong>向下兼容</strong>。</li></ul><blockquote><p>现在我们给  <code>Cache-Control</code>  字段一个特写：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">cache-control: max-age&#x3D;31536000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p>如大家所见，在  <code>Cache-Control</code>  中，我们通过  <code>max-age</code>  来控制资源的有效期。<code>max-age</code>  不是一个时间戳，而是一个时间长度。在本例中，<code>max-age</code>  是 31536000 秒，它意味着该资源在 31536000 秒以内都是有效的，完美地规避了时间戳带来的潜在问题。</p></blockquote><p><strong>Cache-Control 相对于 expires 更加准确，它的优先级也更高。当 Cache-Control 与 expires 同时出现时，我们以 Cache-Control 为准。</strong></p><h2 id="3-Cache-Control-应用分析"><a href="#3-Cache-Control-应用分析" class="headerlink" title="3. Cache-Control 应用分析"></a><strong>3. Cache-Control 应用分析</strong></h2><blockquote><p><code>Cache-Control</code>  的神通，可不止于这一个小小的  <code>max-age</code>。如下的用法也非常常见：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">cache-control: max-age&#x3D;3600, s-maxage&#x3D;31536000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><p><strong>s-maxage 优先级高于 max-age，两者同时出现时，优先考虑 s-maxage。如果 s-maxage 未过期，则向代理服务器请求其缓存内容。</strong></p><blockquote><p>这个  <code>s-maxage</code>  不像  <code>max-age</code>  一样为大家所熟知。的确，在项目不是特别大的场景下，<code>max-age</code>  足够用了。但在依赖各种<strong>代理</strong>的大型架构中，我们不得不考虑<strong>代理服务器</strong>的缓存问题。<code>s-maxage</code>  就是用于表示  <code>cache</code>  服务器上（比如  <code>cache CDN</code>）的缓存的有效时间的，并只对  <code>public</code>  缓存有效。</p></blockquote><ul><li>此处应注意这样一个细节：<code>s-maxage</code>仅在代理服务器中生效，客户端中我们只考虑<code>max-age</code></li><li>那么什么是  <code>public</code>  缓存呢？说到这里，<code>Cache-Control</code>  中有一些适合放在一起理解的知识点，我们集中梳理一下：</li></ul><p><strong>3.1 public 与 private</strong></p><ul><li><code>public</code>  与  <code>private</code>  是针对资源是否能够被代理服务缓存而存在的一组对立概念。</li><li>如果我们为资源设置了  <code>public</code>，那么它既可以被浏览器缓存，也可以被代理服务器缓存；如果我们设置了  <code>private</code>，则该资源只能被浏览器缓存。<code>private</code>  为<strong>默认值</strong>。但多数情况下，<code>public</code>  并不需要我们手动设置，比如有很多线上网站的  <code>cache-control</code>  是这样的：</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1852b17ee6ad45d2a36f41256079e56e~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><blockquote><p>设置了  <code>s-maxage</code>，没设置  <code>public</code>，那么  <code>CDN</code>  还可以缓存这个资源吗？答案是肯定的。因为明确的缓存信息（例如“<code>max-age</code>”）已表示响应是可以缓存的。</p></blockquote><p><strong>3.2 no-store 与 no-cache</strong></p><ul><li><code>no-cache</code>  绕开了浏览器：我们为资源设置了  <code>no-cache</code>  后，每一次发起请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期（即走我们下文即将讲解的协商缓存的路线）。</li><li><code>no-store</code>  比较绝情，顾名思义就是不使用任何缓存策略。在  <code>no-cache</code>  的基础上，它连服务端的缓存确认也绕开了，只允许你直接向服务端发送请求、并下载完整的响应。</li></ul><h2 id="4-协商缓存：浏览器与服务器合作之下的缓存策略"><a href="#4-协商缓存：浏览器与服务器合作之下的缓存策略" class="headerlink" title="4. 协商缓存：浏览器与服务器合作之下的缓存策略"></a><strong>4. 协商缓存：浏览器与服务器合作之下的缓存策略</strong></h2><ul><li>协商缓存依赖于服务端与浏览器之间的通信。</li></ul><blockquote><p>协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源。</p></blockquote><p>如果服务端提示缓存资源未改动（<code>Not Modified</code>），资源会被<strong>重定向</strong>到浏览器缓存，<strong>这种情况下网络请求对应的状态码是 304</strong>（如下图）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1386624ba5364d63b29931988a9e8eb5~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><h2 id="5-协商缓存的实现：从-Last-Modified-到-Etag"><a href="#5-协商缓存的实现：从-Last-Modified-到-Etag" class="headerlink" title="5. 协商缓存的实现：从 Last-Modified 到 Etag"></a><strong>5. 协商缓存的实现：从 Last-Modified 到 Etag</strong></h2><blockquote><p><code>Last-Modified</code>  是一个时间戳，如果我们启用了协商缓存，它会在首次请求时随着  <code>Response Headers</code>  返回：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">Last-Modified: Fri, 27 Oct 2017 06:35:57 GMT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p>随后我们每次请求时，会带上一个叫  <code>If-Modified-Since</code>  的时间戳字段，它的值正是上一次  <code>response</code>  返回给它的  <code>last-modified</code>  值：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">If-Modified-Since: Fri, 27 Oct 2017 06:35:57 GMT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p>服务器接收到这个时间戳后，会比对该时间戳和资源在服务器上的最后修改时间是否一致，从而判断资源是否发生了变化。如果发生了变化，就会返回一个完整的响应内容，并在  <code>Response Headers</code>  中添加新的  <code>Last-Modified</code>值；否则，返回如上图的  <code>304</code>  响应，<code>Response Headers</code>  不会再添加  <code>Last-Modified</code>  字段。</p></blockquote><p><strong>使用 Last-Modified 存在一些弊端，这其中最常见的就是这样两个场景：</strong></p><ul><li>我们编辑了文件，但文件的内容没有改变。服务端并不清楚我们是否真正改变了文件，它仍然通过最后编辑时间进行判断。因此这个资源在再次被请求时，会被当做新资源，进而引发一次完整的响应——不该重新请求的时候，也会重新请求。</li><li>当我们修改文件的速度过快时（比如花了  <code>100ms</code>  完成了改动），由于  <code>If-Modified-Since</code>  只能检查到以秒为最小计量单位的时间差，所以它是感知不到这个改动的——该重新请求的时候，反而没有重新请求了。</li></ul><blockquote><p>这两个场景其实指向了同一个  <code>bug</code>——服务器并没有正确感知文件的变化。为了解决这样的问题，<code>Etag</code>  作为  <code>Last-Modified</code>  的补充出现了。</p></blockquote><ul><li><code>Etag</code>  是由服务器为每个资源生成的唯一的<strong>标识字符串</strong>，这个标识字符串是基于文件内容编码的，只要文件内容不同，它们对应的  <code>Etag</code>  就是不同的，反之亦然。因此  <code>Etag</code>  能够精准地感知文件的变化。</li><li><code>Etag</code>  和  <code>Last-Modified</code>  类似，当首次请求时，我们会在响应头里获取到一个最初的标识符字符串，举个 🌰，它可以是这样的：</li></ul><pre class="line-numbers language-none"><code class="language-none">ETag: W&#x2F;&quot;2a3b-1602480f459&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><p>那么下一次请求时，请求头里就会带上一个值相同的、名为  <code>if-None-Match</code>  的字符串供服务端比对了：</p><pre class="line-numbers language-none"><code class="language-none">If-None-Match: W&#x2F;&quot;2a3b-1602480f459&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p><code>Etag</code>  的生成过程需要服务器额外付出开销，会影响服务端的性能，这是它的弊端。因此启用  <code>Etag</code>  需要我们审时度势。正如我们刚刚所提到的——<code>Etag</code>  并不能替代  <code>Last-Modified</code>，它只能作为  <code>Last-Modified</code>  的补充和强化存在。 <strong>Etag 在感知文件变化上比 Last-Modified 更加准确，优先级也更高。当 Etag 和 Last-Modified 同时存在时，以 Etag 为准。</strong></p></blockquote><h1 id="HTTP-缓存决策指南"><a href="#HTTP-缓存决策指南" class="headerlink" title="HTTP 缓存决策指南"></a>HTTP 缓存决策指南</h1><blockquote><p>行文至此，当代 HTTP 缓存技术用到的知识点，我们已经从头到尾挖掘了一遍了。那么在面对一个具体的缓存需求时，我们到底该怎么决策呢？</p></blockquote><p>走到决策建议这一步，我本来想给大家重新画一个流程图。但是画来画去终究不如 Chrome 官方给出的这张清晰、权威：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f5262ee53ab4ae1a2ac27e56ce5bf9c~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><p><strong>我们现在一起解读一下这张流程图：</strong></p><ul><li>当我们的资源内容不可复用时，直接为  <code>Cache-Control</code>  设置  <code>no-store</code>，拒绝一切形式的缓存；否则考虑是否每次都需要向服务器进行缓存有效确认，如果需要，那么设  <code>Cache-Control</code>  的值为  <code>no-cache</code>；否则考虑该资源是否可以被代理服务器缓存，根据其结果决定是设置为  <code>private</code>  还是  <code>public</code>；然后考虑该资源的过期时间，设置对应的  <code>max-age</code>  和  <code>s-maxage</code>  值；最后，配置协商缓存需要用到的  <code>Etag</code>、<code>Last-Modified</code>  等参数。</li><li>个人非常推崇这张流程图给出的决策建议，也强烈推荐大家在理解以上知识点的基础上，将这张图保存下来、在日常开发中用用看，它的可行度非常高。</li></ul><p>OK，走到这里，本节最大的一座山已经被大家翻过去了。接下来的内容会相对比较轻松，大家放松心情，我们继续前行！</p><h2 id="MemoryCache"><a href="#MemoryCache" class="headerlink" title="MemoryCache"></a>MemoryCache</h2><ul><li><code>MemoryCache</code>，是指存在内存中的缓存。从优先级上来说，它是浏览器最先尝试去命中的一种缓存。从效率上来说，它是响应速度最快的一种缓存。</li><li>内存缓存是快的，也是“短命”的。它和渲染进程“生死相依”，当进程结束后，也就是 tab 关闭以后，内存里的数据也将不复存在。</li></ul><p>那么哪些文件会被放入内存呢？</p><ul><li>事实上，这个划分规则，一直以来是没有定论的。不过想想也可以理解，内存是有限的，很多时候需要先考虑即时呈现的内存余量，再根据具体的情况决定分配给内存和磁盘的资源量的比重——资源存放的位置具有一定的随机性。</li><li>虽然划分规则没有定论，但根据日常开发中观察的结果，包括我们开篇给大家展示的  <code>Network</code>截图，我们至少可以总结出这样的规律：资源存不存内存，浏览器秉承的是“节约原则”。我们发现，<code>Base64</code>  格式的图片，几乎永远可以被塞进  <code>memory cache</code>，这可以视作浏览器为节省渲染开销的“自保行为”；此外，体积不大的  <code>JS</code>、<code>CSS</code>  文件，也有较大地被写入内存的几率——相比之下，较大的  <code>JS</code>、<code>CSS</code>  文件就没有这个待遇了，内存资源是有限的，它们往往被直接甩进磁盘。</li></ul><h2 id="Service-Worker-Cache"><a href="#Service-Worker-Cache" class="headerlink" title="Service Worker Cache"></a>Service Worker Cache</h2><blockquote><p><code>Service Worker</code>  是一种独立于主线程之外的 Javascript 线程。它脱离于浏览器窗体，因此无法直接访问 DOM。这样独立的个性使得  <code>Service Worker</code>  的“个人行为”无法干扰页面的性能，这个“幕后工作者”可以帮我们实现离线缓存、消息推送和网络代理等功能。我们借助  <code>Service worker</code>  实现的离线缓存就称为  <code>Service Worker Cache</code>。</p></blockquote><ul><li><code>Service Worker</code>  的生命周期包括  <code>install</code>、<code>active</code>、<code>working</code>  三个阶段。一旦  <code>Service Worker</code>  被  <code>install</code>，它将始终存在，只会在  <code>active</code>  与  <code>working</code>  之间切换，除非我们主动终止它。这是它可以用来实现离线存储的重要先决条件。</li><li>下面我们就通过实战的方式，一起见识一下  <code>Service Worker</code>  如何为我们实现离线缓存（注意看注释）： 我们首先在入口文件中插入这样一段 JS 代码，用以判断和引入  <code>Service Worker</code>：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>serviceWorker  <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"/test.js"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"注册成功"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"注册失败"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p>在  <code>test.js</code>  中，我们进行缓存的处理。假设我们需要缓存的文件分别是  <code>test.html</code>,<code>test.css</code>  和  <code>test.js</code>：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Service Worker会监听 install事件，我们在其对应的回调里可以实现初始化的逻辑</span>self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"install"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>    <span class="token comment">// 考虑到缓存也需要更新，open内传入的参数为缓存的版本号</span>    caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test-v1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cache</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token comment">// 此处传入指定的需缓存的文件名</span>        <span class="token string">"/test.html"</span><span class="token punctuation">,</span>        <span class="token string">"/test.css"</span><span class="token punctuation">,</span>        <span class="token string">"/test.js"</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Service Worker会监听所有的网络请求，网络请求的产生触发的是fetch事件，我们可以在其对应的监听函数中实现对请求的拦截，进而判断是否有对应到该请求的缓存，实现从Service Worker中取到缓存的目的</span>self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"fetch"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  event<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span>    <span class="token comment">// 尝试匹配该请求对应的缓存值</span>    caches<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果匹配到了，调用Server Worker缓存</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res      <span class="token punctuation">&#125;</span>      <span class="token comment">// 如果没匹配到，向服务端发起这个资源请求</span>      <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response <span class="token operator">||</span> response<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> response        <span class="token punctuation">&#125;</span>        <span class="token comment">// 请求成功的话，将请求缓存起来。</span>        caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test-v1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cache</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><p><strong>PS</strong>：大家注意  <code>Server Worker</code>  对协议是有要求的，必须以  <code>https</code>  协议为前提。</p><h2 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h2><blockquote><p>预告：本小节定位为基础科普向，对 Push Cache 有深入挖掘兴趣的同学，强烈推荐拓展阅读 Chrome 工程师 Jake Archibald 的这篇  <a href="https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/" title="HTTP/2 push is tougher than I thought (opens new window)">HTTP/2 push is tougher than I thought (opens new window)</a>。</p></blockquote><ul><li><code>Push Cache</code>  是指  <code>HTTP2</code>  在  <code>server push</code>  阶段存在的缓存。这块的知识比较新，应用也还处于萌芽阶段，我找了好几个网站也没找到一个合适的案例来给大家做具体的介绍。但应用范围有限不代表不重要——<code>HTTP2</code>  是趋势、是未来。在它还未被推而广之的此时此刻，我仍希望大家能对  <code>Push Cache</code>  的关键特性有所了解：</li></ul><!----><ul><li><code>Push Cache</code>  是缓存的最后一道防线。浏览器只有在  <code>Memory Cache</code>、<code>HTTP Cache</code>  和  <code>Service Worker Cache</code>  均未命中的情况下才会去询问  <code>Push Cache</code>。</li><li><code>Push Cache</code>  是一种存在于会话阶段的缓存，当  <code>session</code>  终止时，缓存也随之释放。</li><li>不同的页面只要共享了同一个  <code>HTTP2</code>  连接，那么它们就可以共享同一个  <code>Push Cache</code>。</li></ul><p>更多的特性和应用，期待大家可以在日后的开发过程中去挖掘和实践。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><blockquote><p>小建议！很多人在学习缓存这块知识的时候可能多少会有这样的感觉：对浏览器缓存，只能描述个大致，却说不上深层原理；好不容易记住了每个字段怎么用，过几天又给忘了。这是因为缓存部分的知识，具有“细碎、迭代快”的特点。对于这样的知识，我们应该尝试先划分出层次和重点，归纳出完整的体系，然后针对每个知识点去各个击破。</p></blockquote><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全问题：CSRF 和 XSS</title>
      <link href="/2023/01/06/010-wang-luo-an-quan/"/>
      <url>/2023/01/06/010-wang-luo-an-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><ul><li><code>CSRF</code>：基本概念、攻击方式、防御措施</li><li><code>XSS</code>：基本概念、攻击方式、防御措施</li></ul><blockquote><p>有人问：<code>SQL</code>注入算吗？答案：这个其实跟前端的关系不是很大。</p></blockquote><h2 id="2-CSRF"><a href="#2-CSRF" class="headerlink" title="2 CSRF"></a>2 CSRF</h2><h3 id="2-1-CSRF-的基本概念、缩写、全称"><a href="#2-1-CSRF-的基本概念、缩写、全称" class="headerlink" title="2.1 CSRF 的基本概念、缩写、全称"></a>2.1 CSRF 的基本概念、缩写、全称</h3><blockquote><p><code>CSRF</code>（<code>Cross-site request forgery</code>）：<strong>跨站请求伪造</strong>。</p></blockquote><h3 id="2-2-CSRF-的攻击原理"><a href="#2-2-CSRF-的攻击原理" class="headerlink" title="2.2 CSRF 的攻击原理"></a>2.2 CSRF 的攻击原理</h3><p><img src="https://s.poetries.work/gitee/2020/07/17.png" alt="img"></p><blockquote><p>用户是网站 A 的注册用户，且登录进去，于是网站 A 就给用户下发<code>cookie</code>。</p></blockquote><p>要完成一次<code>CSRF</code>攻击，受害者必须满足<strong>两个必要的条件</strong>：</p><ol><li>登录受信任网站<code>A</code>，并在本地生成<code>Cookie</code>。（如果用户没有登录网站<code>A</code>，那么网站<code>B</code>在诱导的时候，请求网站<code>A</code>的<code>api</code>接口时，会提示你登录）</li><li>在不登出<code>A</code>的情况下，访问危险网站<code>B</code>（其实是利用了网站<code>A</code>的漏洞）。</li></ol><blockquote><p><code>cookie</code>保证了用户可以处于登录状态，但网站<code>B</code>其实拿不到 <code>cookie</code>。</p></blockquote><p><strong>案例</strong>（钓鱼网站取钱）</p><h3 id="2-3-CSRF-如何防御"><a href="#2-3-CSRF-如何防御" class="headerlink" title="2.3 CSRF 如何防御"></a>2.3 CSRF 如何防御</h3><h4 id="方法一、Token-验证：（用的最多）"><a href="#方法一、Token-验证：（用的最多）" class="headerlink" title="方法一、Token 验证：（用的最多）"></a><strong>方法一、Token 验证：</strong>（用的最多）</h4><ol><li>服务器发送给客户端一个<code>token</code>；</li><li>客户端提交的表单中带着这个<code>token</code>。</li><li>如果这个 <code>token</code> 不合法，那么服务器拒绝这个请求。</li></ol><h4 id="方法二：隐藏令牌："><a href="#方法二：隐藏令牌：" class="headerlink" title="方法二：隐藏令牌："></a><strong>方法二：隐藏令牌：</strong></h4><ul><li>把 <code>token</code> 隐藏在 <code>http</code> 的 <code>head</code>头中。</li></ul><blockquote><p>方法二和方法一有点像，本质上没有太大区别，只是使用方式上有区别。</p></blockquote><h4 id="方法三、Referer-验证："><a href="#方法三、Referer-验证：" class="headerlink" title="方法三、Referer 验证："></a><strong>方法三、Referer 验证：</strong></h4><blockquote><p><code>Referer</code> 指的是页面请求来源。意思是，<strong>只接受本站的请求，服务器才做响应</strong>；如果不是，就拦截。（可以仿造）</p></blockquote><h4 id="方法四、添加验证码（体验不好）"><a href="#方法四、添加验证码（体验不好）" class="headerlink" title="方法四、添加验证码（体验不好）"></a><strong>方法四、添加验证码（体验不好）</strong></h4><blockquote><p>服务端生成图片发送给客户端</p></blockquote><h2 id="3-XSS"><a href="#3-XSS" class="headerlink" title="3 XSS"></a>3 XSS</h2><h3 id="3-1-XSS-的基本概念"><a href="#3-1-XSS-的基本概念" class="headerlink" title="3.1 XSS 的基本概念"></a>3.1 XSS 的基本概念</h3><blockquote><p><code>XSS（Cross Site Scripting）</code>：<strong>跨域脚本攻击</strong>。</p></blockquote><h3 id="3-2-XSS-的攻击原理"><a href="#3-2-XSS-的攻击原理" class="headerlink" title="3.2 XSS 的攻击原理"></a>3.2 XSS 的攻击原理</h3><blockquote><p><code>XSS</code>攻击的核心原理是：不需要你做任何的登录认证，它会通过合法的操作（比如在<code>url</code>中输入、在评论框中输入），向你的页面注入脚本（可能是<code>js</code>、<code>hmtl</code>代码块等）。</p></blockquote><blockquote><p>最后导致的结果可能是：</p></blockquote><ul><li>盗用<code>Cookie</code></li><li>破坏页面的正常结构，插入广告等恶意内容</li><li><code>D-doss</code>攻击（消耗服务器带宽）</li></ul><h3 id="3-3-XSS-的攻击方式和防范措施"><a href="#3-3-XSS-的攻击方式和防范措施" class="headerlink" title="3.3 XSS 的攻击方式和防范措施"></a>3.3 XSS 的攻击方式和防范措施</h3><h4 id="1-反射型（基于后端）"><a href="#1-反射型（基于后端）" class="headerlink" title="1. 反射型（基于后端）"></a>1. 反射型（基于后端）</h4><blockquote><p>发出请求时，<code>XSS</code>代码出现在<code>url</code>中，作为输入提交到服务器端，服务器端解析后响应，<code>XSS</code>代码随响应内容一起传回给浏览器，最后浏览器解析执行<code>XSS</code>代码。这个过程像一次反射，所以叫反射型<code>XSS</code></p></blockquote><p>​ <strong>案例 用户 type 参数传递什么返回什么</strong></p><ul><li><p><code>?type=&lt;script&gt;alart(1)&lt;/script&gt;</code></p></li><li><p>chrome 发现路径存在异常 会有 xss 屏蔽功能</p></li><li><p>诱导用户点击（一次性）拿到用户 cookier</p></li></ul><p><strong>解决方式</strong></p><ul><li>服务端查询参数 加上<code>encodeURLComponent(req.query.type)</code>转码</li></ul><h4 id="2、DOM-Based-不基于后端"><a href="#2、DOM-Based-不基于后端" class="headerlink" title="2、DOM-Based(不基于后端)"></a>2、DOM-Based(不基于后端)</h4><blockquote><p>修改属性 插入内容 document.write…</p></blockquote><p>​ <strong>案例 输入图片地址 然后出现图片</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;img src = '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#url'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token operator">&lt;</span>img src <span class="token operator">=</span><span class="token string">"xxx"</span> onerror<span class="token operator">=</span><span class="token string">"alert(1)"</span> id<span class="token operator">=</span><span class="token string">""</span> <span class="token operator">></span>用户输入 xxx<span class="token string">" onerror="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">" id="</span> 页面就会一直弹框解决方法<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;img src = '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeURL</span><span class="token punctuation">(</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#url'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解决方法：</strong></p><ul><li>客户端对内容进行<code>encodeURL（）</code></li></ul><h4 id="3、存储型（恶意脚本存储到服务器）"><a href="#3、存储型（恶意脚本存储到服务器）" class="headerlink" title="3、存储型（恶意脚本存储到服务器）"></a>3、存储型（恶意脚本存储到服务器）</h4><blockquote><p>存储型<code>XSS</code>和反射型<code>XSS</code>的差别在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求时目标页面时不用再提交 XSS 代码。</p></blockquote><p>​ **案例 ： 评论 功能 **</p><pre class="line-numbers language-none"><code class="language-none">用户评论的的时候添加恶意脚本   存储到服务器然后其他人获取评论列表 就会被脚本攻击  （范围广）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解决方法：</strong></p><ul><li><p>客户端传递给服务器时候，需要校验先过滤一下</p></li><li><p>服务器再做一次过滤</p></li><li><p>直接在输出的时候过滤</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">encodeHtml</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> str    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;amp;"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">"</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;quot;"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">'</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;apos;"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;amp;"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;lt;"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;gt;"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-4-XSS-的防范措施（encode-过滤）"><a href="#3-4-XSS-的防范措施（encode-过滤）" class="headerlink" title="3.4 XSS 的防范措施（encode + 过滤）"></a>3.4 XSS 的防范措施（encode + 过滤）</h3><p><strong>XSS 的防范措施主要有三个：</strong></p><h4 id="1-编码："><a href="#1-编码：" class="headerlink" title="1. 编码："></a><strong>1. 编码</strong>：</h4><blockquote><p>对用户输入的数据进行<code>HTML Entity</code>编码。</p></blockquote><blockquote><p><code>Encode</code>的作用是将<code>$var</code>等一些字符进行转化，使得浏览器在最终输出结果上是一样的。</p></blockquote><h4 id="2、过滤："><a href="#2、过滤：" class="headerlink" title="2、过滤："></a><strong>2、过滤：</strong></h4><ul><li>移除用户输入的和事件相关的属性。如<code>onerror</code>可以自动触发攻击，还有<code>onclick</code>等。（总而言是，过滤掉一些不安全的内容）</li><li>移除用户输入的<code>Style</code>节点、<code>Script</code>节点、<code>Iframe</code>节点。（尤其是<code>Script</code>节点，它可是支持跨域的呀，一定要移除）。</li></ul><h4 id="3、校正"><a href="#3、校正" class="headerlink" title="3、校正"></a><strong>3、校正</strong></h4><ul><li>避免直接对<code>HTML Entity</code>进行解码。</li><li>使用<code>DOM Parse</code>转换，校正不配对的<code>DOM</code>标签。</li></ul><blockquote><p>备注：我们应该去了解一下<code>DOM Parse</code>这个概念，它的作用是把文本解析成<code>DOM</code>结构。</p></blockquote><p>比较常用的做法是，通过第一步的编码转成文本，然后第三步转成<code>DOM</code>对象，然后经过第二步的过滤。</p><p><strong>还有一种简洁的答案：</strong></p><p>首先是<strong>encode，如果是富文本</strong>，就白名单。</p><h2 id="4-CSRF-和-XSS-的区别"><a href="#4-CSRF-和-XSS-的区别" class="headerlink" title="4 CSRF 和 XSS 的区别"></a>4 CSRF 和 XSS 的区别</h2><p><strong>区别一：</strong></p><ul><li><code>CSRF</code>：需要用户先登录网站<code>A</code>，获取 <code>cookie</code></li><li><code>XSS</code>：不需要登录。</li></ul><p><strong>区别二：（原理的区别）</strong></p><ul><li><code>CSRF</code>：是利用网站<code>A</code>本身的漏洞，去请求网站<code>A</code>的<code>api</code>。</li><li><code>XSS</code>：是向网站 <code>A</code> 注入 <code>JS</code>代码，然后执行 <code>JS</code> 里的代码，篡改网站<code>A</code>的内容。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V8 内存管理（垃圾回收机制）</title>
      <link href="/2023/01/04/009v8-nei-cun-guan-li/"/>
      <url>/2023/01/04/009v8-nei-cun-guan-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>V8 也会申请内存，申请的内存又会分为<strong>堆内存和栈内存</strong></p></blockquote><h3 id="1-1-栈"><a href="#1-1-栈" class="headerlink" title="1.1 栈"></a>1.1 栈</h3><ul><li>栈用于存放 JS 中的<strong>基本类型和引用类型指针</strong></li><li>栈的<strong>空间是连续</strong>的，增加删除只需要移动指针，操作速度非常快</li><li>栈的<strong>空间是有限</strong>的，当栈满了，就会抛出一个错误</li><li>栈一般是在<strong>执行函数时创建</strong>的，在函数执行完毕后，栈就会被销毁</li></ul><h3 id="1-2-堆"><a href="#1-2-堆" class="headerlink" title="1.2 堆"></a>1.2 堆</h3><ul><li>堆主要用于存储 JS 中的<strong>引用类型</strong></li></ul><p><img src="https://static.zhufengpeixun.com/dui_de_nei_cun_fen_pei_1639157736483.jpg" alt="new_large_object_space"></p><h4 id="1-2-1-堆空间分类"><a href="#1-2-1-堆空间分类" class="headerlink" title="1.2.1 堆空间分类"></a>1.2.1 堆空间分类</h4><h5 id="1-2-1-1-新生代-new-space"><a href="#1-2-1-1-新生代-new-space" class="headerlink" title="1.2.1.1 新生代(new space)"></a>1.2.1.1 新生代(new space)</h5><ul><li>新生代内存用于存放一些<strong>生命周期比较短的对象数据</strong></li></ul><h5 id="1-2-1-2-老生代-old-space"><a href="#1-2-1-2-老生代-old-space" class="headerlink" title="1.2.1.2 老生代(old space)"></a>1.2.1.2 老生代(old space)</h5><ul><li>老生代内存用于存放一些<strong>生命周期比较长的对象数据</strong></li><li>当<code>new space</code>的对象进行<strong>两个周期的</strong>垃圾回收后，如果数据还存在<code>new space</code>中，则将他们存放到<code>old space</code>中</li><li>Old Space 使<strong>用标记清除</strong>和<strong>标记整理</strong>的方式进行垃圾回收</li></ul><h4 id="1-2-2-什么是垃圾"><a href="#1-2-2-什么是垃圾" class="headerlink" title="1.2.2 什么是垃圾"></a>1.2.2 什么是垃圾</h4><ul><li>在程序运行过程中肯定会用到一些数据，这些数据会放在堆栈中，但是在程序运行结束后，这些数据就不会再被使用了，那些不再使用的数据就是垃圾</li></ul><h4 id="1-2-3-新生代的垃圾回收"><a href="#1-2-3-新生代的垃圾回收" class="headerlink" title="1.2.3 新生代的垃圾回收"></a>1.2.3 新生代的垃圾回收</h4><ul><li>新生代内存有<strong>两个区域</strong>，分别是<strong>对象区域(from) 和 空闲区域(to)</strong></li><li>新生代内存使用<strong>Scavenger 算法</strong>来管理内存,垃圾回收的入口<ul><li><strong>广度优先遍历</strong> From-Space 中的对象，从根对象出发，广度优先遍历所有能到达的对象,把存活的对象复制到 To-Space</li><li>遍历完成后，<strong>清空</strong> From-Space</li><li>From-Space 和 To-Space <strong>角色互换</strong></li></ul></li><li>复制后的对象在 To-Space 中占用的<strong>内存空间是连续的</strong>，<strong>不会出现碎片问题</strong></li><li>这种垃圾回收方式<strong>快速</strong>而又<strong>高效</strong>，但是<strong>会造成空间浪费</strong>（有 To-Space 空闲区域）</li><li>新生代的 <strong>GC 比较频繁</strong></li><li><strong>新生代的对象转移到老生</strong>代称为<strong>晋升 Promote</strong>,判断晋升的情况有两种<ul><li>经过<strong>一次 GC</strong> 还存活的对象</li><li>对象复制到 To-Space 时，To-Space 的<strong>空间达到一定的限制</strong>（超过 25%）</li></ul></li></ul><h4 id="1-2-4-老生代的垃圾回收"><a href="#1-2-4-老生代的垃圾回收" class="headerlink" title="1.2.4 老生代的垃圾回收"></a>1.2.4 老生代的垃圾回收</h4><blockquote><p>V8 在老生代中的垃圾回收策略采用<strong>Mark-Sweep(标记清除)和 Mark-Compact(标记整理)相结合</strong></p></blockquote><h5 id="1-2-4-1-Mark-Sweep-标记清除"><a href="#1-2-4-1-Mark-Sweep-标记清除" class="headerlink" title="1.2.4.1 Mark-Sweep(标记清除)"></a>1.2.4.1 Mark-Sweep(标记清除)</h5><ul><li>标记清除分为<strong>标记和清除两个阶段</strong></li><li>在标记阶段需要遍历**(深度优先遍历**)堆中的所有对象，并<strong>标记</strong>那些<strong>活着的对象</strong>，然后进入清除阶段。在清除阶段总，只<strong>清除没有被标记的对象</strong></li><li>V8 采取的是<strong>黑色和白色来标记数据</strong>，垃圾收集之前，会把所有的数据设置为<strong>白色</strong>，用来标记所有的<strong>尚未标记的对象</strong>，然后会从 GC 根出发，以<strong>深度优先的方式把所有的能访问到的数据都标记为黑色</strong>，遍历结束后黑色的就是活的数据，白色的就是可以清理的垃圾数据</li><li>由于标记清除只清除死亡对象，而死亡对象在老生代中占用的比例很小，所以<strong>效率较高</strong></li><li>标记清除有一个<strong>问题</strong>就是进行一次标记清楚后<strong>，内存空间往往是不连续</strong>的，会出现很多的<strong>内存碎片</strong>。如果后续需要分配一个需要内存空间较多的对象时，如果所有的内存碎片都不够用，就会出现内存溢出的问题</li></ul><h5 id="1-2-4-2-Mark-Compact（标记整理）"><a href="#1-2-4-2-Mark-Compact（标记整理）" class="headerlink" title="1.2.4.2 Mark-Compact（标记整理）"></a>1.2.4.2 Mark-Compact（标记整理）</h5><ul><li>标记整理正是为了<strong>解决标记清除所带来的内存碎片的问题</strong></li><li>标记整理在标记清除的基础进行修改，将其的<strong>清除阶段变为紧缩极端</strong></li><li>在整理的过程中，将活着的对象向内存区的一段移动，移动完成后直接清理掉边界外的内存</li><li>紧缩过程涉及对象的移动，所以<strong>效率并不是太好，</strong>但是能保证不会生成内存碎片，<strong>一般 10 次标记清理会伴随一次标记整理</strong></li></ul><h4 id="1-2-5-优化"><a href="#1-2-5-优化" class="headerlink" title="1.2.5 优化"></a>1.2.5 优化</h4><ul><li>在执行垃圾回收算法期间，JS 脚本需要暂停，这种叫 Stop the world(全停顿)</li><li>如果回收时间过长，会引起卡顿</li><li>性能优化<ul><li>把大任务拆分小任务，分步执行，类似 fiber</li><li>将一些任务放在后台执行，不占用主线程</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">JavaScript执行 垃圾标记、垃圾清理、垃圾整理 JavaScript执行<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>                          <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-2-5-1-Parallel-并行执行"><a href="#1-2-5-1-Parallel-并行执行" class="headerlink" title="1.2.5.1 Parallel(并行执行)"></a>1.2.5.1 Parallel(并行执行)</h5><ul><li><strong>新生代的垃圾回收</strong>采取并行策略提升垃圾回收速度，它会<strong>开启多个辅助线</strong>程来执行新生代的垃圾回收工作</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>辅助线程<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>辅助线程<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>辅助线程<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>                    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-2-5-2-增量标记"><a href="#1-2-5-2-增量标记" class="headerlink" title="1.2.5.2 增量标记"></a>1.2.5.2 增量标记</h5><ul><li>老生代因为对象又大又多，所以垃圾回收的时间更长，采用增量标记的方式进行优化</li><li>增量标记就是把标记<strong>工作分成多个阶段</strong>，每个阶段都只标记一部分对象，和主线程的执行穿插进行</li><li>为了支持增量标记，V8 必须可以支持垃圾回收的<strong>暂停和恢复</strong>，所以采用了<code>黑白灰</code>三色标记法<ul><li>黑色表示这个节点被 GC 根引用到了，而且该节点的子节点都已经标记完成了</li><li>灰色表示这个节点被 GC 根引用到了，但子节点还没被垃圾回收器标记处理，也表明目前正在处理这个节点</li><li>白色表示此节点还没未被垃圾回收器发现，如果在本轮遍历结束时还是白色，那么这块数据就会被收回</li></ul></li><li>引入了灰色标记后，就可以通过判断有没有灰色节点来判断标记是否完成了，如果有灰色节点，下次恢复的应该从灰色节点继续执行</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>开始标记<span class="token operator">--</span><span class="token operator">-</span>增量标记<span class="token operator">--</span><span class="token operator">-</span>增量标记<span class="token operator">--</span><span class="token operator">-</span>清理<span class="token operator">--</span><span class="token operator">-</span>整理<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-2-5-3-Write-barrier-写屏障"><a href="#1-2-5-3-Write-barrier-写屏障" class="headerlink" title="1.2.5.3 Write-barrier(写屏障)"></a>1.2.5.3 Write-barrier(写屏障)</h5><ul><li>当黑色指向白色节点的时候，就会触发写屏障，这个写屏障会把白色节点设置为灰色</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">global<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"a"</span> <span class="token punctuation">&#125;</span>global<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"b1"</span> <span class="token punctuation">&#125;</span><span class="token comment">//执行标记工作</span>global<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"b2"</span> <span class="token punctuation">&#125;</span><span class="token comment">//继续执行标记工作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-2-5-4-Lazy-Sweeping-惰性清理"><a href="#1-2-5-4-Lazy-Sweeping-惰性清理" class="headerlink" title="1.2.5.4 Lazy Sweeping(惰性清理)"></a>1.2.5.4 Lazy Sweeping(惰性清理)</h5><ul><li>当增量标记完成后，如果内存够用，先不清理，等 JS 代码执行完慢慢清理</li></ul><h5 id="1-2-5-5-concurrent-并发回收"><a href="#1-2-5-5-concurrent-并发回收" class="headerlink" title="1.2.5.5 concurrent(并发回收)"></a>1.2.5.5 concurrent(并发回收)</h5><ul><li>其实增量标记和惰性清理并没有减少暂停的总时间</li><li>并发回收就是主线程在执行过程中，辅助线程可以在后台完成垃圾回收工作</li><li>标记操作全都由辅助线程完，清理操作由主线程和辅助线程配合完成</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">         <span class="token operator">--</span><span class="token operator">--</span>辅助线程标记<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>清理整理<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>         <span class="token operator">--</span><span class="token operator">--</span>辅助线程标记<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>清理整理<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>         <span class="token operator">--</span><span class="token operator">--</span>辅助线程标记<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>清理整理<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>执行<span class="token constant">JS</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>清理整理<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的继承</title>
      <link href="/2023/01/03/008js-zhong-de-ji-cheng/"/>
      <url>/2023/01/03/008js-zhong-de-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="一、原型链继承"><a href="#一、原型链继承" class="headerlink" title="一、原型链继承"></a>一、原型链继承</h3><p><strong>构造函数、原型和实例的关系：</strong> 每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而实例有一个内部指针指向原型。</p><p><strong>原型链的基本构想：</strong> 如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数。这样就在实例和原型之间构造了一条原型链</p><p><strong>重点：</strong> 让新实例的原型等于父类的实例。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承 SuperType</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSubValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">&#125;</span><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点：</strong></p><ol><li>实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。</li></ol><p><strong>缺点：</strong></p><ol><li>新实例无法向父类构造函数传参。</li><li>继承单一。(只能继承一个父类构造函数)</li><li>所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原性也会被修改！）</li><li>要想为子类原型新增属性和方法，必须要在<code>new SuperType()</code>这样的语句之后执行</li></ol><p>代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承 SuperType</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// "red,blue,green,black"</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// "red,blue,green,black"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、借用构造函数继承"><a href="#二、借用构造函数继承" class="headerlink" title="二、借用构造函数继承"></a>二、借用构造函数继承</h3><p><strong>重点：</strong> 用.call()和.apply()将父类构造函数引入子类函数（在子类函数中做了父类函数的自执行（复制））</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 继承 SuperType 并传参</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"Nicholas"</span><span class="token punctuation">)</span>  <span class="token comment">// 实例属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// "Nicholas";</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 29</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点：</strong></p><ol><li>只继承了父类构造函数的属性，没有继承父类原型的属性。</li><li>解决了原型链继承缺点 1、2、3。</li><li>可以继承多个构造函数属性（call 多个）。</li><li>在子实例中可向父实例传参。</li><li>解决了引用值问题</li></ol><p><strong>缺点：</strong></p><ol><li>只能继承父类构造函数的属性。</li><li>无法实现构造函数的复用。</li><li>每个新实例都有父类构造函数的副本，臃肿。</li></ol><h3 id="三、组合继承（组合原型链继承和借用构造函数继承）（常用）"><a href="#三、组合继承（组合原型链继承和借用构造函数继承）（常用）" class="headerlink" title="三、组合继承（组合原型链继承和借用构造函数继承）（常用）"></a>三、组合继承（组合原型链继承和借用构造函数继承）（常用）</h3><p><strong>重点：</strong> 结合了两种模式的优点，<strong>传参和复用</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 继承属性</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token comment">//// 第一次调用 SuperType()</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">&#125;</span><span class="token comment">// 继承方法</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 第二次调用 SuperType()</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"instance1=>"</span><span class="token punctuation">,</span> instance1<span class="token punctuation">)</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// "red,blue,green,black"</span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Nicholas";</span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 29</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// "red,blue,green"</span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Greg";</span>instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 27</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点：</strong></p><ol><li>可以继承父类原型上的属性，可以传参，可复用。</li><li>每个新实例引入的构造函数属性是私有的。</li></ol><p><strong>缺点：</strong> 组合继承其实也存在效率问题。最主要的效率问题就是 <strong>父类构造函数始终会被调用两次</strong> ：一次在是创建子类原型时调用，另一次是在子类构造函数中调用</p><h3 id="四、原型式继承"><a href="#四、原型式继承" class="headerlink" title="四、原型式继承"></a>四、原型式继承</h3><p><strong>重点：</strong> 用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object.create()就是这个原理。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//核心代码</span><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>anotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span>anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Rob"</span><span class="token punctuation">)</span><span class="token keyword">let</span> yetAnotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>yetAnotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Linda"</span>yetAnotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Barbie"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// "Shelby,Court,Van,Rob,Barbie"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点：</strong> 类似于复制一个对象，用函数来包装。</p><p><strong>缺点：</strong></p><ol><li><p>所有实例都会继承原型上的属性。</p></li><li><p>无法实现复用。（新实例属性都是后面添加的）</p></li></ol><blockquote><p>原型式继承非常适合不需要单独创建构造函数，但仍然需要在对象间共享信息的场合。但要记住，属性中包含的引用值始终会在相关对象间共享，跟使用原型模式是一样的</p></blockquote><h3 id="五、寄生式继承"><a href="#五、寄生式继承" class="headerlink" title="五、寄生式继承"></a>五、寄生式继承</h3><p><strong>重点：</strong> 就是给原型式继承外面套了个壳子。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span> <span class="token comment">// 通过调用函数创建一个新对象</span>  clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 以某种方式增强这个对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> clone <span class="token comment">// 返回这个对象</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>anotherPerson<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "hi"</span><span class="token comment">//寄生式继承同样适合主要关注对象，而不在乎类型和构造函数的场景。object()函数不是寄生式继承所必需的，任何返回新对象的函数都可以在这里使用。</span><span class="token comment">// 注意 通过寄生式继承给对象添加函数会导致函数难以重用，与构造函数模式类似。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点：</strong> 没有创建自定义类型，因为只是套了个壳子返回对象（这个），这个函数顺理成章就成了创建的新对象。</p><p><strong>缺点：</strong> 没用到原型，无法复用。</p><h3 id="六、寄生组合式继承（常用）"><a href="#六、寄生组合式继承（常用）" class="headerlink" title="六、寄生组合式继承（常用）"></a>六、寄生组合式继承（常用）</h3><p><strong>重点：</strong> 通过<strong>借用构造函数继承属性</strong> ，但使用混合式原型链继承方法。基本思路是不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。说到底就是使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型。</p><p><strong>寄生：</strong> 在函数内返回对象然后调用</p><p><strong>组合：</strong></p><ol><li>函数的原型等于另一个实例。</li><li>在函数中用 apply 或者 call 引入另一个构造函数，可传参</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/*function inheritPrototype(subType, superType) &#123;  let prototype = object(superType.prototype); // 创建对象 prototype.constructor = subType; // 增强对象  subType.prototype = prototype; // 赋值对象&#125;*/</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">&#125;</span><span class="token keyword">let</span> prototype <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 创建对象</span>subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype <span class="token comment">// 赋值对象</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType <span class="token comment">// 修复实例</span><span class="token comment">//inheritPrototype(SubType, SuperType);</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优先：</strong> 修复了组合继承的问题</p><p><strong>缺点：</strong> 实现麻烦</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sentry监控</title>
      <link href="/2022/11/16/007sentry/"/>
      <url>/2022/11/16/007sentry/</url>
      
        <content type="html"><![CDATA[<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><ul><li><p><a href="https://github.com/zhilinYu/zhufeng-public/tree/master/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7monitor/monitor">https://github.com/zhilinYu/zhufeng-public/tree/master/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7monitor/monitor</a></p></li><li><p><a href="https://retechus.atlassian.net/browse/EW-1744">https://retechus.atlassian.net/browse/EW-1744</a></p></li><li><p><a href="https://juejin.cn/post/6856366626750038023">https://juejin.cn/post/6856366626750038023</a></p></li><li><p><a href="https://juejin.cn/post/6844903984457580551">https://juejin.cn/post/6844903984457580551</a></p></li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul><li><p><a href="https://juejin.cn/post/6914530201430917128">https://juejin.cn/post/6914530201430917128</a></p></li><li><p><a href="https://juejin.cn/post/6844904088866390024?share_token=72af2173-7dc5-4301-b2a4-35818b82813b">https://juejin.cn/post/6844904088866390024?share_token=72af2173-7dc5-4301-b2a4-35818b82813b</a></p></li></ul><h2 id="上报-SourceMap-版本号"><a href="#上报-SourceMap-版本号" class="headerlink" title="上报 SourceMap 版本号"></a>上报 SourceMap 版本号</h2><ul><li><p><a href="https://juejin.cn/post/6954303116783124487?share_token=fdac6d5d-73fe-43be-aa02-2930cca74729">https://juejin.cn/post/6954303116783124487?share_token=fdac6d5d-73fe-43be-aa02-2930cca74729</a></p></li><li><p><a href="https://juejin.cn/post/7123518368631652382">https://juejin.cn/post/7123518368631652382</a></p></li></ul><h2 id="手动上报"><a href="#手动上报" class="headerlink" title="手动上报"></a>手动上报</h2><ul><li><a href="https://juejin.cn/post/6957475955858210823">https://juejin.cn/post/6957475955858210823</a></li></ul><h2 id="主动捕获错误"><a href="#主动捕获错误" class="headerlink" title="主动捕获错误"></a>主动捕获错误</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios  <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Sentry<span class="token punctuation">.</span><span class="token function">captureException</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"something went wrong"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><ul><li><a href="https://juejin.cn/post/6919856296522989582">https://juejin.cn/post/6919856296522989582</a></li></ul><h2 id="微前端区分项目"><a href="#微前端区分项目" class="headerlink" title="微前端区分项目"></a>微前端区分项目</h2><ul><li><a href="https://juejin.cn/post/7139452175088320520">https://juejin.cn/post/7139452175088320520</a></li></ul><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><ul><li><p><a href="https://juejin.cn/post/7148364027817623589?share_token=387017f7-9c88-4765-b069-b5a6aff3c36d">https://juejin.cn/post/7148364027817623589?share_token=387017f7-9c88-4765-b069-b5a6aff3c36d</a></p></li><li><p><a href="https://juejin.cn/post/7151753139052347399?share_token=474df17d-1139-403e-b351-766e3ad65ab5">https://juejin.cn/post/7151753139052347399?share_token=474df17d-1139-403e-b351-766e3ad65ab5</a></p></li></ul><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><ul><li><a href="https://juejin.cn/post/7143142055294795807">https://juejin.cn/post/7143142055294795807</a></li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul><li><a href="https://github.com/getsentry/sentry-javascript">https://github.com/getsentry/sentry-javascript</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 性能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文化建设</title>
      <link href="/2022/09/16/005-wen-hua/"/>
      <url>/2022/09/16/005-wen-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="公司文化："><a href="#公司文化：" class="headerlink" title="公司文化："></a>公司文化：</h3><ol><li>Open minded and cooperative - 开放合作，虚心自省</li><li>Simple and direct communication - 不甩锅，不抱怨</li><li>Always seek for truth - 基于事实，追求真理</li><li>Always keep learning, stay humble - 保持学习，保持敬畏</li><li>Mars view - Global team - 火星视角</li></ol><h3 id="团队文化"><a href="#团队文化" class="headerlink" title="团队文化"></a>团队文化</h3><ul><li>自驱协作；</li><li>学习进取；</li><li>积极主动；</li><li>承担责任；</li><li>成就他人；</li><li>往前一步，站在对方立场思考问题；</li><li>拥抱变化、勇于挑战、打破边界（能力、认知），有全局意识！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 文化建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文化建设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连续数组test1</title>
      <link href="/2022/09/16/006-lian-xu-shu-zu/"/>
      <url>/2022/09/16/006-lian-xu-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。</p><p>示例 1:</p><p>输入: nums = [0,1]</p><p>输出: 2</p><p>说明: [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。</p><p>示例 2:</p><p>输入: nums = [0,1,0]</p><p>输出: 2</p><p>说明: [0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。</p><p>var findMaxLength = function(nums) {</p><p>// TODO</p><p>};</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>// 前缀和+哈希表<br>// 由于「0 和 1 的数量相同」等价于「1 的数量减去 0 的数量等于 0」，我们可以将数组中的 0 视作 −1，则原问题转换成「求最长的连续子数组，其元素和为 0」。</p><p>// 由于哈希表存储的是 counter 的每个取值第一次出现的下标，因此当遇到重复的前缀和时，根据当前下标和哈希表中存储的下标计算得到的子数组长度是以当前下标结尾的子数组中满足有相同数量的 0 和 1 的最长子数组的长度。遍历结束时，即可得到 nums 中的有相同数量的 0 和 1 的最长子数组的长度。</p></blockquote><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findMaxLength</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> maxLength <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">////存储newNums的前缀和即可</span>  map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//合为key，索引为value,初始化索引为-1，和为0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      counter<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      counter<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      maxLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> i <span class="token operator">-</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> maxLength<span class="token punctuation">&#125;</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMaxLength</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMaxLength</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件下载</title>
      <link href="/2022/08/17/015-ruan-jian-an-zhuang/"/>
      <url>/2022/08/17/015-ruan-jian-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="脚本之家"><a href="#脚本之家" class="headerlink" title="脚本之家"></a>脚本之家</h2><p><a href="https://www.jb51.net/">脚本之家</a></p><h3 id="Navicat-Premium15"><a href="#Navicat-Premium15" class="headerlink" title="Navicat Premium15"></a><code>Navicat Premium</code>15</h3><p><a href="https://www.jb51.net/article/199525.htm"><code>Navicat Premium15</code>安装及破解教程详解亲测有效(附破解失败解决方案)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node 工具使用</title>
      <link href="/2022/08/17/022-node/"/>
      <url>/2022/08/17/022-node/</url>
      
        <content type="html"><![CDATA[<h2 id="nvm-安装和使用"><a href="#nvm-安装和使用" class="headerlink" title="nvm 安装和使用"></a>nvm 安装和使用</h2><ul><li><a href="http://nvm.uihtm.com/">nvm 一个 nodejs 版本管理工具！</a></li><li><a href="https://nodejs.org/en/">node 官网</a></li><li><a href="https://blog.csdn.net/QWERTYQ16/article/details/124497532">nvm 的简介、安装、使用（简单明了）</a></li><li><a href="https://github.com/coreybutler/nvm-windows/issues/145">安装后，每个命令都失败并显示消息“C:\Users%username%\AppData\Roaming\nvm 找不到或不存在。退出。”</a></li></ul><blockquote><p>常用命令</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 显示可下载版本的部分列表</span>$ nvm list available<span class="token comment"># 安装最新版本 ( 安装时可以在上面看到 node.js 、 npm 相应的版本号 ，不建议安装最新版本)</span>$ nvm install latest<span class="token comment"># 安装指定的版本的nodejs</span>$ nvm install 版本号<span class="token comment"># 查看目前已经安装的版本 （ 当前版本号前面没有 * ， 此时还没有使用任何一个版本，这时使用 node.js 时会报错 ）</span>$ nvm list或 $ nvm ls<span class="token comment"># 使用指定版本的nodejs （ 这时会发现在启用的 node 版本前面有 * 标记，这时就可以使用 node.js ）</span>$ nvm use 版本号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nvm-常见问题"><a href="#nvm-常见问题" class="headerlink" title="nvm 常见问题"></a>nvm 常见问题</h3><p><strong>查看 nvm 路径</strong> <code>nvm root</code></p><blockquote><p>如果下载 node 过慢，请更换国内镜像源, 在 nvm 的安装路径下，找到 settings.txt，设置 node_mirro 与 npm_mirror 为国内镜像地址。下载就飞快了~~</p></blockquote><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">root<span class="token operator">:</span> D<span class="token operator">:</span>\nvmpath<span class="token operator">:</span> D<span class="token operator">:</span>\nodejsnode_mirror<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token operator">/</span>node<span class="token operator">/</span>npm_mirror<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token operator">/</span>npm<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>umi4升级</title>
      <link href="/2022/08/09/016-sheng-ji-umi4/"/>
      <url>/2022/08/09/016-sheng-ji-umi4/</url>
      
        <content type="html"><![CDATA[<p> 工程已经升级到了 umi4（需要安装pnpm, 然后 pnpm install），下面罗列了一些变动须知：</p><h3 id="1、关于包管理器"><a href="#1、关于包管理器" class="headerlink" title="1、关于包管理器"></a>1、关于包管理器</h3><ol><li>换成了 pnpm  <a href="https://juejin.cn/post/7077918263954374670">理由</a></li><li> 和 npm 使用方式一致</li></ol><h3 id="2、关于-umijs-max"><a href="#2、关于-umijs-max" class="headerlink" title="2、关于 @umijs/max"></a>2、关于 @umijs/max</h3><ol><li>umi 和 @umijs/max 都是 umi，只不过 @umijs/max 带业务需要的插件，所以需要使用 @umijs/max</li></ol><h3 id="3、关于路由"><a href="#3、关于路由" class="headerlink" title="3、关于路由"></a>3、关于路由</h3><ol><li>路由从 react-router-dom@5 升级到了 react-router-dom@6  <a href="https://reactrouter.com/docs/en/v6">链接</a></li></ol><h3 id="4、关于-history-和-pathname-链接"><a href="#4、关于-history-和-pathname-链接" class="headerlink" title="4、关于 history 和 pathname  链接"></a>4、关于 history 和 pathname  <a href="https://umijs.org/docs/api/api#history">链接</a></h3><ol><li>umi 中的 history 是静态的，所以获取到的参数有问题。</li><li>pathname/search/hash 通过 window 来取值</li><li>采用 const navigate = useNavigate();  <a href="https://umijs.org/docs/api/api#usenavigate">链接</a></li></ol><h3 id="5、关于-query-参数（search）"><a href="#5、关于-query-参数（search）" class="headerlink" title="5、关于 query 参数（search）"></a>5、关于 query 参数（search）</h3><ol><li>const params = useParams();  <a href="https://umijs.org/docs/api/api#useparams">链接</a></li><li>createSearchParams(location.search)  <a href="https://umijs.org/docs/api/api#createsearchparams">链接</a></li></ol><p><strong>UmiJS 的文档，除了「开发一个 Blog」不看，剩下的都需要过一遍  <a href="https://umijs.org/docs/tutorials/getting-started">链接</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> umi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weekly 004</title>
      <link href="/2022/08/08/004weekly/"/>
      <url>/2022/08/08/004weekly/</url>
      
        <content type="html"><![CDATA[<h2 id="本期文章"><a href="#本期文章" class="headerlink" title="本期文章"></a>本期文章</h2><h3 id="七夕到了，还不快给你女朋友做一个专属-chrome-插件"><a href="#七夕到了，还不快给你女朋友做一个专属-chrome-插件" class="headerlink" title="七夕到了，还不快给你女朋友做一个专属 chrome 插件"></a><a href="https://juejin.cn/post/7122332008252080142">七夕到了，还不快给你女朋友做一个专属 chrome 插件</a></h3><p>七夕节马上就要到了，作为拥有对象（没有的话，可以选择 new 一个出来）的程序员来说，肯定是需要有一点表示才行的。用钱能买到的东西不一定能表达咱们的心意，但是用心去写的代码，还能让对象每天看到那才是最正确的选择。</p><p>除了手机之外，在电脑上使用浏览器搜索想要的东西是最常用的功能了，所以就需要一个打开即用的搜索框，而且还能表达心意的 chrome 标签页来让 TA 随时可用。</p><h3 id="写给前端的跨平台方案、跨端引擎的本质"><a href="#写给前端的跨平台方案、跨端引擎的本质" class="headerlink" title="写给前端的跨平台方案、跨端引擎的本质"></a><a href="https://juejin.cn/post/6966626823912308772">写给前端的跨平台方案、跨端引擎的本质</a></h3><p>近些年来，前端领域的跨端技术越来越多了：react native、weex、flutter、electron、kraken 等等。那么多跨端方案，他们有没有通用的思路？我们能不能从这么多方案中找出本质的原理？</p><p>本文会尝试探究探究以下问题：<br>什么是跨平台<br>有哪些方案是跨平台的<br>跨端和跨平台的区别是什么<br>前端领域有哪些跨端方案<br>跨平台、跨端的通用原理是什么</p><p>本文主要讲述了跨平台的概念、方案、优缺点，以及前端跨端的常见方案和原理，通过这篇文章可以理解跨端和跨平台容器的思路</p><h3 id="lerna-中文教程"><a href="#lerna-中文教程" class="headerlink" title="lerna 中文教程"></a><a href="https://juejin.cn/post/6844903856153821198?share_token=52703fb9-a8a2-4301-956a-31bb3fb19b43">lerna 中文教程</a></h3><p>Lerna 是一个工具，它优化了使用 git 和 npm 管理多包存储库的工作流。本文讲解了工作的两种模式：Fixed/Locked mode (default)和 Independent mode；yarn 的 workspaces 模式；以及各种命令</p><p>让我们简单了解一下如何使用 lerna 来管理一个多包，以及 lerna 的主要配置和命令。</p><h3 id="Git-基础教程-必学"><a href="#Git-基础教程-必学" class="headerlink" title="Git 基础教程(必学)"></a><a href="https://mp.weixin.qq.com/s/0mGBRiG-kOa9rNL3qn9vVQ">Git 基础教程(必学)</a></h3><p>在工作中，发现不少同学对 Git 的掌握非常基础，同样作为版本控制系统，使用好 Git 比 SVN 要更有挑战，需要对 Git 有一定的了解，才能在工作中，驾驭好 Git。</p><p>本文从最简单的基础入门，讲解工作中常用的 Git 基础，掌握这些是 Git 进阶的基础，足够日常工作场景。</p><h3 id="牛逼，一款-996-代码分析工具"><a href="#牛逼，一款-996-代码分析工具" class="headerlink" title="牛逼，一款 996 代码分析工具"></a><a href="https://mp.weixin.qq.com/s?__biz=MzA3MzE4ODY0Mg==&mid=2455993889&idx=1&sn=7233d57b655d882a3e73386abba5e8ac&chksm=88850a6cbff2837a0eee062726b62415836b92c0ee5527a6c8a72993f255fa6bc1095600a5dd#rd">牛逼，一款 996 代码分析工具</a></h3><p>一个代码分析工具 code996，它可以统计 Git 项目的 commit 时间分布，进而推导出这个项目的编码工作强度。这算是一种对项目更了解的方式，杜绝 996 从了解数据开始。</p><p>code996 除了能够分析项目的实际工作强度，也能用来分析我们代码编写的情况，对自身了解自己代码编写效率的时段、最近的工作强度等都是非常好的一个输入</p><h3 id="如何优雅地在-React-中使用-TypeScript，看这一篇就够了！"><a href="#如何优雅地在-React-中使用-TypeScript，看这一篇就够了！" class="headerlink" title="如何优雅地在 React 中使用 TypeScript，看这一篇就够了！"></a><a href="https://juejin.cn/post/7021674818621669389">如何优雅地在 React 中使用 TypeScript，看这一篇就够了！</a></h3><p>本文讲解了 ypeScript 与 React 一起使用时经常遇到的一些类型定义的问题。阅读本文前，希望你能有一定的 React 和 TypeScript 基础。</p><p>你平时如何使用 ts, 鼠标点击事件对象类型是什么? 是不是用的最多的是 any 类型,最后 typescript 用成了 anyscript,typescript 也就失去了它存在的意义,本文将为你讲解如何在 react 中优雅的使用 typescript</p><h3 id="React-State-Hooks-useReducer-useState-useContext"><a href="#React-State-Hooks-useReducer-useState-useContext" class="headerlink" title="React State Hooks: useReducer, useState, useContext"></a><a href="https://www.robinwieruch.de/react-state-usereducer-usestate-usecontext/">React State Hooks: useReducer, useState, useContext</a></h3><p>作为 react 初学者，第一次弄懂了 useReducer, useState, useContext 的用法，在什么时候用，以及三者之间的区别。</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://github.com/aliyunfe/weekly">阿里云 TXD 前端周刊</a></li><li><a href="https://github.com/ascoders/weekly">前端精度周刊</a></li><li><a href="">o2team/tech-weekly</a></li><li><a href="https://github.com/tnfe/TNT-Weekly/">tnfe/TNT-Weekly</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weekly 003</title>
      <link href="/2022/08/01/003weekly/"/>
      <url>/2022/08/01/003weekly/</url>
      
        <content type="html"><![CDATA[<h2 id="本期文章"><a href="#本期文章" class="headerlink" title="本期文章"></a>本期文章</h2><h3 id="成为优秀的-TS-体操高手-之-TS-类型体操前置知识储备"><a href="#成为优秀的-TS-体操高手-之-TS-类型体操前置知识储备" class="headerlink" title="成为优秀的 TS 体操高手 之 TS 类型体操前置知识储备"></a><a href="https://mp.weixin.qq.com/s/AOzZVxftMYEOfvhSFMV_fQ">成为优秀的 TS 体操高手 之 TS 类型体操前置知识储备</a></h3><p>TS 类型体操前置知识储备大概就介绍了 extends,infer,typeof,keyof 和 in,数组的使用,as 关键字</p><p>了解了这部分关键字作用之后，完成 TS 体操练习的中等难度的题目不在话下！（起码完成 80%的题目没得问题），剩下的 20% 还需要学习更多的 TS 体操技巧</p><h3 id="尤雨溪主题演讲《2022-前端生态趋势》全记录"><a href="#尤雨溪主题演讲《2022-前端生态趋势》全记录" class="headerlink" title="尤雨溪主题演讲《2022 前端生态趋势》全记录"></a><a href="https://juejin.cn/post/7123126028838862862">尤雨溪主题演讲《2022 前端生态趋势》全记录</a></h3><p>本文是<a href="https://conf.juejin.cn/xdc2022">第二届稀土开发者大会</a> 尤大关于 《2022 Web 前端生态趋势》 的主题分享整理。</p><p>React Hooks 的推出启发了很多组件逻辑表达和逻辑附用的新范式；但是同时提到了 React Hooks 对开发者存在的心智负担问题；而类 Vue3 的基于依赖追踪的范式重新得到了重视；基于编译的响应式系统和基于编译的运行时优化才是未来。</p><p>rust、go、zig 和 JavaScript 的混合工具链会成为前端构建工具的未来。</p><p>有时间的同学可以看看<a href="https://juejin.cn/live/xdc202201">回放</a></p><p>了解 2022 前端生态趋势；关注未来，适当的调整自己的学习路线、知识体系</p><h3 id="type-与-interface-的区别，你真的懂了吗？"><a href="#type-与-interface-的区别，你真的懂了吗？" class="headerlink" title="type 与 interface 的区别，你真的懂了吗？"></a><a href="https://mp.weixin.qq.com/s/mOB95li-tuaswWliGiYZyw">type 与 interface 的区别，你真的懂了吗？</a></h3><p>在写 ts 相关代码的过程中，总能看到 interface 和 type 的身影。它们的作用好像都一样的，相同的功能用哪一个都可以实现，也都很好用，所以也很少去真正的理解它们之间到底有啥区别， 分别在什么场景下使用，本文作者将带领大家一起探索 TS 中的 interface 和 type。</p><p>interface 和 type 之间的差异不仅仅是次要语法声明。那么，今天我们就来看看这两家伙之间存在啥不可告人的秘密。</p><h3 id="深入理解-Typescript-系列-泛型"><a href="#深入理解-Typescript-系列-泛型" class="headerlink" title="深入理解 Typescript 系列-泛型"></a><a href="https://juejin.cn/post/6996479857559339038">深入理解 Typescript 系列-泛型</a></h3><p>在日常开发中，时长会考虑到方法的复用性，毕竟对于相似的场景拷贝一份代码既增加了代码量还增加了额外的维护成本，要是重构的时候忘了，还会导致不可描述的 bug。</p><p>提高方法的复用性，减少代码维护成本。</p><h3 id="Git-基础教程-必学"><a href="#Git-基础教程-必学" class="headerlink" title="Git 基础教程(必学)"></a><a href="https://mp.weixin.qq.com/s/0mGBRiG-kOa9rNL3qn9vVQ">Git 基础教程(必学)</a></h3><p>在工作中，发现不少同学对 Git 的掌握非常基础，同样作为版本控制系统，使用好 Git 比 SVN 要更有挑战，需要对 Git 有一定的了解，才能在工作中，驾驭好 Git。</p><p>本文从最简单的基础入门，讲解工作中常用的 Git 基础，掌握这些是 Git 进阶的基础，足够日常工作场景。</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://github.com/aliyunfe/weekly">阿里云 TXD 前端周刊</a></li><li><a href="https://github.com/ascoders/weekly">前端精度周刊</a></li><li><a href="">o2team/tech-weekly</a></li><li><a href="https://github.com/tnfe/TNT-Weekly/">tnfe/TNT-Weekly</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weekly 002</title>
      <link href="/2022/07/25/002weekly/"/>
      <url>/2022/07/25/002weekly/</url>
      
        <content type="html"><![CDATA[<h2 id="本期文章"><a href="#本期文章" class="headerlink" title="本期文章"></a>本期文章</h2><h3 id="函数式组件与类组件有何不同？"><a href="#函数式组件与类组件有何不同？" class="headerlink" title="函数式组件与类组件有何不同？"></a><a href="https://juejin.cn/post/7100874690884796447">函数式组件与类组件有何不同？</a></h3><p>详细介绍了函数组件与类组件里 props 的用法，详细介绍了函数组件在一次特定的渲染中捕获那一次渲染所用的 props 或者 state，他们总是会保持一致。在类组件中如果对 this.props 直接引用容易给自己埋坑。</p><p>当我们用函数来编写大部分的 React 代码时，我们需要调整关于优化代码和什么变量会随着时间改变的认知与直觉。</p><h3 id="一行-CSS-代码搞定响应式布局"><a href="#一行-CSS-代码搞定响应式布局" class="headerlink" title="一行 CSS 代码搞定响应式布局"></a><a href="https://mp.weixin.qq.com/s/tGm77W7t2fbLTNNxwlo_EQ">一行 CSS 代码搞定响应式布局</a></h3><p>在这篇文章中，我将教你如何使用 CSS Grid 来创建一个超酷的图像网格图，它将根据屏幕的宽度来改变列的数量。最精彩的地方在于：所有的响应特性被添加到了一行 css 代码中。这意味着我们不必将 HTML 与丑陋的类名(如 col-sm-4, col-md-8)混杂在一起，也不必为每个屏幕创建媒体查询。</p><h3 id="高性能深拷贝"><a href="#高性能深拷贝" class="headerlink" title="高性能深拷贝"></a><a href="https://juejin.cn/post/7122034570043588622">高性能深拷贝</a></h3><p>“说一下深拷贝的实现方式”, 答: “JSON.parse(JSON.stringify())、lodash 的 cloneDeep, 递归遍历…”, 相信我们大多数人在面试的过程中被问到过这个问题, 你是怎么回答的? 递归是不是你的最优解? 本文将为你介绍一种更高性能的深拷贝, 相信学完本文, 你一定能够打动面试官, 让你更轻松的斩获 offer</p><h3 id="前端如何学习更有计划性、提升更稳更快？"><a href="#前端如何学习更有计划性、提升更稳更快？" class="headerlink" title="前端如何学习更有计划性、提升更稳更快？"></a><a href="https://mp.weixin.qq.com/s?__biz=MzI2MjYzMjYwNg==&mid=2247487730&idx=1&sn=4dadced98833aa8b2f04747359dc484f&chksm=ea497503dd3efc153bd9feca2b1db4967a8ac9866335de8a8979568faeeb0ea45849367c9b68#rd">前端如何学习更有计划性、提升更稳更快？</a></h3><p>我们学习是为了自己，是为了真正的解决问题，切忌“假装学习”。虽然系统学习看起来很不错，但从自己的兴趣和工作出发，是更好的学习方向。在具体的学习中，应强调输出，以教为学，每一个困难的地方都是超车的机会，以慢为快，踏实的打牢基础知识点。</p><p>学习是一个系统，我们不能总是依赖意志力，要讲究方法、技巧、环境等，引导自己做事的兴趣、热情和成就感，这样你才会越做越起劲，最后不断地运转下去。</p><ul><li>以教促学</li><li>困难的地方就是你弯道超车的地方</li><li>以慢为快</li><li>坚定的信念</li><li>学习的“反人性”问题</li><li>即时反馈</li><li>合适的环境和氛围</li></ul><h3 id="es2022-新特性提前了解"><a href="#es2022-新特性提前了解" class="headerlink" title="es2022 新特性提前了解"></a><a href="https://juejin.cn/post/7073285958791069704">es2022 新特性提前了解</a></h3><p>新版本的 ECMA Script 将在今年六月成为标准。本文带我们看 ES2022 有什么新特性。</p><p>许多人期待 ES2022（ES13） 会带来哪些新的特性。这篇文章讲解了 es2022 新增的几个特性，一目了然，跟以前的用法有的有些不同，但是用起来更方便了。</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://github.com/aliyunfe/weekly">阿里云 TXD 前端周刊</a></li><li><a href="https://github.com/ascoders/weekly">前端精度周刊</a></li><li><a href="">o2team/tech-weekly</a></li><li><a href="https://github.com/tnfe/TNT-Weekly/">tnfe/TNT-Weekly</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weekly 001111</title>
      <link href="/2022/07/18/001weekly/"/>
      <url>/2022/07/18/001weekly/</url>
      
        <content type="html"><![CDATA[<h2 id="本期文章"><a href="#本期文章" class="headerlink" title="本期文章"></a>本期文章</h2><h3 id="关于代码评审-CodeReview-那些不得不说的事儿"><a href="#关于代码评审-CodeReview-那些不得不说的事儿" class="headerlink" title="关于代码评审(CodeReview)那些不得不说的事儿"></a><a href="https://juejin.cn/post/7100874690884796447">关于代码评审(CodeReview)那些不得不说的事儿</a></h3><p>本文作者在学习了<a href="https://eng-practices-cn.xindoo.xyz/review/index">Google Code Review 指南</a>的基础上；总结了长期做 CodeReview 的好处：提声代码质量、提前发现问题、经验和知识的传递；CodeReview 的关注点：功能性、复杂性、代码风格、文档&amp;注释、代码亮点；还指出了 CodeReview 应该及时；以及注意的礼节，reviewer 写得好的地方也应该点赞；</p><p>本文还指导大家如何才能写出对 CodeReview 友好的代码：提交前先做好自审、写清楚变更描述、单个变更竟可能短；</p><p>关于 CodeReview 的误区该文也做了合理的反驳，例如 CodeReview 是纯浪费时间？工期很紧没时间去做 CodeReivew;只有高级工程师才有资格 Reivewe 别人的代码？都有测试流程了，为什么还要做 CodeReview？有了 CodeReview 就不需要测试了？只要我在团队推行了 CodeReview 流程，代码质量就会迅速提高？</p><h3 id="详解-js-继承的那些事儿"><a href="#详解-js-继承的那些事儿" class="headerlink" title="详解 js 继承的那些事儿"></a><a href="https://blog.csdn.net/qq_34574204/article/details/120716964">详解 js 继承的那些事儿</a></h3><p>本文作者带你学习 js 的继承，原型，原型链的底层知识和原理；你会了解到以下知识什么是继承；为什么要有继承；继承的相关 6 种实现方式及优缺点。</p><h3 id="贪吃蛇小游戏开发思路分享"><a href="#贪吃蛇小游戏开发思路分享" class="headerlink" title="贪吃蛇小游戏开发思路分享"></a><a href="https://juejin.cn/post/7051411538577457183">贪吃蛇小游戏开发思路分享</a></h3><p>如何用数组表示游戏地图，数组的周边嗅探，数组边界检测；还有碰撞检测。看完之后，抖音最火的游戏吃掉那个苹果就可以自己写了。</p><h3 id="TypeScript-泛型中的-K、T、V-等到底是个啥？"><a href="#TypeScript-泛型中的-K、T、V-等到底是个啥？" class="headerlink" title="TypeScript 泛型中的 K、T、V 等到底是个啥？"></a><a href="https://juejin.cn/post/7084410879223005215">TypeScript 泛型中的 K、T、V 等到底是个啥？</a></h3><p>当你首次看到 TypeScript 泛型中的 T 会感到陌生么？<br>那么 T 是什么意思呢？图中的泛型变量 T 表示 Type，实际上 T 可以用任何有效的名称代替。除了 T 之外，常见的泛型变量还有 K、V 和 E 等。</p><ul><li>K 全称 Key 表示对象中键的类型；</li><li>V 全称 Value 表示对象中值的类型；</li><li>E 全称 Element 表示元素类型。</li></ul><h3 id="45-个-GIT-经典操作场景，专治不会合代码"><a href="#45-个-GIT-经典操作场景，专治不会合代码" class="headerlink" title="45 个 GIT 经典操作场景，专治不会合代码"></a><a href="https://mp.weixin.qq.com/s/2p4m63JdsCjBpVku-WaZyA">45 个 GIT 经典操作场景，专治不会合代码</a></h3><p>本文作者整理了 45 个日常用 git 合代码的经典操作场景，基本覆盖了工作中的需求。</p><ul><li>读完本篇文章你会了解到以下知识：</li><li>提交（Committing） 处理，如：commit message 写错了，删除任意 commit 等等；</li><li>暂存（Staging）处理，如：我需要把暂存的内容添加到上一次的提交（commit）等等；</li><li>分支（branches）处理：如：我想提交到一个新分支，但错误提交到了 main 等等;</li><li>变基（Rebasing）和合并（Merging）处理，如：撤销 rebase/merge，有冲突的情况等待。</li></ul><h3 id="Vite-3-0-发布，下一代的前端工具链"><a href="#Vite-3-0-发布，下一代的前端工具链" class="headerlink" title="Vite 3.0 发布，下一代的前端工具链"></a><a href="https://www.oschina.net/news/202953/vite-3-0-released">Vite 3.0 发布，下一代的前端工具链</a></h3><p>Vite 3.0 现已于 2022 年 7 月 15 正式发布；Vite3.0 新特性一览；之后 vite 准备每年会发一个大版本。</p><h3 id="他来了！性能吊打-Node-js-和-Deno-的新一代-javaScript-运行时！"><a href="#他来了！性能吊打-Node-js-和-Deno-的新一代-javaScript-运行时！" class="headerlink" title="他来了！性能吊打 Node.js 和 Deno 的新一代 javaScript 运行时！"></a><a href="https://mp.weixin.qq.com/s?__biz=Mzg5NDEyMzA2NQ==&mid=2247488883&idx=1&sn=1ec39e6e52849ea2deb2dbbed26cc2df&chksm=c0253825f752b13303aa204bdfa93eb5979999cf5c61224726673f552ab5406ce9a506a6e7b5#rd">他来了！性能吊打 Node.js 和 Deno 的新一代 javaScript 运行时！</a></h3><p>刚开源不到一个月就获得了 19.5k star！看起来马上就会成为 Node.js 和 Deno 的一大竞争对手了！</p><p>和传统的 Node.js 这种传统的 javaScript 运行时不同，Bun.js 直接内置了打包器、转译器、任务运行器和 npm 客户端，这意味着你不再需要 Webpack/Rollup/esbuild/Snowpack/Parcel/Rome/swc/babel 就可以直接运行 TypeScript、JSX！</p><p>另外，Bun.js 原生支持了数百个 Node.js 和 Web API，包括约 90% 的 Node-API 函数(fs、path、Buffer 等)。</p><p>Bun.js 的目标是可以在浏览器之外的其他地方运行世界上大多数 JavaScript，为你未来的基础架构带来性能和复杂性的增强，并通过更好、更简单的工具提高开发者的生产力！</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://github.com/aliyunfe/weekly">阿里云 TXD 前端周刊</a></li><li><a href="https://github.com/ascoders/weekly">前端精度周刊</a></li><li><a href="">o2team/tech-weekly</a></li><li><a href="https://github.com/tnfe/TNT-Weekly/">tnfe/TNT-Weekly</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object.prototype.hasOwnProperty()和 Object.hasOwn()</title>
      <link href="/2022/07/09/023-object-prototype-hasownproperty-andobject-hasown/"/>
      <url>/2022/07/09/023-object-prototype-hasownproperty-andobject-hasown/</url>
      
        <content type="html"><![CDATA[<h1 id="Object-prototype-hasOwnProperty-和-Object-hasOwn"><a href="#Object-prototype-hasOwnProperty-和-Object-hasOwn" class="headerlink" title="Object.prototype.hasOwnProperty()和 Object.hasOwn()"></a>Object.prototype.hasOwnProperty()和 Object.hasOwn()</h1><h3 id="Object-prototype-hasOwnProperty"><a href="#Object-prototype-hasOwnProperty" class="headerlink" title="Object.prototype.hasOwnProperty()"></a><code>Object.prototype.hasOwnProperty()</code></h3><p><code>hasOwnProperty()</code> 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> object1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>object1<span class="token punctuation">.</span>property1 <span class="token operator">=</span> <span class="token number">42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"property1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// expected output: true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// expected output: false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"hasOwnProperty"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// expected output: false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Object-hasOwn"><a href="#Object-hasOwn" class="headerlink" title="Object.hasOwn()"></a><code>Object.hasOwn()</code></h3><blockquote><p><strong>注意：</strong> <code>Object.hasOwn()</code>旨在替代<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"><code>Object.hasOwnProperty()</code></a>.</p></blockquote><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p><code>hasOwn(instance, prop)</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> object1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">"exists"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>object1<span class="token punctuation">,</span> <span class="token string">"prop"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// expected output: true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>object1<span class="token punctuation">,</span> <span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// expected output: false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>object1<span class="token punctuation">,</span> <span class="token string">"undeclaredPropertyValue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// expected output: false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="hasOwn和-in-的区别"><a href="#hasOwn和-in-的区别" class="headerlink" title="hasOwn和 in 的区别"></a><code>hasOwn</code>和 in 的区别</h4><blockquote><p>以下示例区分直接属性和通过原型链继承的属性：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> example <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>example<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token string">"exists"</span><span class="token comment">// `hasOwn` will only return true for direct properties:</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>example<span class="token punctuation">,</span> <span class="token string">"prop"</span><span class="token punctuation">)</span> <span class="token comment">// returns true</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>example<span class="token punctuation">,</span> <span class="token string">"toString"</span><span class="token punctuation">)</span> <span class="token comment">// returns false</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>example<span class="token punctuation">,</span> <span class="token string">"hasOwnProperty"</span><span class="token punctuation">)</span> <span class="token comment">// returns false</span><span class="token comment">// The `in` operator will return true for direct or inherited properties:</span><span class="token string">"prop"</span> <span class="token keyword">in</span> example <span class="token comment">// returns true</span><span class="token string">"toString"</span> <span class="token keyword">in</span> example <span class="token comment">// returns true</span><span class="token string">"hasOwnProperty"</span> <span class="token keyword">in</span> example <span class="token comment">// returns true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hasOwnProperty-存在的问题"><a href="#hasOwnProperty-存在的问题" class="headerlink" title="hasOwnProperty 存在的问题"></a><code>hasOwnProperty</code> 存在的问题</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token string">'exists'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token string">'prop'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true - 与该对象怎么创建的没关系</span><span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'prop'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//  TypeError: foo.hasOwnProperty is not a function</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create"><code>Object.create(null)</code></a>. 这些不继承自<code>Object.prototype</code>，因此<code>hasOwnProperty()</code>无法访问。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for...of循环和for...in循环区别</title>
      <link href="/2022/07/09/020-for-of-xun-huan-he-for-in-xun-huan-qu-bie/"/>
      <url>/2022/07/09/020-for-of-xun-huan-he-for-in-xun-huan-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="for…of-循环和-for…in-循环区别"><a href="#for…of-循环和-for…in-循环区别" class="headerlink" title="for…of 循环和 for…in 循环区别"></a>for…of 循环和 for…in 循环区别</h1><h3 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>一个数据结构只要部署了<code>Symbol.iterator</code>属性，就被视为具有 iterator 接口，就可以用<code>for...of</code>循环遍历它的成员。也就是说，<code>for...of</code>循环内部调用的是数据结构的<code>Symbol.iterator</code>方法。</p><p><code>for...of</code>循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如<code>arguments</code>对象、<code>DOM NodeList</code> 对象、Generator 对象，以及字符串。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 原型链上  Symbol(Symbol.iterator): ƒ values()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><code>for...of</code>循环调用遍历器接口，数组的遍历器接口只返回具有数字索引的属性。这一点跟<code>for...in</code>循环也不一样。</p><pre class="line-numbers language-none"><code class="language-none">let arr &#x3D; [3, 5, 7];arr.foo &#x3D; &#39;hello&#39;;for (let i in arr) &#123;  console.log(i); &#x2F;&#x2F; &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;foo&quot;&#125;for (let i of arr) &#123;  console.log(i); &#x2F;&#x2F;  &quot;3&quot;, &quot;5&quot;, &quot;7&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for…in-循环"><a href="#for…in-循环" class="headerlink" title="for…in 循环"></a>for…in 循环</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p><code>for...in</code> 语句以任意顺序迭代对象的可枚举属性，会遍历手动添加的其他键，甚至包括原型链上的键，只能获得对象的键名，不能直接获取键，为遍历对象而设计。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">objCustom</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">arrCustom</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> iterable <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>iterable<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// "0"、"1"、"2", "foo", "arrCustom", "objCustom"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>for...in</code>循环有几个缺点。</p><ul><li>数组的键名是数字，但是<code>for...in</code>循环是以字符串作为键名“0”、“1”、“2”等等。</li><li><code>for...in</code>循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。</li><li>某些情况下，<code>for...in</code>循环会以任意顺序遍历键名。</li></ul><p>总之，<code>for...in</code>循环主要是为遍历对象而设计的，不适用于遍历数组。</p><p><code>for...of</code>循环相比上面几种做法，有一些显著的优点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> myArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>有着同<code>for...in</code>一样的简洁语法，但是没有<code>for...in</code>那些缺点。</li><li>不同于<code>forEach</code>方法，它可以与<code>break</code>、<code>continue</code>和<code>return</code>配合使用。</li><li>提供了遍历所有数据结构的统一操作接口。</li></ul><p>下面是一个使用 break 语句，跳出<code>for...of</code>循环的例子。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token keyword">of</span> fibonacci<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">break</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子，会输出斐波纳契数列小于等于 1000 的项。如果当前项大于 1000，就会使用<code>break</code>语句跳出<code>for...of</code>循环。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常见命令使用</title>
      <link href="/2022/07/09/021-git/"/>
      <url>/2022/07/09/021-git/</url>
      
        <content type="html"><![CDATA[<h1 id="git-常见命令使用"><a href="#git-常见命令使用" class="headerlink" title="git 常见命令使用"></a>git 常见命令使用</h1><h2 id="git-仓库初始化"><a href="#git-仓库初始化" class="headerlink" title="git 仓库初始化"></a>git 仓库初始化</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">echo <span class="token string">"# test"</span> <span class="token operator">>></span> <span class="token constant">README</span><span class="token punctuation">.</span>mdgit initgit add <span class="token constant">README</span><span class="token punctuation">.</span>mdgit commit <span class="token operator">-</span>m <span class="token string">"first commit"</span>git branch <span class="token operator">-</span><span class="token constant">M</span> maingit remote add origin git@github<span class="token punctuation">.</span>com<span class="token operator">:</span>xxx<span class="token punctuation">.</span>gitgit push <span class="token operator">-</span>u origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p><code>git reset</code>命令用于将当前分支指向另一个位置。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 将当期分支的指针倒退三个 commit，</span><span class="token comment"># 并且会改变暂存区</span>$ git reset HEAD~3<span class="token comment"># 倒退指针的同时，不改变暂存区</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>soft HEAD~3<span class="token comment"># 倒退指针的同时，改变工作区</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>hard HEAD~3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不指定回滚的位置，那么等同于撤销修改。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 撤销上一次向暂存区添加的所有文件</span>$ git reset<span class="token comment"># 无任何效果</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>soft<span class="token comment"># 同时撤销暂存区和工作区的修改，</span><span class="token comment"># 回复到上一次提交的状态</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>hard<span class="token comment"># 撤销上一次向暂存区添加的某个指定文件，</span><span class="token comment"># 不影响工作区中的该文件</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span> &lt;filename<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>soft: 不改变工作区和缓存区，只移动 HEAD 到指定 commit。</li><li>mixed: 只改变缓存区，不改变工作区。这是默认参数，通常用于撤销<code>git add</code>。</li><li>hard：改变工作区和暂存区到指定 commit。该参数等同于重置，可能会引起数据损失。<code>git reset --hard</code>等同于<code>git reset --hard HEAD</code>。</li><li><code>-p</code>表示键入交互模式，指定暂存区的哪些部分需要撤销。</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Undo add</span>$ git reset<span class="token comment"># Undo a commit，不重置工作区和缓存区</span><span class="token comment"># 回到 HEAD 之前的那个 commit</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>soft HEAD^<span class="token comment"># Undo a commit，重置工作区和缓存区</span><span class="token comment"># 连续撤销三个 commit：HEAD, HEAD^, and HEAD~2</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>hard HEAD~3<span class="token comment"># 从暂存区移除指定文件，但不改变工作区中的该文件</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span> frotz.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ahooks学习</title>
      <link href="/2022/06/01/019-ahooks/"/>
      <url>/2022/06/01/019-ahooks/</url>
      
        <content type="html"><![CDATA[<h2 id="aHooks"><a href="#aHooks" class="headerlink" title="aHooks"></a>aHooks</h2><h3 id="useRequest"><a href="#useRequest" class="headerlink" title="useRequest"></a>useRequest</h3><ul><li><p>公司</p><ul><li><p>组建内</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> xxx <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@/services/xxx"</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>  error<span class="token punctuation">,</span>  loading<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">APIxxx</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> merchantId <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>@/services/xxx</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> request <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"umi"</span><span class="token comment">// 判断是否创建过loyalty</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">APIxxx</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">params</span><span class="token operator">:</span> xxx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/xxx/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    params<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>代理位置/config/proxy</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">'/api-xxx/'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://xxx'</span><span class="token punctuation">,</span>          <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">'^/api-xxx/'</span><span class="token operator">:</span> <span class="token string">'/'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>默认用法/自动触发</p></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRequest <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"ahooks"</span><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">"mockjs"</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">function</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">"@name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">export default () => </span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> loading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUsername<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">failed to load</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Username: </span><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>手动触发<ul><li>run</li><li>runAsync</li></ul></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> loading<span class="token punctuation">,</span> runAsync <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>editUsername<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">runAsync</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The username was changed to "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>state<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" !</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>生命周期<ul><li><code>onBefore</code>：请求之前触发</li><li><code>onSuccess</code>：请求成功触发</li><li><code>onError</code>：请求失败触发</li><li><code>onFinally</code>：请求完成触发</li></ul></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRequest <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"ahooks"</span><span class="token keyword">function</span> <span class="token function">editUsername</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">username</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Failed to modify username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">export default () => </span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> loading<span class="token punctuation">,</span> run <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>editUsername<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function-variable function">onBefore</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Start Request: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>      message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The username was changed to "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" !</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">onFinally</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> result<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Request finish</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setState</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>state<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>loading<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">run</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token punctuation">&#123;</span>loading <span class="token operator">?</span> <span class="token string">"Loading"</span> <span class="token operator">:</span> <span class="token string">"Edit"</span><span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>刷新重复请求</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> run<span class="token punctuation">,</span> refresh <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getUsername</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>refresh<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">  Refresh</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>立即变更数据</p></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> message <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRequest <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'ahooks'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'@name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token plain-text">function editUsername(username: string): Promise</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token plain-text">export default () => </span><span class="token punctuation">&#123;</span>  <span class="token comment">// store last username</span>  <span class="token keyword">const</span> lastRef <span class="token operator">=</span> useRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span><span class="token plain-text">();  const [state, setState] = useState('');  // get username  const </span><span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> username<span class="token punctuation">,</span> mutate <span class="token punctuation">&#125;</span><span class="token plain-text"> = useRequest(getUsername);  // edit username  const </span><span class="token punctuation">&#123;</span> <span class="token literal-property property">run</span><span class="token operator">:</span> edit <span class="token punctuation">&#125;</span><span class="token plain-text"> = useRequest(editUsername, </span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">mutate</span><span class="token punctuation">(</span>lastRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token plain-text">);  const onChange = () => </span><span class="token punctuation">&#123;</span>    lastRef<span class="token punctuation">.</span>current <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token function">mutate</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">edit</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token plain-text">;  return (    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Username: </span><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setState</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>state<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Please enter username<span class="token punctuation">"</span></span>        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token literal-property property">marginRight</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        Edit      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">  );&#125;;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>取消请求</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> loading<span class="token punctuation">,</span> run<span class="token punctuation">,</span> cancel <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>editUsername<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The username was changed to "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" !</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>cancel<span class="token punctuation">&#125;</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">marginLeft</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">  Cancel</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参数管理</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> username<span class="token punctuation">,</span>  run<span class="token punctuation">,</span>  params<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUsername<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">defaultParams</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">UserId: </span><span class="token punctuation">&#123;</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>  loading<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>  data<span class="token operator">?</span><span class="token operator">:</span> TData<span class="token punctuation">,</span>  error<span class="token operator">?</span><span class="token operator">:</span> Error<span class="token punctuation">,</span>  params<span class="token operator">:</span> TParams <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token operator">:</span> TParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>  <span class="token function-variable function">runAsync</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token operator">:</span> TParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TData<span class="token operator">></span><span class="token punctuation">,</span>  <span class="token function-variable function">refresh</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>  <span class="token function-variable function">refreshAsync</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TData<span class="token operator">></span><span class="token punctuation">,</span>  mutate<span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">?</span><span class="token operator">:</span> TData <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>oldData<span class="token operator">?</span><span class="token operator">:</span> TData<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>TData <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>  <span class="token function-variable function">cancel</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRequest</span><span class="token generic class-name"><span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">></span></span></span><span class="token punctuation">(</span>  <span class="token function-variable function">service</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> TParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TData<span class="token operator">></span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    manual<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>    defaultParams<span class="token operator">?</span><span class="token operator">:</span> TParams<span class="token punctuation">,</span>    onBefore<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> TParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>    onSuccess<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> TData<span class="token punctuation">,</span> params<span class="token operator">:</span> TParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>    onError<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Error<span class="token punctuation">,</span> params<span class="token operator">:</span> TParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>    onFinally<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> TParams<span class="token punctuation">,</span> data<span class="token operator">?</span><span class="token operator">:</span> TData<span class="token punctuation">,</span> e<span class="token operator">?</span><span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>    loadingDelay<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token comment">//设置 loading 变成 true 的延迟时间</span>    pollingInterval<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token comment">//轮询间隔，单位为毫秒。如果值大于 0，则启动轮询模式。通过 cancel 来停止轮询，通过 run/runAsync 来启动轮询。</span>    pollingWhenHidden<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token comment">//在页面隐藏时，是否继续轮询。如果设置为 false，在页面隐藏时会暂时停止轮询，页面重新显示时继续上次轮询。</span>    ready<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token comment">//当前请求是否准备好了</span>    refreshDeps<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">//依赖数组，当数组内容变化后，发起请求。同 useEffect 的第二个参数。</span>refreshOnWindowFocus<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token comment">//在屏幕重新获取焦点或重新显示时，重新发起请求booleanfalse</span>focusTimespan<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span>debounceWait<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token comment">//防抖</span>    throttleWait<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token comment">//节流</span>  retryCount<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token comment">//错误重试</span>    cacheKey<span class="token operator">?</span><span class="token builtin">string</span><span class="token comment">//缓存</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useSetState"><a href="#useSetState" class="headerlink" title="useSetState"></a>useSetState</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useSetState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"ahooks"</span><span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">hello</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token literal-property property">count</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span>    useSetState <span class="token operator">&lt;</span>    State <span class="token operator">></span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">"world"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          set hello        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">"bar"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token string">"0 8px"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>        <span class="token punctuation">></span></span><span class="token plain-text">          set foo        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> prev<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>        <span class="token punctuation">></span></span><span class="token plain-text">          count + 1        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useBoolean"><a href="#useBoolean" class="headerlink" title="useBoolean"></a>useBoolean</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> toggle<span class="token punctuation">,</span> set<span class="token punctuation">,</span> setLeft<span class="token punctuation">,</span> setRight <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="useToggle"><a href="#useToggle" class="headerlink" title="useToggle"></a>useToggle</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> toggle<span class="token punctuation">,</span> set<span class="token punctuation">,</span> setLeft<span class="token punctuation">,</span> setRight <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> toggle<span class="token punctuation">,</span> set<span class="token punctuation">,</span> setLeft<span class="token punctuation">,</span> setRight <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="LifeCycle"><a href="#LifeCycle" class="headerlink" title="LifeCycle"></a>LifeCycle</h3><ul><li>useMount(fn: () =&gt; void );</li><li>useUnmount(fn: () =&gt; void);</li><li>useUnmount(fn: () =&gt; void);</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ahooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优选文章</title>
      <link href="/2022/03/01/024-you-xuan-wen-zhang/"/>
      <url>/2022/03/01/024-you-xuan-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h2 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h2><h3 id="git-使用"><a href="#git-使用" class="headerlink" title="git 使用"></a>git 使用</h3><ul><li><a href="https://www.bookstack.cn/read/git-tutorial/docs-commands-git-reset.md">阮一峰 Git 教程</a></li><li><a href="https://mp.weixin.qq.com/s/2p4m63JdsCjBpVku-WaZyA">45 个 GIT 经典操作场景，专治不会合代码</a></li><li></li></ul><h3 id="ES6-使用"><a href="#ES6-使用" class="headerlink" title="ES6 使用"></a>ES6 使用</h3><ul><li><a href="https://es6.ruanyifeng.com/">ES6 入门教程</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法+手撕</title>
      <link href="/2022/03/01/017-suan-fa-shou-si/"/>
      <url>/2022/03/01/017-suan-fa-shou-si/</url>
      
        <content type="html"><![CDATA[<h2 id="手撕"><a href="#手撕" class="headerlink" title="手撕"></a>手撕</h2><h3 id="节流-防抖"><a href="#节流-防抖" class="headerlink" title="节流-防抖"></a><strong>节流-防抖</strong></h3><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const throttle1 &#x3D; (fn,wait &#x3D; 500) &#x3D;&gt; &#123; &#x2F;&#x2F;必须返回函数否则是函数的直接调用        return function(...args) &#123;  &#x2F;&#x2F; 不能是箭头函数，让this指向该标签，否则this指向windiw          if(!this.timer)&#123;&#x2F;&#x2F;检测是否开启了定时器            this.timer &#x3D;  setTimeout(() &#x3D;&gt; &#123;&#x2F;&#x2F;没有开启则开启新的定时器，必须是箭头函数，否则this指向windiw              fn.apply(this,args) &#x2F;&#x2F;fn必须是普通函数，否则没法改变this指向              this.timer &#x3D; null&#x2F;&#x2F;清除定时器            &#125;,wait)          &#125;        &#125;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const debounce &#x3D; (func, wait &#x3D; 50) &#x3D;&gt; &#123;  &#x2F;&#x2F; 缓存一个定时器id  &#x2F;&#x2F; 这里返回的函数是每次用户实际调用的防抖函数  &#x2F;&#x2F; 如果已经设定过定时器了就清空上一次的定时器  &#x2F;&#x2F; 开始一个新的定时器，延迟执行用户传入的方法  return function(...args) &#123;    if (this.timer) clearTimeout(timer)    this.timer &#x3D; setTimeout(() &#x3D;&gt; &#123;      func.apply(this, args)    &#125;, wait)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call-apply-bind"></a>call-apply-bind</h3><p>1.call</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context <span class="token operator">=</span> window<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// this-->func  context--> obj  args--> 传递过来的参数</span>  <span class="token comment">// 在context上加一个唯一值不影响context上的属性</span>  <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>  context<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// context为调用的上下文,this此处为函数，将这个函数作为context的方法</span>  <span class="token comment">// let args = [...arguments].slice(1)   //第一个参数为obj所以删除,伪数组转为数组</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// 不删除会导致context属性越来越多</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.apply</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context <span class="token operator">=</span> window<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// this-->func  context--> obj  args--> 传递过来的参数</span>  <span class="token comment">// 在context上加一个唯一值不影响context上的属性</span>  <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>  context<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// context为调用的上下文,this此处为函数，将这个函数作为context的方法</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment">// 这里和call传参不一样</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// 不删除会导致context属性越来越多</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.bind</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context <span class="token operator">=</span> window<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">temp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> args2<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    temp<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"PENDING"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"PENDING"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"RESOLVED"</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value      <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"PENDING"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"REJECTED"</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value      <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"PENDING"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"RESOLVED"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"REJECTED"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>异步函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">time</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">timer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> timer<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">ajax1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">ajax2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">2</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">ajax3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">3</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function-variable function">all</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> promises<span class="token punctuation">.</span>length    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 为什么不直接 promise[i].then, 因为promise[i]可能不是一个promise</span>      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promise<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data          index<span class="token operator">++</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> len<span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>Promise<span class="token punctuation">.</span><span class="token function">all1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">ajax1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ajax2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ajax3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有顺序的执行-promose"><a href="#有顺序的执行-promose" class="headerlink" title="有顺序的执行 promose"></a>有顺序的执行 promose</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergePromise</span><span class="token punctuation">(</span><span class="token parameter">ajaxArr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//存放返回结果</span>  <span class="token keyword">let</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  ajaxArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ajax</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ajax<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token keyword">return</span> data    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> promise<span class="token punctuation">&#125;</span><span class="token function">mergePromise</span><span class="token punctuation">(</span><span class="token punctuation">[</span>ajax1<span class="token punctuation">,</span> ajax2<span class="token punctuation">,</span> ajax3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="限制并发"><a href="#限制并发" class="headerlink" title="限制并发"></a><strong>限制并发</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">limitLoad</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> limit</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> sequence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>url<span class="token punctuation">]</span>  <span class="token comment">//初始化promise容器</span>  <span class="token keyword">let</span> promises <span class="token operator">=</span> sequence<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">handler</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> index    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> sequence    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pCollect<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> pCollect        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token comment">//返回已经完成的下标</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fastestIndex</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          promises<span class="token punctuation">[</span>fastestIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">handler</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> fastestIndex          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模拟红绿的灯"><a href="#模拟红绿的灯" class="headerlink" title="模拟红绿的灯"></a><strong>模拟红绿的灯</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> <span class="token function">ajax1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">await</span> <span class="token function">ajax2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">await</span> <span class="token function">ajax3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ajax1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ajax2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ajax3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="eventBus"><a href="#eventBus" class="headerlink" title="eventBus"></a><strong>eventBus</strong></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EventBus</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      handler<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fn <span class="token keyword">of</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e <span class="token operator">===</span> fn<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      handler<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> _self <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>      _self<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 下面是 测试代码</span><span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//测试用例</span><span class="token keyword">let</span> eb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> test1<span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> test2<span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> test3<span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> <span class="token string">"第一次"</span><span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> test1<span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"第二次1"</span><span class="token punctuation">,</span> <span class="token string">"第二次2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">,</span> test4<span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">,</span> <span class="token string">"执行一次"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="伪数组转换"><a href="#伪数组转换" class="headerlink" title="伪数组转换"></a><strong>伪数组转换</strong></h3><blockquote><p><strong>什么是伪数组</strong></p></blockquote><p>本身并不能调用数组方法，它是一个另外一种对象类型，只不过属性从 0 开始排，依次为 0，1，2…最后还<strong>有 callee 和 length 属性</strong>。我们也把这样的对象称为类数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span>arguments<span class="token punctuation">]</span><span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(start,end)</span><span class="token keyword">let</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h3><ol><li>for 循环遍历判断是否数组 是的递归调用 <strong>concat 递归调用</strong>该数组 否则 push 新数组</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token function">flatten</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//  [1, 2, 3, 4，5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>利用 reduce 方法 +concat</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方法2</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">:</span> next<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  [1, 2, 3, 4，5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>some+[…]</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方法3</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  [1, 2, 3, 4，5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>arr.toString().split(‘,’);</p></li><li><p>arr.flat([depth])</p></li><li><p>正则</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方法 6</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1,["2",[3,[4,5]]],6]</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\[|\])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>  str <span class="token operator">=</span> <span class="token string">"["</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">"]"</span>  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  [1, 2, 3, 4，5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ol><li><p><strong>JSON.parse</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>oldObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>局限性：</strong></p><ul><li><p>会忽略 undefined</p></li><li><p>不能序列化函数</p></li><li><p>不能解决循环引用的对象</p></li><li><p>他无法实现对函数 、RegExp 等特殊对象的克隆</p></li><li><p>会抛弃对象的 constructor,所有的构造函数会指向 Object</p></li><li><p>对象有循环引用,会报错</p></li></ul></li><li><p><strong>（递归）</strong></p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 如果是 值类型 或 null，则直接return</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> copy <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    copy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 遍历对象的key</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果key是对象的自有属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 递归调用深拷贝方法</span>      copy<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> copy<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><ol><li><p>new Set（）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><blockquote><p><strong>对象数组不能去重</strong></p></blockquote><ol start="2"><li><p><strong>indexOf</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> array<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>对象数组 NaN 不能去重</strong></p></blockquote></li><li><p>new Map()</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>hasOwnProperty</strong></li></ol><p>简单版本</p><blockquote><p>只保留一个对象</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  object1  <span class="token keyword">typeof</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">+</span><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span>  object<span class="token punctuation">[</span>object Object<span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> item<span class="token operator">+</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>            obj<span class="token punctuation">[</span><span class="token keyword">typeof</span> item<span class="token operator">+</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>完整版本</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"[object Object]"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// console.log(item);</span>      <span class="token comment">// console.log(JSON.stringify(item));</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        obj<span class="token punctuation">[</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"[object Object]"</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>      obj<span class="token punctuation">[</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a><strong>排序</strong></h3><ol><li><p>冒泡</p><blockquote><p>每一轮操作，都会将这一轮中最大的元素放置到数组的末尾</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存数组长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token comment">// 外层循环用于控制从头到尾的比较+交换到底有多少轮</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 区别在这里，我们加了一个标志位</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">// 内层循环用于完成每一轮遍历过程中的重复比较+交换</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若相邻元素前面的数比后面的大</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 交换两者</span>        <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 若一次交换也没发生，则说明数组有序，直接放过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回数组</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>选择排序</strong></p><blockquote><p>每次都找出当前范围内的最小值，把它放在当前范围的头部</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存数组长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token comment">// 定义 minIndex，缓存当前区间最小值的索引，注意是索引</span>  <span class="token keyword">let</span> minIndex  <span class="token comment">// i 是当前排序区间的起点</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化 minIndex 为当前区间第一个元素</span>    minIndex <span class="token operator">=</span> i    <span class="token comment">// i、j分别定义当前区间的上下界，i是左边界，j是右边界</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若 j 处的数据项比当前最小值还要小，则更新最小值索引为 j</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        minIndex <span class="token operator">=</span> j      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果 minIndex 对应元素不是目前的头部元素，则交换两者</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>插入排序</strong></p><blockquote><p>找到元素在它前面那个序列中的正确位置</p></blockquote></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存数组长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token comment">// temp 用来保存当前需要插入的元素</span>  <span class="token keyword">let</span> temp  <span class="token comment">// i用于标识每次被插入的元素的索引</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// j用于帮助 temp 寻找自己应该有的定位</span>    <span class="token keyword">let</span> j <span class="token operator">=</span> i    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment">// 判断 j 前面一个元素是否比 temp 大</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果是，则将 j 前面的一个元素后移一位，为 temp 让出位置</span>      arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>      j<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 循环让位，最后得到的 j 就是 temp 的正确索引</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><blockquote><p>归并排序是对分治思想的典型应用，它按照如下的思路对分治思想“三步走”的框架进行了填充：</p></blockquote><ul><li>分解子问题：将需要被排序的数组从中间分割为两半，然后再将分割出来的每个子数组各分割为两半，重复以上操作，直到单个子数组只有一个元素为止。</li><li>求解每个子问题：从粒度最小的子数组开始，两两合并、确保每次合并出来的数组都是有序的。（这里的“子问题”指的就是对每个子数组进行排序）。 合并子问题的解，得出大问题的解：当数组被合并至原有的规模时，就得到了一个完全排序的数组</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token comment">// 处理边界情况</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr  <span class="token punctuation">&#125;</span>  <span class="token comment">// 计算分割点</span>  <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 递归分割左子数组，然后合并为有序数组</span>  <span class="token keyword">const</span> leftArr <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 递归分割右子数组，然后合并为有序数组</span>  <span class="token keyword">const</span> rightArr <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 合并左右两个有序数组</span>  arr <span class="token operator">=</span> <span class="token function">mergeArr</span><span class="token punctuation">(</span>leftArr<span class="token punctuation">,</span> rightArr<span class="token punctuation">)</span>  <span class="token comment">// 返回合并后的结果</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mergeArr</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化两个指针，分别指向 arr1 和 arr2</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// 初始化结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 缓存arr1的长度</span>  <span class="token keyword">const</span> len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length  <span class="token comment">// 缓存arr2的长度</span>  <span class="token keyword">const</span> len2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length  <span class="token comment">// 合并两个子数组</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      i<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      j<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若其中一个子数组首先被合并完全，则直接拼接另一个子数组的剩余部分</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span>    j <span class="token operator">=</span> right  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> value <span class="token operator">&amp;&amp;</span> j <span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      j<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> value <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="转化为驼峰命名"><a href="#转化为驼峰命名" class="headerlink" title="转化为驼峰命名"></a><strong>转化为驼峰命名</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">"get-element-by-id"</span><span class="token comment">// 转化为 getElementById</span><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断是否是回文串"><a href="#判断是否是回文串" class="headerlink" title="判断是否是回文串"></a>判断是否是回文串</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">str <span class="token operator">===</span><span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 缓存字符串的长度</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span>length    <span class="token comment">// 遍历前半部分，判断和后半部分是否对称</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!==</span>str<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token comment">// 工具方法，用于判断字符串是否回文</span>    <span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token parameter">st<span class="token punctuation">,</span> ed</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>st<span class="token operator">&lt;</span>ed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span>            st<span class="token operator">++</span>            ed<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除一个是否回文"><a href="#删除一个是否回文" class="headerlink" title="删除一个是否回文"></a>删除一个是否回文</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">validPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存字符串的长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length  <span class="token comment">// i、j分别为左右指针</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    j <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment">// 当左右指针均满足对称时，一起向中间前进</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i<span class="token operator">++</span>    j<span class="token operator">--</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 尝试判断跳过左指针元素后字符串是否回文</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 尝试判断跳过右指针元素后字符串是否回文</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 工具方法，用于判断字符串是否回文</span>  <span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token parameter">st<span class="token punctuation">,</span> ed</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>st <span class="token operator">&lt;</span> ed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span>      st<span class="token operator">++</span>      ed<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 默认返回 false</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a><strong>无重复字符的最长子串</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//判断滑动窗口内是否有重复元素</span>  <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//滑动窗口左边界</span>    maxLength <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//极端情况</span>    <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//滑动窗口右边界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//当前元素不在set中 就加入set 然后更新最大长度，i++继续下一轮循环</span>      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      maxLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> set<span class="token punctuation">.</span>size<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//set中有重复元素不断让j++ 并删除窗口之外的元素 直到滑动窗口内没有重复的元素</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        j<span class="token operator">++</span>      <span class="token punctuation">&#125;</span>      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//放心将s[i]加入set中</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> maxLength<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a><strong>最长回文子串</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">longestPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 回文子串长度是奇数</span>    <span class="token function">helper</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token comment">// 回文子串长度是偶数</span>    <span class="token function">helper</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      m<span class="token operator">--</span>      n<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 注意此处m,n的值循环完后  是恰好不满足循环条件的时刻 如果此轮询得到回文串长度大于之前记录， 记录此轮循边界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> r <span class="token operator">-</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      r <span class="token operator">=</span> n      l <span class="token operator">=</span> m    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最长上升子序列模型"><a href="#最长上升子序列模型" class="headerlink" title="最长上升子序列模型"></a><strong>最长上升子序列模型</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 入参是一个数字序列</span><span class="token keyword">const</span> <span class="token function-variable function">lengthOfLIS</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存序列的长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token comment">// 处理边界条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 初始化数组里面每一个索引位的状态值</span>  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 初始化最大上升子序列的长度为1</span>  <span class="token keyword">let</span> maxLen <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">// 从第2个元素开始，遍历整个数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 每遍历一个新元素，都要“回头看”，看看能不能延长原有的上升子序列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若遇到了一个比当前元素小的值，则意味着遇到了一个可以延长的上升子序列，故更新当前元素索引位对应的状态</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 及时更新上升子序列长度的最大值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      maxLen <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 遍历完毕，最后到手的就是最大上升子序列的长度</span>  <span class="token keyword">return</span> maxLen<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>创建</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：fill([])后面传递的是引用数据类型</p><h4 id="两数求和问题"><a href="#两数求和问题" class="headerlink" title="两数求和问题"></a><strong>两数求和问题</strong></h4><p>哈希表 map</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里我用对象来模拟 map 的能力</span>  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 缓存数组长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token comment">// 遍历数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 判断当前值对应的 target 差值是否存在（是否已遍历过）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若有对应差值，那么答案get！</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 若没有对应差值，则记录当前值</span>    map<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合并升序数组"><a href="#合并升序数组" class="headerlink" title="合并升序数组"></a>合并升序数组</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化两个指针的指向，初始化 nums1 尾部索引k</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>    j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>    k <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment">// 当两个数组都没遍历完时，指针同步移动</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 取较大的值，从末尾往前填补</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      i<span class="token operator">--</span>      k<span class="token operator">--</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>      j<span class="token operator">--</span>      k<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// nums2 留下的情况，特殊处理一下</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    k<span class="token operator">--</span>    j<span class="token operator">--</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergeArr</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化两个指针，分别指向 arr1 和 arr2</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// 初始化结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 缓存arr1的长度</span>  <span class="token keyword">const</span> len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length  <span class="token comment">// 缓存arr2的长度</span>  <span class="token keyword">const</span> len2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length  <span class="token comment">// 合并两个子数组</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      i<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      j<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若其中一个子数组首先被合并完全，则直接拼接另一个子数组的剩余部分</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三数求和"><a href="#三数求和" class="headerlink" title="三数求和"></a>三数求和</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums * @return &#123;number[][]&#125; */</span><span class="token keyword">const</span> <span class="token function-variable function">threeSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 用于存放结果数组</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 给 nums 排序</span>  nums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 缓存数组长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token comment">// 注意我们遍历到倒数第三个数就足够了，因为左右指针会遍历后面两个数</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 左指针 j</span>    <span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment">// 右指针k</span>    <span class="token keyword">let</span> k <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span>    <span class="token comment">// 如果遇到重复的数字，则跳过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 三数之和小于0，左指针前进</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        j<span class="token operator">++</span>        <span class="token comment">// 处理左指针元素重复的情况</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          j<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 三数之和大于0，右指针后退</span>        k<span class="token operator">--</span>        <span class="token comment">// 处理右指针元素重复的情况</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          k<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 得到目标数字组合，推入结果数组</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">// 左右指针一起前进</span>        j<span class="token operator">++</span>        k<span class="token operator">--</span>        <span class="token comment">// 若左指针元素重复，跳过</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          j<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 若右指针元素重复，跳过</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          k<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回结果数组</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="比较版本号"><a href="#比较版本号" class="headerlink" title="比较版本号"></a>比较版本号</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">compareVersion</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">version1<span class="token punctuation">,</span> version2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> arr1 <span class="token operator">=</span> version1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> arr2 <span class="token operator">=</span> version2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> n1 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> n2 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">></span> n2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// arr2 数组已经为空</span>    <span class="token keyword">return</span> arr1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//if (temp2.length === 0) &#123;</span>  <span class="token comment">//    for (const value of temp1) &#123;</span>  <span class="token comment">//    if (Number(value) !== 0) return 1</span>  <span class="token comment">//   &#125;</span>  <span class="token comment">//&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// arr1 数组已经为空</span>    <span class="token keyword">return</span> arr2<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="千位分隔符"><a href="#千位分隔符" class="headerlink" title="千位分隔符"></a><strong>千位分隔符</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">thousandSeparator</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;1,3&#125;(?=(\d&#123;3&#125;)+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>s<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">thousandSeparator</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拆解-URL-参数中-queryString"><a href="#拆解-URL-参数中-queryString" class="headerlink" title="拆解 URL 参数中 queryString"></a><strong>拆解 URL 参数中 queryString</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">querySearch</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  query<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span>    res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"www.alipay.com/index.html?user=anyone&amp;tip=haha#first"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">querySearch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回最接近输入值的数字"><a href="#返回最接近输入值的数字" class="headerlink" title="返回最接近输入值的数字"></a><strong>返回最接近输入值的数字</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findNext</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> tempArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span>  tempArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  tempArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> tempArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> tempArr<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> tempArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> tempArr<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> tempArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> tempArr<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span>    tempArr<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> tempArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token operator">?</span> tempArr<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token operator">:</span> tempArr<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a><strong>连续子数组的最大和</strong></h4><ol><li>贪心算法</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ans <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 继续加当前元素</span>      sum <span class="token operator">+=</span> num    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 加上当前元素只会对最终数组和起减少的作用，而不是增大数组和，所以就直接以当前元素为起点新起数组求最大数组和</span>      sum <span class="token operator">=</span> num    <span class="token punctuation">&#125;</span>    ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> sum<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>动态规划</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// base case 第一个元素前面没有子数组</span>  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">// 状态转移方程</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>      <span class="token comment">// 自成一派</span>      nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment">// 与前面的子数组合并</span>      nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>dp<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">//保存上一次的最大值</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> cur <span class="token comment">//保存结果</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cur <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> cur<span class="token punctuation">)</span>    res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 入参是一个数组</span><span class="token keyword">const</span> <span class="token function-variable function">permute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存数组的长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token comment">// curr 变量用来记录当前的排列内容</span>  <span class="token keyword">const</span> curr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// res 用来记录所有的排列顺序</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// visited 用来避免重复使用同一个数字</span>  <span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 定义 dfs 函数，入参是坑位的索引（从 0 计数）</span>  <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">nth</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 若遍历到了不存在的坑位（第 len+1 个），则触碰递归边界返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nth <span class="token operator">===</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 此时前 len 个坑位已经填满，将对应的排列记录下来</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 检查手里剩下的数字有哪些</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若 nums[i] 之前没被其它坑位用过，则可以理解为“这个数字剩下了”</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 给 nums[i] 打个“已用过”的标</span>        visited<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token comment">// 将nums[i]推入当前排列</span>        curr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">// 基于这个排列继续往下一个坑走去</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">// nums[i]让出当前坑位</span>        curr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 下掉“已用过”标识</span>        visited<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 从索引为 0 的坑位（也就是第一个坑位）开始 dfs</span>  <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h4 id="如何用栈实现一个队列？"><a href="#如何用栈实现一个队列？" class="headerlink" title="如何用栈实现一个队列？"></a><strong>如何用栈实现一个队列？</strong></h4><ul><li><p>push(x) – 将一个元素放入队列的尾部。</p></li><li><p>pop() – 从队列首部移除元素。</p></li><li><p>peek() – 返回队列首部的元素。</p></li><li><p>empty() – 返回队列是否为空。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 初始化构造函数 */</span><span class="token keyword">const</span> <span class="token function-variable function">MyQueue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化两个栈</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Push element x to the back of queue. * @param &#123;number&#125; x * @return &#123;void&#125; */</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 直接调度数组的 push 方法</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Removes the element from in front of queue and returns that element. * @return &#123;number&#125; */</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 假如 stack2 为空，需要将 stack1 的元素转移进来</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当 stack1 不为空时，出栈</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将 stack1 出栈的元素推入 stack2</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 为了达到逆序的目的，我们只从 stack2 里出栈元素</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Get the front element. * @return &#123;number&#125; * 这个方法和 pop 唯一的区别就是没有将定位到的值出栈 */</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">peek</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当 stack1 不为空时，出栈</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将 stack1 出栈的元素推入 stack2</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 缓存 stack2 的长度</span>  <span class="token keyword">const</span> stack2Len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length  <span class="token keyword">return</span> stack2Len <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">[</span>stack2Len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Returns whether the queue is empty. * @return &#123;boolean&#125; */</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">empty</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 若 stack1 和 stack2 均为空，那么队列空</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="找出所有滑动窗口里的最大值。"><a href="#找出所有滑动窗口里的最大值。" class="headerlink" title="找出所有滑动窗口里的最大值。"></a>找出所有滑动窗口里的最大值。</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">maxSlidingWindow</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存数组的长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token comment">// 初始化结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 初始化双端队列</span>  <span class="token keyword">const</span> deque <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 开始遍历数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当队尾元素小于当前元素时</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>deque<span class="token punctuation">[</span>deque<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将队尾元素（索引）不断出队，直至队尾元素大于等于当前元素</span>      deque<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 入队当前元素索引（注意是索引）</span>    deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment">// 当队头元素的索引已经被排除在滑动窗口之外时</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将队头元素索引出队</span>      deque<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断滑动窗口的状态，只有在被遍历的元素个数大于 k 的时候，才更新结果数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>deque<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回结果数组</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h4 id="栈的设计——“最小栈”问题"><a href="#栈的设计——“最小栈”问题" class="headerlink" title="栈的设计——“最小栈”问题"></a><strong>栈的设计——“最小栈”问题</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">MinStack</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 定义辅助栈</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @param &#123;number&#125; x * @return &#123;void&#125; */</span><span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">// 若入栈的值小于当前最小值，则推入辅助栈栈顶</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @return &#123;void&#125; */</span><span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 若出栈的值和当前最小值相等，那么辅助栈也要对栈顶元素进行出栈，确保最小值的有效性</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @return &#123;number&#125; */</span><span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">top</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @return &#123;number&#125; */</span><span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getMin</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 辅助栈的栈顶，存的就是目标中的最小值</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有效括号"><a href="#有效括号" class="headerlink" title="有效括号"></a>有效括号</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"("</span><span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">"]"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"&#123;"</span><span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ch <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token string">"("</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">"["</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">"&#123;"</span><span class="token operator">:</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>        i<span class="token operator">++</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">")"</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">"]"</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">"&#125;"</span><span class="token operator">:</span>        <span class="token comment">// arr.push()</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          i<span class="token operator">--</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="链表的合并"><a href="#链表的合并" class="headerlink" title="链表的合并"></a><strong>链表的合并</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">mergeTwoLists</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义头结点，确保链表可以被访问到</span>  <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// cur 这里就是咱们那根“针”</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> head  <span class="token comment">// “针”开始在 l1 和 l2 间穿梭了</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果 l1 的结点值较小</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 先串起 l1 的结点</span>      cur<span class="token punctuation">.</span>next <span class="token operator">=</span> l1      <span class="token comment">// l1 指针向前一步</span>      l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// l2 较小时，串起 l2 结点</span>      cur<span class="token punctuation">.</span>next <span class="token operator">=</span> l2      <span class="token comment">// l2 向前一步</span>      l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>    <span class="token comment">// “针”在串起一个结点后，也会往前一步</span>    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token comment">// 处理链表不等长的情况</span>  cur<span class="token punctuation">.</span>next <span class="token operator">=</span> l1 <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> l1 <span class="token operator">:</span> l2  <span class="token comment">// 返回起始结点</span>  <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="链表结点的删除"><a href="#链表结点的删除" class="headerlink" title="链表结点的删除"></a><strong>链表结点的删除</strong></h4><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">deleteDuplicates</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 设定 cur 指针，初始位置为链表第一个结点</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> head  <span class="token comment">// 遍历链表</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 若当前结点和它后面一个结点值相等（重复）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">===</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 删除靠后的那个结点（去重）</span>      cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若不重复，继续遍历</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> head<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给定一个排序链表，删除所有含有重复数字的结点，只保留原始链表中 没有重复出现的数字。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">deleteDuplicates</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 极端情况：0个或1个结点，则不会重复，直接返回</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> head  <span class="token punctuation">&#125;</span>  <span class="token comment">// dummy 登场</span>  <span class="token keyword">let</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// dummy 永远指向头结点</span>  dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head  <span class="token comment">// cur 从 dummy 开始遍历</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> dummy  <span class="token comment">// 当 cur 的后面有至少两个结点时</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 对 cur 后面的两个结点进行比较</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若值重复，则记下这个值</span>      <span class="token keyword">let</span> val <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val      <span class="token comment">// 反复地排查后面的元素是否存在多次重复该值的情况</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 若有，则删除</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若不重复，则正常遍历</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回链表的起始结点</span>  <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除链表的倒数第-N-个结点"><a href="#删除链表的倒数第-N-个结点" class="headerlink" title="删除链表的倒数第 N 个结点"></a><strong>删除链表的倒数第 N 个结点</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">removeNthFromEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化 dummy 结点</span>  <span class="token keyword">const</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// dummy指向头结点</span>  dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head  <span class="token comment">// 初始化快慢指针，均指向dummy</span>  <span class="token keyword">let</span> fast <span class="token operator">=</span> dummy  <span class="token keyword">let</span> slow <span class="token operator">=</span> dummy  <span class="token comment">// 快指针闷头走 n 步</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next    n<span class="token operator">--</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 快慢指针一起走</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token comment">// 慢指针删除自己的后继结点</span>  slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next  <span class="token comment">// 返回头结点</span>  <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="链表的反转"><a href="#链表的反转" class="headerlink" title="链表的反转"></a><strong>链表的反转</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化前驱结点为 null</span>  <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment">// 初始化目标结点为头结点</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> head  <span class="token comment">// 只要目标结点不为 null，遍历就得继续</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 记录一下 next 结点</span>    <span class="token keyword">let</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    <span class="token comment">// 反转指针</span>    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre    <span class="token comment">// pre 往前走一步</span>    pre <span class="token operator">=</span> cur    <span class="token comment">// cur往前走一步</span>    cur <span class="token operator">=</span> next  <span class="token punctuation">&#125;</span>  <span class="token comment">// 反转结束后，pre 就会变成新链表的头结点</span>  <span class="token keyword">return</span> pre<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="局部反转一个链表"><a href="#局部反转一个链表" class="headerlink" title="局部反转一个链表"></a>局部反转一个链表</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">reverseBetween</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义pre、cur，用leftHead来承接整个区间的前驱结点</span>  <span class="token keyword">let</span> pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> leftHead  <span class="token comment">// 别忘了用 dummy 嗷</span>  <span class="token keyword">const</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// dummy后继结点是头结点</span>  dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head  <span class="token comment">// p是一个游标，用于遍历，最初指向 dummy</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> dummy  <span class="token comment">// p往前走 m-1 步，走到整个区间的前驱结点处</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token comment">// 缓存这个前驱结点到 leftHead 里</span>  leftHead <span class="token operator">=</span> p  <span class="token comment">// start 是反转区间的第一个结点</span>  <span class="token keyword">let</span> start <span class="token operator">=</span> leftHead<span class="token punctuation">.</span>next  <span class="token comment">// pre 指向start</span>  pre <span class="token operator">=</span> start  <span class="token comment">// cur 指向 start 的下一个结点</span>  cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next  <span class="token comment">// 开始重复反转动作</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> m<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre    pre <span class="token operator">=</span> cur    cur <span class="token operator">=</span> next  <span class="token punctuation">&#125;</span>  <span class="token comment">//  leftHead 的后继结点此时为反转后的区间的第一个结点</span>  leftHead<span class="token punctuation">.</span>next <span class="token operator">=</span> pre  <span class="token comment">// 将区间内反转后的最后一个结点 next 指向 cur</span>  start<span class="token punctuation">.</span>next <span class="token operator">=</span> cur  <span class="token comment">// dummy.next 永远指向链表头结点</span>  <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断链表是否成环"><a href="#判断链表是否成环" class="headerlink" title="判断链表是否成环"></a><strong>判断链表是否成环</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 只要结点存在，那么就继续遍历</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果 flag 已经立过了，那么说明环存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果 flag 没立过，就立一个 flag 再往 下走</span>      head<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span>      head <span class="token operator">=</span> head<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定位环的起点"><a href="#定位环的起点" class="headerlink" title="定位环的起点"></a><strong>定位环的起点</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">detectCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> head    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      head<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span>      head <span class="token operator">=</span> head<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h4><ol><li>哈希表</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">getIntersectionNode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">headA<span class="token punctuation">,</span> headB</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headA <span class="token operator">||</span> <span class="token operator">!</span>headB<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token keyword">const</span> hashmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> pA <span class="token operator">=</span> headA  <span class="token keyword">while</span> <span class="token punctuation">(</span>pA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    hashmap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>pA<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    pA <span class="token operator">=</span> pA<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> pB <span class="token operator">=</span> headB  <span class="token keyword">while</span> <span class="token punctuation">(</span>pB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hashmap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>pB<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> pB    pB <span class="token operator">=</span> pB<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>双指针</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">getIntersectionNode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">headA<span class="token punctuation">,</span> headB</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headA <span class="token operator">||</span> <span class="token operator">!</span>headB<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token keyword">let</span> pA <span class="token operator">=</span> headA<span class="token punctuation">,</span>    pB <span class="token operator">=</span> headB  <span class="token keyword">while</span> <span class="token punctuation">(</span>pA <span class="token operator">!==</span> pB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pA <span class="token operator">=</span> pA <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> headB <span class="token operator">:</span> pA<span class="token punctuation">.</span>next    pB <span class="token operator">=</span> pB <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> headA <span class="token operator">:</span> pB<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> pA<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 首先声明一个数组用来存放遍历得到的节点val值</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 采用递归遍历</span>  <span class="token keyword">function</span> <span class="token function">preorder</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果节点为空直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token comment">// 先序遍历就是把当前节点输出 放在左右递归调用之前 将其数值放入结果数组</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token comment">// 然后递归遍历左孩子</span>    <span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token comment">// 最后递归遍历右孩子</span>    <span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment">// 返回结果</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="迭代遍历（利用栈思想）"><a href="#迭代遍历（利用栈思想）" class="headerlink" title="迭代遍历（利用栈思想）"></a>迭代遍历（利用栈思想）</h4><ol><li><p>前序</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;TreeNode&#125; root * @return &#123;number[]&#125; */</span><span class="token keyword">const</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 处理边界条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res  <span class="token punctuation">&#125;</span>  <span class="token comment">// 初始化栈结构</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 首先将根结点入栈</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment">// 若栈不为空，则重复出栈、入栈操作</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将栈顶结点记为当前结点</span>    <span class="token keyword">const</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 当前结点就是当前子树的根结点，把这个结点放在结果数组的尾部</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token comment">// 若当前子树根结点有右孩子，则将右孩子入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 若当前子树根结点有左孩子，则将左孩子入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回结果数组</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后序</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;TreeNode&#125; root * @return &#123;number[]&#125; */</span><span class="token keyword">const</span> <span class="token function-variable function">postorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 处理边界条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res  <span class="token punctuation">&#125;</span>  <span class="token comment">// 初始化栈结构</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 首先将根结点入栈</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment">// 若栈不为空，则重复出栈、入栈操作</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将栈顶结点记为当前结点</span>    <span class="token keyword">const</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 当前结点就是当前子树的根结点，把这个结点放在结果数组的头部</span>    res<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token comment">// 若当前子树根结点有左孩子，则将左孩子入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 若当前子树根结点有右孩子，则将右孩子入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回结果数组</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>中序</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 初始化栈结构</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 用一个 cur 结点充当游标</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> root  <span class="token comment">// 当 cur 不为空、或者 stack 不为空时，重复以下逻辑</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这个 while 的作用是把寻找最左叶子结点的过程中，途径的所有结点都记录下来</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将途径的结点入栈</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>      <span class="token comment">// 继续搜索当前结点的左孩子</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left    <span class="token punctuation">&#125;</span>    <span class="token comment">// 取出栈顶元素</span>    cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 将栈顶元素入栈</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token comment">// 尝试读取 cur 结点的右孩子</span>    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回结果数组</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h4><ol><li>返回数组</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">BFS</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 初始化队列queue</span>  <span class="token comment">// 根结点首先入队</span>  queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment">// 队列不为空，说明没有遍历完全</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> top <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 取出队头元素</span>    <span class="token comment">// 访问 top</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token comment">// 如果左子树存在，左子树入队</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果右子树存在，右子树入队</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 访问完毕，队头元素出队</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>返回二维数组</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">levelOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 非递归的实现方式 */</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>  <span class="token comment">// while 循环控制从上向下一层层遍历</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length    <span class="token comment">// 记录这一层的节点值</span>    <span class="token keyword">let</span> level <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">// for 循环控制每一层从左向右遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      level<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><h4 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a><strong>爬楼梯</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 处理递归边界</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 递归计算</span>    <span class="token keyword">return</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment">// 定义记忆数组 f</span><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">2</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若f[n]不存在，则进行计算</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>  f<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 若f[n]已经求解过，直接返回</span>  <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>  <span class="token keyword">const</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化状态数组</span>    <span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化已知值</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 动态更新每一层楼梯对应的结果</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回目标值</span>    <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="如何优雅地找硬币"><a href="#如何优雅地找硬币" class="headerlink" title="如何优雅地找硬币"></a><strong>如何优雅地找硬币</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">coinChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">coins<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 用于保存每个目标总额对应的最小硬币个数</span>  <span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 提前定义已知情况</span>  f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// 遍历 [1, amount] 这个区间的硬币总额</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 求的是最小值，因此我们预设为无穷大，确保它一定会被更小的数更新</span>    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">Infinity</span>    <span class="token comment">// 循环遍历每个可用硬币的面额</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若硬币面额小于目标总额，则问题成立</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 状态转移方程</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若目标总额对应的解为无穷大，则意味着没有一个符合条件的硬币总数来更新它，本题无解，返回-1</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若有解，直接返回解的内容</span>  <span class="token keyword">return</span> f<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="背包模型"><a href="#背包模型" class="headerlink" title="背包模型"></a>背包模型</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">knapsack</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> c<span class="token punctuation">,</span> w<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// dp是动态规划的状态保存数组</span>  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// res 用来记录所有组合方案中的最大值</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token operator">=</span> c<span class="token punctuation">;</span> v <span class="token operator">>=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> v<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 写出状态转移方程</span>      dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>v <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment">// 即时更新最大值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最长上升子序列模型-1"><a href="#最长上升子序列模型-1" class="headerlink" title="最长上升子序列模型"></a><strong>最长上升子序列模型</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 入参是一个数字序列</span><span class="token keyword">const</span> <span class="token function-variable function">lengthOfLIS</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存序列的长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token comment">// 处理边界条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 初始化数组里面每一个索引位的状态值</span>  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 初始化最大上升子序列的长度为1</span>  <span class="token keyword">let</span> maxLen <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">// 从第2个元素开始，遍历整个数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 每遍历一个新元素，都要“回头看”，看看能不能延长原有的上升子序列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若遇到了一个比当前元素小的值，则意味着遇到了一个可以延长的上升子序列，故更新当前元素索引位对应的状态</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 及时更新上升子序列长度的最大值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      maxLen <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 遍历完毕，最后到手的就是最大上升子序列的长度</span>  <span class="token keyword">return</span> maxLen<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="实现-add-1-2"><a href="#实现-add-1-2" class="headerlink" title="实现 add(1)(2)()"></a>实现 add(1)(2)()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token keyword">return</span> a    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20220330143049151](/Users/didi/Library/Application Support/typora-user-images/image-20220330143049151.png)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
